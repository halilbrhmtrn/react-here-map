!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],t):t((e=e||self).reactHereMap={},e.React,e.PropTypes)}(this,(function(e,t,r){"use strict";var n="default"in t?t.default:t;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=c(e);if(t){var o=c(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return f(this,r)}}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r=r&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;var h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function y(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function v(e,t){return e(t={exports:{}},t.exports),t.exports}var b=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},t.isString=function(e){return"string"==typeof e},t.isFunction=function(e){return"function"==typeof e}}));y(b);b.isArray,b.isString,b.isFunction;var g=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r={};t.default=function e(t,n){if((0,b.isString)(t))return new Promise((function(e,n){!function(e,t,n){var o=function(){r[e]=!0,(0,b.isFunction)(t)&&t()};if(r[e])o();else{var i=document.createElement("script");i.type="text/javascript",i.readyState?i.onreadystatechange=function(){"loaded"!=i.readyState&&"complete"!=i.readyState||(i.onreadystatechange=null,o())}:i.onload=function(){o()},i.onerror=function(t){r[e]=!1,console.log("error",t),(0,b.isFunction)(n)&&n()},i.src=e,(document.body||document.head||document).appendChild(i)}}(t,(function(){return e(!0)}),(function(){return n()}))}));if((0,b.isArray)(t)){var o=Promise.resolve(!0);return t.forEach((function(t){o=o.then((function(){return e(t)}))})),o}throw new Error("Invalid argument for get()")}}));y(g);var w=g.default,j={VERSION:"v3/3.0",interactive:!1,includeUI:!1,includePlaces:!1},O=v((function(e){!function(t){var r=function(e){return o(!0===e,!1,arguments)};function n(e,t){if("object"!==i(e))return t;for(var r in t)"object"===i(e[r])&&"object"===i(t[r])?e[r]=n(e[r],t[r]):e[r]=t[r];return e}function o(e,t,o){var a=o[0],u=o.length;(e||"object"!==i(a))&&(a={});for(var s=0;s<u;++s){var c=o[s];if("object"===i(c))for(var l in c)if("__proto__"!==l){var f=e?r.clone(c[l]):c[l];a[l]=t?n(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}r.recursive=function(e){return o(!0===e,!0,arguments)},r.clone=function(e){var t,n,o=e,a=i(e);if("array"===a)for(o=[],n=e.length,t=0;t<n;++t)o[t]=r.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=r.clone(e[t]);return o},t?e.exports=r:window.merge=r}(e&&e.exports)}));const _=e=>{const t=(e=>O(j,e))(e||{}),{VERSION:r,version:n,interactive:o,includeUI:i,includePlaces:a}=t,u=n||r,s=((e=j.VERSION)=>[`https://js.api.here.com/${e}/mapsjs-service.js`,`https://js.api.here.com/${e}/mapsjs-ui.js`,`https://js.api.here.com/${e}/mapsjs-mapevents.js`,`https://js.api.here.com/${e}/mapsjs-places.js`])(u);!o&&s.splice(2,1),!i&&s.splice(1,1),!a&&s.splice(3,1);return w(`https://js.api.here.com/${u}/mapsjs-core.js`).then((function(){if(i){const e=document.createElement("link");e.setAttribute("rel","stylesheet"),e.setAttribute("type","text/css"),e.setAttribute("href",`https://js.api.here.com/${u}/mapsjs-ui.css`),document.getElementsByTagName("head")[0].append(e)}return w(s)})).catch(e=>{console.log(e)})};var k={normal:["xbase","xbasenight","base","basenight","map","mapnight","traffic","trafficnight","transit","panorama","panoramanight","labels","metaInfo"],satellite:["xbase","base","map","traffic","panorama","labels"],terrain:["xbase","base","map","traffic","panorama","labels"],incidents:!0,venues:!0},x=function(){},E={};["pointerdown","pointerup","pointermove","pointerenter","pointerleave","pointercancel","dragstart","drag","dragend","tab","dbltap"].map((function(e){return E[e]=x}));var S={VERSION:"v3/3.0",mapTypes:k,mapEvents:E,MAP_TYPE:"normal.map",mapOptions:{zoom:8,center:{lat:6.5243793,lng:3.3792057}},interactive:!1,includeUI:!1,includePlaces:!1,useEvents:!1,containerId:"HERE_MAP_CONTAINER",defaultClassName:"here-map-container"},P=v((function(e,t){var r=/^\[object .+?Constructor\]$/,n=/^(?:0|[1-9]\d*)$/,o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1;var i="object"==typeof h&&h&&h.Object===Object&&h,a="object"==typeof self&&self&&self.Object===Object&&self,u=i||a||Function("return this")(),s=t&&!t.nodeType&&t,c=s&&e&&!e.nodeType&&e,l=c&&c.exports===s,f=l&&i.process,p=function(){try{var e=c&&c.require&&c.require("util").types;return e||f&&f.binding&&f.binding("util")}catch(e){}}(),d=p&&p.isTypedArray;function m(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}var y,v,b,g=Array.prototype,w=Function.prototype,j=Object.prototype,O=u["__core-js_shared__"],_=w.toString,k=j.hasOwnProperty,x=(y=/[^.]+$/.exec(O&&O.keys&&O.keys.IE_PROTO||""))?"Symbol(src)_1."+y:"",E=j.toString,S=_.call(Object),P=RegExp("^"+_.call(k).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),M=l?u.Buffer:void 0,C=u.Symbol,A=u.Uint8Array,N=M?M.allocUnsafe:void 0,T=(v=Object.getPrototypeOf,b=Object,function(e){return v(b(e))}),R=Object.create,H=j.propertyIsEnumerable,z=g.splice,I=C?C.toStringTag:void 0,D=function(){try{var e=ce(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),L=M?M.isBuffer:void 0,B=Math.max,W=Date.now,F=ce(u,"Map"),V=ce(Object,"create"),q=function(){function e(){}return function(t){if(!je(t))return{};if(R)return R(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();function U(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function $(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function G(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Y(e){var t=this.__data__=new $(e);this.size=t.size}function Z(e,t){var r=ye(e),n=!r&&he(e),o=!r&&!n&&be(e),i=!r&&!n&&!o&&_e(e),a=r||n||o||i,u=a?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],s=u.length;for(var c in e)!t&&!k.call(e,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||le(c,s))||u.push(c);return u}function X(e,t,r){(void 0!==r&&!me(e[t],r)||void 0===r&&!(t in e))&&Q(e,t,r)}function J(e,t,r){var n=e[t];k.call(e,t)&&me(n,r)&&(void 0!==r||t in e)||Q(e,t,r)}function K(e,t){for(var r=e.length;r--;)if(me(e[r][0],t))return r;return-1}function Q(e,t,r){"__proto__"==t&&D?D(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}U.prototype.clear=function(){this.__data__=V?V(null):{},this.size=0},U.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},U.prototype.get=function(e){var t=this.__data__;if(V){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return k.call(t,e)?t[e]:void 0},U.prototype.has=function(e){var t=this.__data__;return V?void 0!==t[e]:k.call(t,e)},U.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=V&&void 0===t?"__lodash_hash_undefined__":t,this},$.prototype.clear=function(){this.__data__=[],this.size=0},$.prototype.delete=function(e){var t=this.__data__,r=K(t,e);return!(r<0)&&(r==t.length-1?t.pop():z.call(t,r,1),--this.size,!0)},$.prototype.get=function(e){var t=this.__data__,r=K(t,e);return r<0?void 0:t[r][1]},$.prototype.has=function(e){return K(this.__data__,e)>-1},$.prototype.set=function(e,t){var r=this.__data__,n=K(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this},G.prototype.clear=function(){this.size=0,this.__data__={hash:new U,map:new(F||$),string:new U}},G.prototype.delete=function(e){var t=se(this,e).delete(e);return this.size-=t?1:0,t},G.prototype.get=function(e){return se(this,e).get(e)},G.prototype.has=function(e){return se(this,e).has(e)},G.prototype.set=function(e,t){var r=se(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this},Y.prototype.clear=function(){this.__data__=new $,this.size=0},Y.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},Y.prototype.get=function(e){return this.__data__.get(e)},Y.prototype.has=function(e){return this.__data__.has(e)},Y.prototype.set=function(e,t){var r=this.__data__;if(r instanceof $){var n=r.__data__;if(!F||n.length<199)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new G(n)}return r.set(e,t),this.size=r.size,this};var ee,te=function(e,t,r){for(var n=-1,o=Object(e),i=r(e),a=i.length;a--;){var u=i[ee?a:++n];if(!1===t(o[u],u,o))break}return e};function re(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":I&&I in Object(e)?function(e){var t=k.call(e,I),r=e[I];try{e[I]=void 0;var n=!0}catch(e){}var o=E.call(e);n&&(t?e[I]=r:delete e[I]);return o}(e):function(e){return E.call(e)}(e)}function ne(e){return Oe(e)&&"[object Arguments]"==re(e)}function oe(e){return!(!je(e)||function(e){return!!x&&x in e}(e))&&(ge(e)?P:r).test(function(e){if(null!=e){try{return _.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function ie(e){if(!je(e))return function(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}(e);var t=fe(e),r=[];for(var n in e)("constructor"!=n||!t&&k.call(e,n))&&r.push(n);return r}function ae(e,t,r,n,o){e!==t&&te(t,(function(i,a){if(o||(o=new Y),je(i))!function(e,t,r,n,o,i,a){var u=pe(e,r),s=pe(t,r),c=a.get(s);if(c)return void X(e,r,c);var l=i?i(u,s,r+"",e,t,a):void 0,f=void 0===l;if(f){var p=ye(s),d=!p&&be(s),m=!p&&!d&&_e(s);l=s,p||d||m?ye(u)?l=u:Oe(g=u)&&ve(g)?l=function(e,t){var r=-1,n=e.length;t||(t=Array(n));for(;++r<n;)t[r]=e[r];return t}(u):d?(f=!1,l=function(e,t){if(t)return e.slice();var r=e.length,n=N?N(r):new e.constructor(r);return e.copy(n),n}(s,!0)):m?(f=!1,h=s,y=!0?(v=h.buffer,b=new v.constructor(v.byteLength),new A(b).set(new A(v)),b):h.buffer,l=new h.constructor(y,h.byteOffset,h.length)):l=[]:function(e){if(!Oe(e)||"[object Object]"!=re(e))return!1;var t=T(e);if(null===t)return!0;var r=k.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&_.call(r)==S}(s)||he(s)?(l=u,he(u)?l=function(e){return function(e,t,r,n){var o=!r;r||(r={});var i=-1,a=t.length;for(;++i<a;){var u=t[i],s=n?n(r[u],e[u],u,r,e):void 0;void 0===s&&(s=e[u]),o?Q(r,u,s):J(r,u,s)}return r}(e,ke(e))}(u):je(u)&&!ge(u)||(l=function(e){return"function"!=typeof e.constructor||fe(e)?{}:q(T(e))}(s))):f=!1}var h,y,v,b;var g;f&&(a.set(s,l),o(l,s,n,i,a),a.delete(s));X(e,r,l)}(e,t,a,r,ae,n,o);else{var u=n?n(pe(e,a),i,a+"",e,t,o):void 0;void 0===u&&(u=i),X(e,a,u)}}),ke)}function ue(e,t){return de(function(e,t,r){return t=B(void 0===t?e.length-1:t,0),function(){for(var n=arguments,o=-1,i=B(n.length-t,0),a=Array(i);++o<i;)a[o]=n[t+o];o=-1;for(var u=Array(t+1);++o<t;)u[o]=n[o];return u[t]=r(a),m(e,this,u)}}(e,t,Se),e+"")}function se(e,t){var r,n,o=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof t?"string":"hash"]:o.map}function ce(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return oe(r)?r:void 0}function le(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}function fe(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||j)}function pe(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var de=function(e){var t=0,r=0;return function(){var n=W(),o=16-(n-r);if(r=n,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(D?function(e,t){return D(e,"toString",{configurable:!0,enumerable:!1,value:(r=t,function(){return r}),writable:!0});var r}:Se);function me(e,t){return e===t||e!=e&&t!=t}var he=ne(function(){return arguments}())?ne:function(e){return Oe(e)&&k.call(e,"callee")&&!H.call(e,"callee")},ye=Array.isArray;function ve(e){return null!=e&&we(e.length)&&!ge(e)}var be=L||function(){return!1};function ge(e){if(!je(e))return!1;var t=re(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function we(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function je(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Oe(e){return null!=e&&"object"==typeof e}var _e=d?function(e){return function(t){return e(t)}}(d):function(e){return Oe(e)&&we(e.length)&&!!o[re(e)]};function ke(e){return ve(e)?Z(e,!0):ie(e)}var xe,Ee=(xe=function(e,t,r){ae(e,t,r)},ue((function(e,t){var r=-1,n=t.length,o=n>1?t[n-1]:void 0,i=n>2?t[2]:void 0;for(o=xe.length>3&&"function"==typeof o?(n--,o):void 0,i&&function(e,t,r){if(!je(r))return!1;var n=typeof t;return!!("number"==n?ve(r)&&le(t,r.length):"string"==n&&t in r)&&me(r[t],e)}(t[0],t[1],i)&&(o=n<3?void 0:o,n=1),e=Object(e);++r<n;){var a=t[r];a&&xe(e,a,r,o)}return e})));function Se(e){return e}e.exports=Ee})),M=function(e){var t=function(e){return P(S,e)}(e||{}),r=t.VERSION,n=t.version,o=t.interactive,i=t.includeUI,a=t.includePlaces;return _({includeUI:i,includePlaces:a,interactive:o,version:n||r}).then((function(){return t}))};var C=function(e){var t=typeof e;return null!==e&&("object"===t||"function"===t)};function A(e){for(var t=e.split("."),r=[],n=0;n<t.length;n++){for(var o=t[n];"\\"===o[o.length-1]&&void 0!==t[n+1];)o=o.slice(0,-1)+".",o+=t[++n];r.push(o)}return r}var N=function(e,t){if(!C(e)||"string"!=typeof t)return e;for(var r=A(t),n=0;n<r.length;n++){var o=Object.getOwnPropertyDescriptor(e,r[n])||Object.getOwnPropertyDescriptor(Object.prototype,r[n]);if(o&&!o.enumerable)return;if(null==(e=e[r[n]])){if(n!==r.length-1)return;break}}return e},T=function(e,t){var r=t.split("."),n=e[r[0]];if(!(Array.isArray(n)&&n.includes(r[1]))&&!(!0===n))throw new Error("mapType Should be one from https://developer.here.com/documentation/maps/topics/map-types.html in dot notation")},R=function(e,t,r,n,o){T(n,o);var i=e.createDefaultLayers();return new H.Map(t,N(i,o),r)},z=function(e,t,r,n){var o=t?new H.mapevents.Behavior(new H.mapevents.MapEvents(e)):null;if(r&&t)for(var i in n)n.hasOwnProperty(i)&&function(){var t=n[i];t&&"function"==typeof t&&e.addEventListener(i,(function(e){t.apply(null,arguments)}))}();return o},I=function(e,t,r,n){if(!r)throw new Error("includeUI must be set to true to initialize default UI");return H.ui.UI.createDefault(t,e.createDefaultLayers(),n)},D=function(){var e=document.createElement("style"),t=".grab = {cursor: move;cursor: grab;cursor: -moz-grab;cursor: -webkit-grab;}.grabbing{cursor:grabbing;cursor:-moz-grabbing;cursor:-webkit-grabbing}";e.type="text/css",e.styleSheet?e.styleSheet.cssText=t:e.appendChild(document.createTextNode(t)),(document.head||document.getElementsByTagName("head")[0]).appendChild(e)},L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(c,e);var t,r,a,u=p(c);function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=u.call(this,e)).container=n.createRef(),t.state={builder:{}},t}return t=c,(r=[{key:"componentDidMount",value:function(){var e=this.props,t=P({container:this.container.current,build:!0},e.options,e);delete t.options;var r=function(e,t){var r=t.useEvents,n=t.mapEvents,o=t.interactive,i=t.includeUI,a=t.mapType,u=t.MAP_TYPE,c=t.mapTypes,l=t.mapOptions,f=t.uiLang,p=t.container,d=t.build,m=a||u,h={options:s(s({},t),{},{MAP_TYPE:m}),platform:e};return p&&d?(h.map=R(e,p,l,c,m),h.interaction=z(h.map,o,r,n),i&&(h.ui=I(e,h.map,i,f)),D()):(h.createMap=R,h.createPlatform=initPlatform,h.createInteraction=z,h.createDefaultUI=I,h.createInteractionStyles=D),h}(e.platform,t);this.setState({builder:r})}},{key:"createLoadingComponent",value:function(){return n.createElement("div",null,"Loading")}},{key:"displayChildren",value:function(){var e=this.props.children,t=this.state.builder,r=t.map,o=t.platform,i=t.ui,a=t.options;return n.Children.map(e,(function(e){return n.cloneElement(e,{map:r,platform:o,ui:i,__options:a})}))}},{key:"render",value:function(){var e=this.props,t=e.style,r=e.loadingEl,i=this.state.builder.options,a=r||this.createLoadingComponent();return n.createElement("div",{id:S.containerId,className:S.defaultClassName,style:t,ref:this.container},"undefined"==typeof H&&!i&&a,"object"===("undefined"==typeof H?"undefined":o(H))&&i&&this.displayChildren())}}])&&i(t.prototype,r),a&&i(t,a),c}(n.Component);L.propTypes={version:r.string,mapType:r.string,useEvents:r.bool,interactive:r.bool,includeUI:r.bool,mapEvents:r.object,platform:r.object,options:r.object,mapOptions:r.object};var B=function(e,t,r){var n=r.useEvents,o=r.interactive,i=r.mapEvents;if(n&&o&&t)for(var a in i)i.hasOwnProperty(a)&&function(){var r=t[a];r&&"function"==typeof r&&e.addEventListener(a,(function(e){r.apply(null,arguments)}))}()};function W(e){var t=P({setViewBounds:!0},e),r=t.points,o=t.options,i=t.map,a=t.setViewBounds,u=t.objectEvents,s=(t.platform,t.ui,t.__options);if(!H||!H.map||!i)throw new Error("HMap has to be initialized before adding Map Objects");if(!Array.isArray(r))throw new Error("points should be an array of objects containing lat and lng properties");var c=new H.geo.LineString;r.forEach((function(e){c.pushPoint(e)}));var l=new H.map.Polyline(c,o);return B(l,u,s),i.addObject(l),a&&i.setViewBounds(l.getBounds()),n.createElement("div",{style:{display:"none"}})}function F(e){var t=P({setViewBounds:!0},e),r=t.points,o=t.map,i=t.setViewBounds,a=t.options,u=t.objectEvents,s=(t.platform,t.ui,t.__options);if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!Array.isArray(r))throw new Error("points should be an array of number to use in drawing the points");var c={},l=r[0];"string"==typeof l&&2===l.split(",").length?(c=new H.geo.LineString,r.forEach((function(e){c.pushLatLngAlt.apply(c,e.split(","))}))):c=new H.geo.LineString(r,"values lat lng alt");var f=new H.map.Polygon(c,a);return B(f,u,s),o.addObject(f),i&&o.setViewBounds(f.getBounds()),n.createElement("div",{style:{display:"none"}})}function V(e){var t=P({setViewBounds:!0,updateMarker:!1,marker:null,getMarker:function(){}},e),r=t.icon,o=t.map,i=t.coords,a=t.type,u=t.options,s=t.setViewBounds,c=t.updateMarker,l=t.marker,f=t.getMarker,p=t.objectEvents,d=(t.platform,t.ui,t.__options),m=u||{};if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!i.lat||!i.lng)throw new Error("coords should be an object having 'lat' and 'lng' as props");a&&"DOM"===a?m.icon=new H.map.DomIcon(r):a&&(m.icon=new H.map.Icon(r));var h=c&&l?l:new H.map.Marker(i,m);return o.getObjects().some((function(e){if("function"==typeof e.getPosition){var t=e.getPosition(),r=t.lat,n=t.lng;return r===i.lat&&i.lng===n}}))||c?c&&h.setPosition(i):(B(h,p,d),o.addObject(h)),!l&&f(h),s&&o.setCenter(i),n.createElement("div",{style:{display:"none"}})}function q(e){var t=P({setViewBounds:!0},e),r=t.radius,o=t.map,i=t.coords,a=t.options,u=t.setViewBounds,s=t.objectEvents,c=(t.platform,t.ui,t.__options);if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!i.lat||!i.lng)throw new Error("coords should be an object having 'lat' and 'lng' as props");r||console.info("radius is not set, default radius of 1000 is used");var l=new H.map.Circle(i,r||1e3,a);return B(l,s,c),o.addObject(l),u&&o.setCenter(i),n.createElement("div",{style:{display:"none"}})}function U(e){var t=P({setViewBounds:!0},e),r=t.map,o=t.points,i=t.options,a=t.setViewBounds,u=t.objectEvents,s=(t.platform,t.ui,t.__options);if(!H||!H.map||!r)throw new Error("HMap has to be initialized before adding Map Objects");if(!o||4!==o.length)throw new Error("points should be an array of four items");var c=new H.geo.Rect(o[0],o[1],o[2],o[3]),l=new H.map.Rect(c,i);return B(l,u,s),r.addObject(l),a&&r.setViewBounds(l.getBounds()),n.createElement("div",{style:{display:"none"}})}function $(e){var r=e.geoCodeParams,o=e.platform,i=e.map,a=e.ui,u=e.children,s=e.reverse,c=e.landmark;if(!H||!H.map||!i)throw new Error("HMap has to be initialized before adding Map Objects");if(!r)throw new Error("geoCodeParams is not set");var l=d(t.useState([]),2),f=l[0],p=l[1],m=function(e){p(e.Response.View[0].Result)},h=o.getGeocodingService();return c?h.search(r,m,(function(e){alert(e)})):s?h.reverseGeocode(r,m,(function(e){return console.log(e)})):h.geocode(r,m,(function(e){return console.log(e)})),f.length&&f.map((function(e){var t=e.Location||e.Place.Locations[0],r=t.DisplayPosition.Latitude,s=t.DisplayPosition.Longitude,c={map:i,platform:o,ui:a,lat:r,lng:s,key:r,location:e,_location:t};return n.cloneElement(u,c)}))}function G(e){var r=P({renderDefaultLine:!0},e),o=r.routeParams,i=r.platform,a=r.map,u=r.ui,s=r.children,c=r.renderDefaultLine,l=r.isoLine,f=r.lineOptions,p=r.polygonOptions,m=r.markerOptions,h=r.icon;if(!H||!H.map||!a)throw new Error("HMap has to be initialized before adding Map Objects");if(!o)throw new Error("routeParams is not set");var y,v=d(t.useState([]),2),b=v[0],g=(v[1],d(t.useState({}),2)),w=g[0],j=(g[1],d(t.useState({}),2)),O=j[0],_=(j[1],d(t.useState({}),2)),k=(_[0],_[1],d(t.useState({}),2)),x=k[0],E=(k[1],i.getRoutingService(),function(){return l?n.createElement(n.Fragment,null,n.createElement(F,{points:b,options:p,setViewBounds:!0,map:a,platform:i}),n.createElement(V,{coords:x,map:a,platform:i,icon:h,options:m,setViewBounds:!1})):(e=w.waypoint[0].mappedPosition,t=w.waypoint[1].mappedPosition,r={lat:e.latitude,lng:e.longitude},o={lat:t.latitude,lng:t.longitude},n.createElement(n.Fragment,null,n.createElement(W,{points:b,map:a,options:f,setViewBounds:!0}),n.createElement(V,{coords:r,map:a,platform:i,icon:h,options:m,setViewBounds:!1}),n.createElement(V,{coords:o,map:a,platform:i,icon:h,options:m,setViewBounds:!1})));var e,t,r,o});return(w.waypoint||O.shape)&&b.length?c?E():(y={map:a,platform:i,ui:u,route:w,routeShape:b,center:x,component:O},n.cloneElement(s,y)):null}function Y(e){var t=e.platform,r=e.map,n=e.mapLayerType,o=e.__options.mapTypes;if(!H||!H.map||!r)throw new Error("HMap has to be initialized before adding Map Objects");T(o,n);var i=t.createDefaultLayers();return r.addLayer(N(i,n)),null}W.propTypes={points:r.array.isRequired,options:r.object,map:r.object,setViewBounds:r.bool,objectEvents:r.object},F.propTypes={points:r.array.isRequired,options:r.object,map:r.object,setViewBounds:r.bool,objectEvents:r.object},V.propTypes={coords:r.object.isRequired,icon:r.any,options:r.object,type:r.string,setViewBounds:r.bool,map:r.object,objectEvents:r.object},q.propTypes={coords:r.object.isRequired,options:r.object,radius:r.number,setViewBounds:r.bool,map:r.object,objectEvents:r.object},U.propTypes={options:r.object,points:r.array.isRequired,map:r.object,objectEvents:r.object},$.propTypes={geoCodeParams:r.object,children:r.element.isRequired,reverse:r.bool,landmark:r.bool,map:r.object,platform:r.object,ui:r.object},G.propTypes={routeParams:r.object,lineOptions:r.object,markerOptions:r.object,children:r.element,renderDefaultLine:r.bool,isoLine:r.bool,icon:r.any,map:r.object,platform:r.object,ui:r.object},Y.propTypes={platform:r.object,__options:r.object,mapLayerType:r.string.isRequired,map:r.object};var Z=/^\s+|\s+$/g,X=/^[-+]0x[0-9a-f]+$/i,J=/^0b[01]+$/i,K=/^0o[0-7]+$/i,Q=parseInt,ee="object"==typeof h&&h&&h.Object===Object&&h,te="object"==typeof self&&self&&self.Object===Object&&self,re=ee||te||Function("return this")(),ne=Object.prototype.toString,oe=Math.max,ie=Math.min,ae=function(){return re.Date.now()};function ue(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function se(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==ne.call(e)}(e))return NaN;if(ue(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=ue(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Z,"");var r=J.test(e);return r||K.test(e)?Q(e.slice(2),r?2:8):X.test(e)?NaN:+e}var ce=function(e,t,r){var n,o,i,a,u,s,c=0,l=!1,f=!1,p=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function d(t){var r=n,i=o;return n=o=void 0,c=t,a=e.apply(i,r)}function m(e){return c=e,u=setTimeout(y,t),l?d(e):a}function h(e){var r=e-s;return void 0===s||r>=t||r<0||f&&e-c>=i}function y(){var e=ae();if(h(e))return v(e);u=setTimeout(y,function(e){var r=t-(e-s);return f?ie(r,i-(e-c)):r}(e))}function v(e){return u=void 0,p&&n?d(e):(n=o=void 0,a)}function b(){var e=ae(),r=h(e);if(n=arguments,o=this,s=e,r){if(void 0===u)return m(s);if(f)return u=setTimeout(y,t),d(s)}return void 0===u&&(u=setTimeout(y,t)),a}return t=se(t)||0,ue(r)&&(l=!!r.leading,i=(f="maxWait"in r)?oe(se(r.maxWait)||0,t):i,p="trailing"in r?!!r.trailing:p),b.cancel=function(){void 0!==u&&clearTimeout(u),c=0,n=s=o=u=void 0},b.flush=function(){return void 0===u?a:v(ae())},b}((function(e,t){return t(e)}),500),le={margin:0,fontFamily:"inherit",display:"block",width:"100%",padding:".375rem .75rem",fontSize:"1rem",lineHeight:1.5,color:"#495057",backgroundColor:"#fff",backgroundClip:"padding-box",border:"1px solid #ced4da",borderRadius:".25rem",transition:"border-color .15s ease-in-out, box-shadow .15s ease-in-out"};function fe(e){var t=e.getValue,r=e.style,o=e.className;return r=P(le,r),n.createElement("input",{className:o,style:r,placeholder:"Enter a value",onChange:function(e){return ce(e.target.value,t)}})}ce.propTypes={getValue:r.func.isRequired,className:r.string,style:r.object};
/*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
var pe=Object.getOwnPropertySymbols,de=Object.prototype.hasOwnProperty,me=Object.prototype.propertyIsEnumerable;function he(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var ye=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,n,o=he(e),i=1;i<arguments.length;i++){for(var a in r=Object(arguments[i]))de.call(r,a)&&(o[a]=r[a]);if(pe){n=pe(r);for(var u=0;u<n.length;u++)me.call(r,n[u])&&(o[n[u]]=r[n[u]])}}return o},ve=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.StyleSheet=f;var r,n=(r=ye)&&r.__esModule?r:{default:r};function o(e){return e[e.length-1]}function i(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}var a="undefined"!=typeof window,u="development"===process.env.NODE_ENV||!process.env.NODE_ENV,s="test"===process.env.NODE_ENV,c=function(){if(a){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lt IE 10]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}}();function l(){var e=document.createElement("style");return e.type="text/css",e.setAttribute("data-glamor",""),e.appendChild(document.createTextNode("")),(document.head||document.getElementsByTagName("head")[0]).appendChild(e),e}function f(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.speedy,r=void 0===t?!u&&!s:t,n=e.maxLength,o=void 0===n?a&&c?4e3:65e3:n;this.isSpeedy=r,this.sheet=void 0,this.tags=[],this.maxLength=o,this.ctr=0}(0,n.default)(f.prototype,{getSheet:function(){return i(o(this.tags))},inject:function(){var e=this;if(this.injected)throw new Error("already injected stylesheet!");a?this.tags[0]=l():this.sheet={cssRules:[],insertRule:function(t){e.sheet.cssRules.push({cssText:t})}},this.injected=!0},speedy:function(e){if(0!==this.ctr)throw new Error("cannot change speedy mode after inserting any rule to sheet. Either call speedy("+e+") earlier in your app, or call flush() before speedy("+e+")");this.isSpeedy=!!e},_insert:function(e){try{var t=this.getSheet();t.insertRule(e,-1!==e.indexOf("@import")?0:t.cssRules.length)}catch(t){u&&console.warn("whoops, illegal rule inserted",e)}},insert:function(e){if(a)if(this.isSpeedy&&this.getSheet().insertRule)this._insert(e);else if(-1!==e.indexOf("@import")){var t=o(this.tags);t.insertBefore(document.createTextNode(e),t.firstChild)}else o(this.tags).appendChild(document.createTextNode(e));else this.sheet.insertRule(e,-1!==e.indexOf("@import")?0:this.sheet.cssRules.length);return this.ctr++,a&&this.ctr%this.maxLength==0&&this.tags.push(l()),this.ctr-1},delete:function(e){return this.replace(e,"")},flush:function(){a?(this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.sheet=null,this.ctr=0):this.sheet.cssRules=[],this.injected=!1},rules:function(){if(!a)return this.sheet.cssRules;var e=[];return this.tags.forEach((function(t){return e.splice.apply(e,[e.length,0].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(Array.from(i(t).cssRules))))})),e}})}));y(ve);ve.StyleSheet;var be=/-(.)/g;var ge=function(e){return e.replace(be,(function(e,t){return t.toUpperCase()}))},we=/^-ms-/;var je=function(e){return ge(e.replace(we,"ms-"))},Oe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowStart:!0,gridRowEnd:!0,gridColumn:!0,gridColumnStart:!0,gridColumnEnd:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var n=["Webkit","ms","Moz","O"];Object.keys(r).forEach((function(e){n.forEach((function(t){r[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=r[e]}))}));var o={isUnitlessNumber:r,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}};t.default=o}));function _e(e){return function(){return e}}y(Oe);var ke=function(){};ke.thatReturns=_e,ke.thatReturnsFalse=_e(!1),ke.thatReturnsTrue=_e(!0),ke.thatReturnsNull=_e(null),ke.thatReturnsThis=function(){return this},ke.thatReturnsArgument=function(e){return e};var xe=ke;if("production"!==process.env.NODE_ENV){var Ee=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var o=0,i="Warning: "+e.replace(/%s/g,(function(){return r[o++]}));"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(e){}};xe=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var r=arguments.length,n=Array(r>2?r-2:0),o=2;o<r;o++)n[o-2]=arguments[o];Ee.apply(void 0,[t].concat(n))}}}var Se=xe,Pe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=o(Oe),n=o(Se);function o(e){return e&&e.__esModule?e:{default:e}}var i=r.default.isUnitlessNumber,a={};t.default=function(e,t,r){if(null==t||"boolean"==typeof t||""===t)return"";if(isNaN(t)||0===t||i.hasOwnProperty(e)&&i[e])return""+t;if("string"==typeof t){if("production"!==process.env.NODE_ENV&&r&&"0"!==t){var o=r._currentElement._owner,u=o?o.getName():null;u&&!a[u]&&(a[u]={});var s=!1;if(u){var c=a[u];(s=c[e])||(c[e]=!0)}s||"production"!==process.env.NODE_ENV&&(0,n.default)(!1,"a `%s` tag (owner: `%s`) was passed a numeric string value for CSS property `%s` (value: `%s`) which will be treated as a unitless number in a future version of React.",r._currentElement.type,u||"unknown",e,t)}t=t.trim()}return t+"px"}}));y(Pe);var Me=/([A-Z])/g;var Ce=function(e){return e.replace(Me,"-$1").toLowerCase()},Ae=/^ms-/;var Ne=function(e){return Ce(e).replace(Ae,"-ms-")};var Te=function(e){var t={};return function(r){return t.hasOwnProperty(r)||(t[r]=e.call(this,r)),t[r]}},Re=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.processStyleName=void 0,t.createMarkupForStyles=function(e,t){var r="";for(var o in e){var i=0===o.indexOf("--");if(e.hasOwnProperty(o)&&"label"!==o){var a=e[o];"production"===process.env.NODE_ENV||i||h(o,a,t),null!=a&&(i?r+=o+":"+a+";":(r+=s(o)+":",r+=(0,n.default)(o,a,t)+";"))}}return r||null};var r=u(je),n=u(Pe),o=u(Ne),i=u(Te),a=u(Se);function u(e){return e&&e.__esModule?e:{default:e}}var s=t.processStyleName=(0,i.default)(o.default);if("production"!==process.env.NODE_ENV)var c=/^(?:webkit|moz|o)[A-Z]/,l=/;\s*$/,f={},p={},d=!1,m=function(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""},h=function(e,t,n){var o=void 0;n&&(o=n._currentElement._owner),e.indexOf("-")>-1?function(e,t){f.hasOwnProperty(e)&&f[e]||(f[e]=!0,"production"!==process.env.NODE_ENV&&(0,a.default)(!1,"Unsupported style property %s. Did you mean %s?%s",e,(0,r.default)(e),m(t)))}(e,o):c.test(e)?function(e,t){f.hasOwnProperty(e)&&f[e]||(f[e]=!0,"production"!==process.env.NODE_ENV&&(0,a.default)(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?%s",e,e.charAt(0).toUpperCase()+e.slice(1),m(t)))}(e,o):l.test(t)&&function(e,t,r){p.hasOwnProperty(t)&&p[t]||(p[t]=!0,"production"!==process.env.NODE_ENV&&(0,a.default)(!1,'Style property values shouldn\'t contain a semicolon.%s Try "%s: %s" instead.',m(r),e,t.replace(l,"")))}(e,t,o),"number"==typeof t&&isNaN(t)&&function(e,t,r){d||(d=!0,"production"!==process.env.NODE_ENV&&(0,a.default)(!1,"`NaN` is an invalid value for the `%s` css style property.%s",e,m(r)))}(e,0,o)}}));y(Re);Re.processStyleName,Re.createMarkupForStyles;var He=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function n(e){if(function(e){return null==e||!1===e||"object"===(void 0===e?"undefined":r(e))&&0===Object.keys(e).length}(e))return null;if("object"!==(void 0===e?"undefined":r(e)))return e;for(var t={},n=Object.keys(e),i=!1,a=0;a<n.length;a++){var u=e[n[a]],s=o(u);null!==s&&s===u||(i=!0),null!==s&&(t[n[a]]=s)}return 0===Object.keys(t).length?null:i?t:e}function o(e){return Array.isArray(e)?(r=!1,i=[],(t=e).forEach((function(e){var t=o(e);null!==t&&t===e||(r=!0),null!==t&&i.push(t)})),0==i.length?null:r?i:t):n(e);var t,r,i}t.default=o}));y(He);var ze=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=["Webkit"],n=["Moz"],o=["ms"],i=["Webkit","Moz"],a=["Webkit","ms"],u=["Webkit","Moz","ms"];t.default={plugins:[],prefixMap:{appearance:i,userSelect:u,textEmphasisPosition:r,textEmphasis:r,textEmphasisStyle:r,textEmphasisColor:r,boxDecorationBreak:r,clipPath:r,maskImage:r,maskMode:r,maskRepeat:r,maskPosition:r,maskClip:r,maskOrigin:r,maskSize:r,maskComposite:r,mask:r,maskBorderSource:r,maskBorderMode:r,maskBorderSlice:r,maskBorderWidth:r,maskBorderOutset:r,maskBorderRepeat:r,maskBorder:r,maskType:r,textDecorationStyle:r,textDecorationSkip:r,textDecorationLine:r,textDecorationColor:r,filter:r,fontFeatureSettings:r,breakAfter:u,breakBefore:u,breakInside:u,columnCount:i,columnFill:i,columnGap:i,columnRule:i,columnRuleColor:i,columnRuleStyle:i,columnRuleWidth:i,columns:i,columnSpan:i,columnWidth:i,writingMode:a,flex:r,flexBasis:r,flexDirection:r,flexGrow:r,flexFlow:r,flexShrink:r,flexWrap:r,alignContent:r,alignItems:r,alignSelf:r,justifyContent:r,order:r,transform:r,transformOrigin:r,transformOriginX:r,transformOriginY:r,backfaceVisibility:r,perspective:r,perspectiveOrigin:r,transformStyle:r,transformOriginZ:r,animation:r,animationDelay:r,animationDirection:r,animationFillMode:r,animationDuration:r,animationIterationCount:r,animationName:r,animationPlayState:r,animationTimingFunction:r,backdropFilter:r,fontKerning:r,scrollSnapType:a,scrollSnapPointsX:a,scrollSnapPointsY:a,scrollSnapDestination:a,scrollSnapCoordinate:a,shapeImageThreshold:r,shapeImageMargin:r,shapeImageOutside:r,hyphens:u,flowInto:a,flowFrom:a,regionFragment:a,textAlignLast:n,tabSize:n,wrapFlow:o,wrapThrough:o,wrapMargin:o,gridTemplateColumns:o,gridTemplateRows:o,gridTemplateAreas:o,gridTemplate:o,gridAutoColumns:o,gridAutoRows:o,gridAutoFlow:o,grid:o,gridRowStart:o,gridColumnStart:o,gridRowEnd:o,gridRow:o,gridColumn:o,gridColumnEnd:o,gridColumnGap:o,gridRowGap:o,gridArea:o,gridGap:o,textSizeAdjust:a,borderImage:r,borderImageOutset:r,borderImageRepeat:r,borderImageSlice:r,borderImageSource:r,borderImageWidth:r,transitionDelay:r,transitionDuration:r,transitionProperty:r,transitionTimingFunction:r}},e.exports=t.default}));y(ze);var Ie=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.exports=t.default}));y(Ie);var De=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(e.hasOwnProperty(t))for(var o=e[t],i=0,a=o.length;i<a;++i)r[o[i]+(0,n.default)(t)]=r[t]};var r,n=(r=Ie)&&r.__esModule?r:{default:r};e.exports=t.default}));y(De);var Le=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,n,o){for(var i=0,a=e.length;i<a;++i){var u=e[i](t,r,n,o);if(u)return u}},e.exports=t.default}));y(Le);var Be=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&n.hasOwnProperty(t))return r.map((function(e){return e+t}))};var r=["-webkit-","-moz-",""],n={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0};e.exports=t.default}));y(Be);var We=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&r.test(e)};var r=/-webkit-|-moz-|-ms-/;e.exports=t.default}));y(We);var Fe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,n.default)(t)&&t.indexOf("cross-fade(")>-1)return o.map((function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")}))};var r,n=(r=We)&&r.__esModule?r:{default:r};var o=["-webkit-",""];e.exports=t.default}));y(Fe);var Ve=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,n.default)(t)&&t.indexOf("filter(")>-1)return o.map((function(e){return t.replace(/filter\(/g,e+"filter(")}))};var r,n=(r=We)&&r.__esModule?r:{default:r};var o=["-webkit-",""];e.exports=t.default}));y(Ve);var qe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&r.hasOwnProperty(t))return r[t]};var r={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]};e.exports=t.default}));y(qe);var Ue=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,o){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?o.WebkitBoxOrient="vertical":o.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?o.WebkitBoxDirection="reverse":o.WebkitBoxDirection="normal");n.hasOwnProperty(e)&&(o[n[e]]=r[t]||t)};var r={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},n={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines"};e.exports=t.default}));y(Ue);var $e=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,n.default)(t)&&i.test(t))return o.map((function(e){return e+t}))};var r,n=(r=We)&&r.__esModule?r:{default:r};var o=["-webkit-","-moz-",""],i=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;e.exports=t.default}));y($e);var Ge=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,n.default)(t)&&t.indexOf("image-set(")>-1)return o.map((function(e){return t.replace(/image-set\(/g,e+"image-set(")}))};var r,n=(r=We)&&r.__esModule?r:{default:r};var o=["-webkit-",""];e.exports=t.default}));y(Ge);var Ye=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]},e.exports=t.default}));y(Ye);var Ze=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(n.hasOwnProperty(e)&&o.hasOwnProperty(t))return r.map((function(e){return e+t}))};var r=["-webkit-","-moz-",""],n={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},o={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=t.default}));y(Ze);var Xe=/[A-Z]/g,Je=/^ms-/,Ke={};function Qe(e){return"-"+e.toLowerCase()}function et(e){if(Ke.hasOwnProperty(e))return Ke[e];var t=e.replace(Xe,Qe);return Ke[e]=Je.test(t)?"-"+t:t}var tt=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,n.default)(e)};var r,n=(r=et)&&r.__esModule?r:{default:r};e.exports=t.default}));y(tt);var rt=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i,s){if("string"==typeof t&&a.hasOwnProperty(e)){var c=function(e,t){if((0,n.default)(e))return e;for(var o=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),i=0,a=o.length;i<a;++i){var s=o[i],c=[s];for(var l in t){var f=(0,r.default)(l);if(s.indexOf(f)>-1&&"order"!==f)for(var p=t[l],d=0,m=p.length;d<m;++d)c.unshift(s.replace(f,u[p[d]]+f))}o[i]=c.join(",")}return o.join(",")}(t,s),l=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-moz-|-ms-/.test(e)})).join(",");if(e.indexOf("Webkit")>-1)return l;var f=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-webkit-|-ms-/.test(e)})).join(",");return e.indexOf("Moz")>-1?f:(i["Webkit"+(0,o.default)(e)]=l,i["Moz"+(0,o.default)(e)]=f,c)}};var r=i(tt),n=i(We),o=i(Ie);function i(e){return e&&e.__esModule?e:{default:e}}var a={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},u={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"};e.exports=t.default}));y(rt);var nt=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t in e){var r=e[t],i=(0,o.default)(y,t,r,e,v);i&&(e[t]=i),(0,n.default)(v,t,e)}return e};var r=h(ze),n=h(De),o=h(Le),i=h(Be),a=h(Fe),u=h(Ve),s=h(qe),c=h(Ue),l=h($e),f=h(Ge),p=h(Ye),d=h(Ze),m=h(rt);function h(e){return e&&e.__esModule?e:{default:e}}var y=[a.default,i.default,u.default,c.default,l.default,f.default,p.default,d.default,m.default,s.default],v=r.default.prefixMap}));y(nt);var ot=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};t.PluginSet=s,t.fallbacks=function(e){if(Object.keys(e.style).map((function(t){return Array.isArray(e.style[t])})).indexOf(!0)>=0){var t=e.style,r=Object.keys(t).reduce((function(e,r){return e[r]=Array.isArray(t[r])?t[r].join("; "+(0,Re.processStyleName)(r)+": "):t[r],e}),{});return(0,n.default)({},e,{style:r})}return e},t.contentWrap=function(e){if(e.style.content){var t=e.style.content;return c.indexOf(t)>=0||/^(attr|calc|counters?|url)\(/.test(t)?e:t.charAt(0)!==t.charAt(t.length-1)||'"'!==t.charAt(0)&&"'"!==t.charAt(0)?r({},e,{style:r({},e.style,{content:'"'+t+'"'})}):e}return e},t.prefixes=function(e){return(0,n.default)({},e,{style:(0,o.default)(r({},e.style))})};var n=i(ye),o=i(nt);function i(e){return e&&e.__esModule?e:{default:e}}var a,u="development"===(a=process.env.NODE_ENV)||!a;function s(e){this.fns=e||[]}(0,n.default)(s.prototype,{add:function(){for(var e=this,t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];r.forEach((function(t){e.fns.indexOf(t)>=0?u&&console.warn("adding the same plugin again, ignoring"):e.fns=[t].concat(e.fns)}))},remove:function(e){this.fns=this.fns.filter((function(t){return t!==e}))},clear:function(){this.fns=[]},transform:function(e){return this.fns.reduce((function(e,t){return t(e)}),e)}});var c=["normal","none","counter","open-quote","close-quote","no-open-quote","no-close-quote","initial","inherit"]}));y(ot);ot.PluginSet,ot.fallbacks,ot.contentWrap,ot.prefixes;var it=v((function(e,t){function r(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)+(e.charCodeAt(t++)<<16)+(e.charCodeAt(t)<<24)}function n(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)}function o(e,t){return(65535&(e|=0))*(t|=0)+(((e>>>16)*t&65535)<<16)|0}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var i=1540483477,a=t^e.length,u=e.length,s=0;for(;u>=4;){var c=r(e,s);c=o(c,i),c=o(c^=c>>>24,i),a=o(a,i),a^=c,s+=4,u-=4}switch(u){case 3:a^=n(e,s),a=o(a^=e.charCodeAt(s+2)<<16,i);break;case 2:a=o(a^=n(e,s),i);break;case 1:a=o(a^=e.charCodeAt(s),i)}return a=o(a^=a>>>13,i),(a^=a>>>15)>>>0}}));y(it);var at=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.compose=t.merge=t.$=t.style=t.presets=t.keyframes=t.fontFace=t.insertGlobal=t.insertRule=t.plugins=t.styleSheet=void 0,t.speedy=function(e){return u.speedy(e)},t.simulations=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];p=!!e},t.simulate=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(!(t=(0,n.default)(t)))return{};if(!p)return d||(console.warn("can't simulate without once calling simulations(true)"),d=!0),c||l||m||(console.warn("don't use simulation outside dev"),m=!0),{};return t.reduce((function(e,t){return e["data-simulate-"+y(t)]="",e}),{})},t.cssLabels=function(e){h=!!e},t.isLikeRule=b,t.idFor=g,t.css=W,t.rehydrate=function(e){(0,r.default)(E,e.reduce((function(e,t){return e[t]=!0,e}),{}))},t.flush=function(){E=u.inserted={},S=u.registered={},M={},u.flush(),u.inject()},t.select=V,t.parent=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return W(a({},e+" &",r))},t.media=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return W(a({},"@media "+e,r))},t.pseudo=q,t.active=function(e){return q(":active",e)},t.any=function(e){return q(":any",e)},t.checked=function(e){return q(":checked",e)},t.disabled=function(e){return q(":disabled",e)},t.empty=function(e){return q(":empty",e)},t.enabled=function(e){return q(":enabled",e)},t._default=function(e){return q(":default",e)},t.first=function(e){return q(":first",e)},t.firstChild=function(e){return q(":first-child",e)},t.firstOfType=function(e){return q(":first-of-type",e)},t.fullscreen=function(e){return q(":fullscreen",e)},t.focus=function(e){return q(":focus",e)},t.hover=function(e){return q(":hover",e)},t.indeterminate=function(e){return q(":indeterminate",e)},t.inRange=function(e){return q(":in-range",e)},t.invalid=function(e){return q(":invalid",e)},t.lastChild=function(e){return q(":last-child",e)},t.lastOfType=function(e){return q(":last-of-type",e)},t.left=function(e){return q(":left",e)},t.link=function(e){return q(":link",e)},t.onlyChild=function(e){return q(":only-child",e)},t.onlyOfType=function(e){return q(":only-of-type",e)},t.optional=function(e){return q(":optional",e)},t.outOfRange=function(e){return q(":out-of-range",e)},t.readOnly=function(e){return q(":read-only",e)},t.readWrite=function(e){return q(":read-write",e)},t.required=function(e){return q(":required",e)},t.right=function(e){return q(":right",e)},t.root=function(e){return q(":root",e)},t.scope=function(e){return q(":scope",e)},t.target=function(e){return q(":target",e)},t.valid=function(e){return q(":valid",e)},t.visited=function(e){return q(":visited",e)},t.dir=function(e,t){return q(":dir("+e+")",t)},t.lang=function(e,t){return q(":lang("+e+")",t)},t.not=function(e,t){var r=e.split(",").map((function(e){return e.trim()})).map((function(e){return":not("+e+")"}));if(1===r.length)return q(":not("+e+")",t);return V(r.join(""),t)},t.nthChild=function(e,t){return q(":nth-child("+e+")",t)},t.nthLastChild=function(e,t){return q(":nth-last-child("+e+")",t)},t.nthLastOfType=function(e,t){return q(":nth-last-of-type("+e+")",t)},t.nthOfType=function(e,t){return q(":nth-of-type("+e+")",t)},t.after=function(e){return q("::after",e)},t.before=function(e){return q("::before",e)},t.firstLetter=function(e){return q("::first-letter",e)},t.firstLine=function(e){return q("::first-line",e)},t.selection=function(e){return q("::selection",e)},t.backdrop=function(e){return q("::backdrop",e)},t.placeholder=function(e){return W({"::placeholder":e})},t.cssFor=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return(t=(0,n.default)(t))?t.map((function(e){var t={label:[]};return R(t,{src:e}),x(v(t),k(t)).join("")})).join(""):""},t.attribsFor=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];var o=(t=(0,n.default)(t))?t.map((function(e){g(e);var t=Object.keys(e)[0];return t+'="'+(e[t]||"")+'"'})).join(" "):"";return o};var r=i(ye),n=i(He),o=i(it);function i(e){return e&&e.__esModule?e:{default:e}}function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var u=t.styleSheet=new ve.StyleSheet;u.inject();var s=t.plugins=u.plugins=new ot.PluginSet([ot.prefixes,ot.contentWrap,ot.fallbacks]);s.media=new ot.PluginSet,s.fontFace=new ot.PluginSet,s.keyframes=new ot.PluginSet([ot.prefixes,ot.fallbacks]);var c="development"===process.env.NODE_ENV||!process.env.NODE_ENV,l="test"===process.env.NODE_ENV,f="undefined"!=typeof window,p=c,d=!1,m=!1;var h=c;function y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e.toLowerCase().replace(/[^a-z0-9]/g,t)}function v(e){var t=JSON.stringify(e),r=(0,o.default)(t).toString(36);return e.label&&e.label.length>0&&c?y(e.label.join("."),"-")+"-"+r:r}function b(e){var t=Object.keys(e).filter((function(e){return"toString"!==e}));return 1===t.length&&!!/data\-css\-([a-zA-Z0-9\-_]+)/.exec(t[0])}function g(e){var t=Object.keys(e).filter((function(e){return"toString"!==e}));if(1!==t.length)throw new Error("not a rule");var r=/data\-css\-([a-zA-Z0-9\-_]+)/.exec(t[0]);if(!r)throw new Error("not a rule");return r[1]}var w=/[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;function j(e){if(-1===e.indexOf(","))return[e];for(var t,r=[],n=[],o=0;t=w.exec(e);)switch(t[0]){case"(":o++;break;case")":o--;break;case",":if(o)break;r.push(t.index)}for(t=r.length;t--;)n.unshift(e.slice(r[t]+1)),e=e.slice(0,r[t]);return n.unshift(e),n}function O(e,t){if(!e)return t.replace(/\&/g,"");if(!t)return".css-"+e+",[data-css-"+e+"]";var r=j(t).map((function(t){return t.indexOf("&")>=0?[t.replace(/\&/gm,".css-"+e),t.replace(/\&/gm,"[data-css-"+e+"]")].join(","):".css-"+e+t+",[data-css-"+e+"]"+t})).join(",");return p&&/^\&\:/.exec(t)&&!/\s/.exec(t)&&(r+=",.css-"+e+"[data-simulate-"+y(t)+"],[data-css-"+e+"][data-simulate-"+y(t)+"]"),r}function _(e){var t=e.selector,r=e.style,n=s.transform({selector:t,style:r});return n.selector+"{"+(0,Re.createMarkupForStyles)(n.style)+"}"}function k(e){var t=void 0,r=void 0,n=void 0,o=void 0;return Object.keys(e).forEach((function(i){i.indexOf("&")>=0?(r=r||{})[i]=e[i]:0===i.indexOf("@media")?(n=n||{})[i]=k(e[i]):0===i.indexOf("@supports")?(o=o||{})[i]=k(e[i]):"label"===i?e.label.length>0&&((t=t||{}).label=h?e.label.join("."):""):(t=t||{})[i]=e[i]})),{plain:t,selects:r,medias:n,supports:o}}function x(e,t){var r=[],n=t.plain,o=t.selects,i=t.medias,a=t.supports;return n&&r.push(_({style:n,selector:O(e)})),o&&Object.keys(o).forEach((function(t){return r.push(_({style:o[t],selector:O(e,t)}))})),i&&Object.keys(i).forEach((function(t){return r.push(t+"{"+x(e,i[t]).join("")+"}")})),a&&Object.keys(a).forEach((function(t){return r.push(t+"{"+x(e,a[t]).join("")+"}")})),r}var E=u.inserted={};var S=u.registered={};function P(e){S[e.id]||(S[e.id]=e)}var M={};function C(e){if(P(e),function(e){if(!E[e.id]){E[e.id]=!0;var t=k(e.style),r=x(e.id,t);E[e.id]=!!f||r,r.forEach((function(e){return u.insert(e)}))}}(e),M[e.id])return M[e.id];var t=a({},"data-css-"+e.id,h&&e.label||"");return Object.defineProperty(t,"toString",{enumerable:!1,value:function(){return"css-"+e.id}}),M[e.id]=t,t}function A(e,t){var r=j(e).map((function(e){return e.indexOf("&")>=0?e:"&"+e}));return j(t).map((function(e){return e.indexOf("&")>=0?e:"&"+e})).reduce((function(e,t){return e.concat(r.map((function(e){return t.replace(/\&/g,e)})))}),[]).join(",")}function N(e,t){return e?"@supports "+e.substring(9)+" and "+t.substring(9):t}var T={"::placeholder":["::-webkit-input-placeholder","::-moz-placeholder","::-ms-input-placeholder"],":fullscreen":[":-webkit-full-screen",":-moz-full-screen",":-ms-fullscreen"]};function R(e,t){var r=t.selector,o=void 0===r?"":r,i=t.mq,a=void 0===i?"":i,u=t.supp,s=void 0===u?"":u,c=t.src,l=void 0===c?{}:c;Array.isArray(l)||(l=[l]),(l=function e(t){for(var r=[],n=0;n<t.length;n++)r=Array.isArray(t[n])?r.concat(e(t[n])):r.concat(t[n]);return r}(l)).forEach((function(t){if(b(t)){var r=function(e){if(b(e)){var t=S[g(e)];if(null==t)throw new Error("[glamor] an unexpected rule cache miss occurred. This is probably a sign of multiple glamor instances in your app. See https://github.com/threepointone/glamor/issues/79");return t}return e}(t);if("css"!==r.type)throw new Error("cannot merge this rule");t=r.style}(t=(0,n.default)(t))&&t.composes&&R(e,{selector:o,mq:a,supp:s,src:t.composes}),Object.keys(t||{}).forEach((function(r){if(function(e){for(var t=[":",".","[",">"," "],r=!1,n=e.charAt(0),o=0;o<t.length;o++)if(n===t[o]){r=!0;break}return r||e.indexOf("&")>=0}(r))T[r]&&T[r].forEach((function(n){return R(e,{selector:A(o,n),mq:a,supp:s,src:t[r]})})),R(e,{selector:A(o,r),mq:a,supp:s,src:t[r]});else if(function(e){return 0===e.indexOf("@media")}(r))R(e,{selector:o,mq:(i=a,u=r,i?"@media "+i.substring(6)+" and "+u.substring(6):u),supp:s,src:t[r]});else if(function(e){return 0===e.indexOf("@supports")}(r))R(e,{selector:o,mq:a,supp:N(s,r),src:t[r]});else if("composes"===r);else{var n=e;s&&(n[s]=n[s]||{},n=n[s]),a&&(n[a]=n[a]||{},n=n[a]),o&&(n[o]=n[o]||{},n=n[o]),"label"===r?h&&(e.label=e.label.concat(t.label)):n[r]=t[r]}var i,u}))}))}function H(e){var t={label:[]};return R(t,{src:e}),C({id:v(t),style:t,label:h?t.label.join("."):"",type:"css"})}var z={};Object.defineProperty(z,"toString",{enumerable:!1,value:function(){return"css-nil"}});var I="undefined"!=typeof WeakMap?[z,new WeakMap,new WeakMap,new WeakMap]:[z],D=!1;var L,B="undefined"!=typeof WeakMap?(L=H,function(e){if(I[e.length]){for(var t=I[e.length],r=0;r<e.length-1;)t.has(e[r])||t.set(e[r],new WeakMap),t=t.get(e[r]),r++;if(t.has(e[e.length-1])){var n=t.get(e[r]);if(S[n.toString().substring(4)])return n}}var o=L(e);if(I[e.length]){for(var i=0,a=I[e.length];i<e.length-1;)a=a.get(e[i]),i++;try{a.set(e[i],o)}catch(t){var u;c&&!D&&(D=!0,(u=console).warn.apply(u,["failed setting the WeakMap cache for args:"].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(e))),console.warn("this should NOT happen, please file a bug on the github repo."))}}return o}):H;function W(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t[0]&&t[0].length&&t[0].raw)throw new Error("you forgot to include glamor/babel in your babel plugins.");return(t=(0,n.default)(t))?B(t):z}W.insert=function(e){var t={id:v(e),css:e,type:"raw"};P(t),E[t.id]||(u.insert(t.css),E[t.id]=!!f||[t.css])};t.insertRule=W.insert;W.global=function(e,t){if(t=(0,n.default)(t))return W.insert(_({selector:e,style:t}))};t.insertGlobal=W.global;W.keyframes=function(e,t){t||(t=e,e="animation");var r={id:v({name:e,kfs:t=(0,n.default)(t)||{}}),type:"keyframes",name:e,keyframes:t};return P(r),function(e){if(!E[e.id]){var t=Object.keys(e.keyframes).map((function(t){var r=s.keyframes.transform({id:e.id,name:t,style:e.keyframes[t]});return r.name+"{"+(0,Re.createMarkupForStyles)(r.style)+"}"})).join(""),r=["-webkit-","-moz-","-o-",""].map((function(r){return"@"+r+"keyframes "+e.name+"_"+e.id+"{"+t+"}"}));r.forEach((function(e){return u.insert(e)})),E[e.id]=!!f||r}}(r),e+"_"+r.id},W.fontFace=function(e){var t={id:v(e=(0,n.default)(e)),type:"font-face",font:e};return P(t),function(e){if(!E[e.id]){var t="@font-face{"+(0,Re.createMarkupForStyles)(e.font)+"}";u.insert(t),E[e.id]=!!f||[t]}}(t),e.fontFamily};t.fontFace=W.fontFace,t.keyframes=W.keyframes;t.presets={mobile:"(min-width: 400px)",Mobile:"@media (min-width: 400px)",phablet:"(min-width: 550px)",Phablet:"@media (min-width: 550px)",tablet:"(min-width: 750px)",Tablet:"@media (min-width: 750px)",desktop:"(min-width: 1000px)",Desktop:"@media (min-width: 1000px)",hd:"(min-width: 1200px)",Hd:"@media (min-width: 1200px)"};var F=t.style=W;function V(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return e?W(a({},e,r)):F(r)}t.$=V;t.merge=W,t.compose=W;function q(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return W(a({},e,r))}}));y(at);at.compose,at.merge,at.$,at.style,at.presets,at.keyframes,at.fontFace,at.insertGlobal,at.insertRule,at.plugins,at.styleSheet,at.speedy,at.simulations,at.simulate,at.cssLabels,at.isLikeRule,at.idFor;var ut=at.css,st=(at.rehydrate,at.flush,at.select,at.parent,at.media,at.pseudo,at.active,at.any,at.checked,at.disabled,at.empty,at.enabled,at._default,at.first,at.firstChild,at.firstOfType,at.fullscreen,at.focus,at.hover,at.indeterminate,at.inRange,at.invalid,at.lastChild,at.lastOfType,at.left,at.link,at.onlyChild,at.onlyOfType,at.optional,at.outOfRange,at.readOnly,at.readWrite,at.required,at.right,at.root,at.scope,at.target,at.valid,at.visited,at.dir,at.lang,at.not,at.nthChild,at.nthLastChild,at.nthLastOfType,at.nthOfType,at.after,at.before,at.firstLetter,at.firstLine,at.selection,at.backdrop,at.placeholder,at.cssFor,at.attribsFor,ut({height:"25px",width:"19px"})),ct=ut({width:"100%",background:"transparent",padding:"10px 15px",fontWeight:"700",color:"#eff",borderRadius:"5px",fontSize:".85em",borderBottom:"1px dashed #eee",":last-of-type":{borderBottom:0},":hover":{background:"#76e3dc",color:"#fff",cursor:"pointer"}});function lt(e){var t=e.item,r=e.itemClass,o=e.iconClass,i=e.getItem,a="function"==typeof i?i:function(){};return n.createElement("div",{className:"".concat(ct," ").concat(r),onClick:function(e){return a(t)}},n.createElement("img",{className:"".concat(st," ").concat(o),src:t.icon}),t.title)}lt.propTypes={item:r.object.isRequired,itemClass:r.string,iconClass:r.string,getItem:r.func};var ft=ut({bottom:"-52px",left:"15px",width:"400px",borderRadius:"5px",background:"#00afaa"}),pt=function(e){var t=e.containerClass,r=e.getItem,o=e.items,i=e.iconClass,a=e.itemClass;return n.createElement("div",{className:"".concat(ft," ").concat(t)},o.map((function(e){return n.createElement(lt,{iconClass:i,itemClass:a,getItem:r,item:e,key:e.title})})))};pt.propTypes={items:r.array.isRequired,itemClass:r.string,containerClass:r.string,iconClass:r.string,getItem:r.func};var dt=ut({paddingRight:"15px",paddingLeft:"15px",marginRight:"auto",marginLeft:"auto",position:"relative"}),mt=t.memo((function(e){var r=e.inputStyle,o=e.inputClassName,i=e.itemContainerClass,a=e.iconClass,u=e.itemClass,c=e.placeClassName,l=e.library,f=e.getItem,p=e.query,m=e.category,h=e.markerOptions,y=e.markerIcon,v=e.markerType,b=e.multiMarker,g=e.mapOptions,w=e.platform,j=d(t.useState(""),2),O=j[0],_=j[1],k=["search","categories","around","explore","here","suggest"].includes(l)?l:"search",x=d(t.useState([]),2),E=x[0],S=x[1],P=d(t.useState({q:O||p,cat:m}),2),M=P[0],C=P[1],A=d(t.useState(!1),2),N=A[0],T=A[1],R=d(t.useState(null),2),z=R[0],I=R[1],D=g||{};delete D.center;var B=d(t.useState({lat:37,lng:90}),2),W=B[0],F=B[1];navigator.geolocation?navigator.geolocation.getCurrentPosition((function(e){var t=e.coords,r=t.latitude,n=t.longitude,o={lat:r,lng:n},i=M;i.at="".concat(r,",").concat(n,";10000"),T(!b),C(i),F(o)})):console.log("Geolocation is not supported by this browser.");var q=function(e,t){if(!e||"api.here.com"!=e.A)throw new Error("Platform should be of Here Map's Platform");var r=e.getPlacesService();switch(t){case"around":return new H.places.Around(r);case"categories":return new H.places.Categories(r);case"explore":return new H.places.Explore(r);case"here":return new H.places.Here(r);case"lookup":return new H.places.Lookup(r);case"suggest":return new H.places.Suggest(r);case"search":default:return new H.places.Search(r)}}(w,k);return(M.q||M.cat)&&M.at&&q.request(M,{},(function(e){S(e.items||e.suggestions||e.results.items)}),(function(e){console.log(e)})),n.createElement("div",{className:"".concat(dt," ").concat(c)},n.createElement(fe,{className:o||"",style:r,getValue:function(e){_(e),C(s(s({},M),{},{q:e}))}}),!!E.length&&n.createElement(pt,{containerClass:i,iconClass:a,itemClass:u,getItem:function(e){var t="function"==typeof f?f:function(){};S([]),T(!b),F({lat:e.position[0],lng:e.position[1]}),t(e)},items:E}),!!W.lat&&n.createElement(L,{style:{height:"200px",width:"400px"},platform:w,options:e.options,mapOptions:s({center:W,zoom:7},D),interactive:!0},n.createElement(V,{coords:W,getMarker:function(e){I(e)},marker:z,icon:y,type:v,options:h,updateMarker:N})))}));mt.propTypes={library:r.string.isRequired,query:r.string,category:r.string,className:r.string,inputClassName:r.string,containerStyle:r.object,inputStyle:r.object,itemContainerClass:r.string,iconClass:r.string,itemClass:r.string,placeClassName:r.string,getItem:r.func,markerOptions:r.object,markerIcon:r.element,markerType:r.string,multiMarker:r.bool};var ht=W,yt=F,vt=V,bt=q,gt=U,wt=G,jt=Y,Ot=$,_t=mt,kt=L;e.HMap=kt,e.HMapCircle=bt,e.HMapGeoCode=Ot,e.HMapLayer=jt,e.HMapMarker=vt,e.HMapPlaces=_t,e.HMapPolyLine=ht,e.HMapPolygon=yt,e.HMapRectangle=gt,e.HMapRoute=wt,e.default=function(e){var r=d(t.useState({platform:{},options:{}}),2),o=r[0],i=r[1];t.useEffect((function(){M(e).then((function(e){var t=function(e){var t=e.app_id,r=e.app_code,n=e.apikey;if(!(t&&r||n))throw new Error("Options must include appId and appCode OR an apiKey");if("undefined"==typeof H||!H.service)throw new Error("Here Map JavaScripts is not loaded.");return new H.service.Platform(e)}(e);i({platform:t,options:e})}))}),[o.platform.A]);var a=o.platform,u=o.options;return"api.here.com"==a.A&&(u.app_code||u.apikey)?n.Children.map(e.children,(function(e){return n.cloneElement(e,{platform:a,options:u})})):null},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9nZXQtanMvbGliL3V0aWwuanMiLCIuLi9ub2RlX21vZHVsZXMvZ2V0LWpzL2xpYi9nZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvZ2V0LWpzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BsaW1pc3RhaC9oZXJlLW1hcC1qcy9zcmMvZGVmYXVsdHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVyZ2UvbWVyZ2UuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpbWlzdGFoL2hlcmUtbWFwLWpzL3NyYy9pbmRleC5qcyIsIi4uL3NyYy9saWJzL2RlZmF1bHRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC5tZXJnZS9pbmRleC5qcyIsIi4uL3NyYy9saWJzL2xvYWRNYXAuanMiLCIuLi9ub2RlX21vZHVsZXMvaXMtb2JqL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RvdC1wcm9wL2luZGV4LmpzIiwiLi4vc3JjL2xpYnMvdmFsaWRhdGVNYXBUeXBlLmpzIiwiLi4vc3JjL2xpYnMvaW5pdE1hcC5qcyIsIi4uL3NyYy9saWJzL2luaXRJbnRlcmFjdGlvbi5qcyIsIi4uL3NyYy9saWJzL2luaXREZWZhdWx0VUkuanMiLCIuLi9zcmMvbGlicy9pbml0SW50ZXJhY3Rpb25TdHlsZXMuanMiLCIuLi9zcmMvY29tcG9uZW50cy9ITWFwL2luZGV4LmpzIiwiLi4vc3JjL2xpYnMvbWFwQnVpbGRlci5qcyIsIi4uL3NyYy9saWJzL2luaXRNYXBPYmplY3RFdmVudHMuanMiLCIuLi9zcmMvY29tcG9uZW50cy9ITWFwL29iamVjdHMvUG9seUxpbmUuanMiLCIuLi9zcmMvY29tcG9uZW50cy9ITWFwL29iamVjdHMvUG9seWdvbi5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0hNYXAvb2JqZWN0cy9NYXJrZXIuanMiLCIuLi9zcmMvY29tcG9uZW50cy9ITWFwL29iamVjdHMvQ2lyY2xlLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvSE1hcC9vYmplY3RzL1JlY3RhbmdsZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0dlb0NvZGUvaW5kZXguanMiLCIuLi9zcmMvY29tcG9uZW50cy9Sb3V0ZS9pbmRleC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0xheWVyL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC5kZWJvdW5jZS9pbmRleC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL1BsYWNlcy9QbGFjZUlucHV0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZ2xhbW9yL2xpYi9zaGVldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jYW1lbGl6ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9nbGFtb3IvbGliL0NTU1Byb3BlcnR5T3BlcmF0aW9ucy9DU1NQcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3dhcm5pbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvZ2xhbW9yL2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMvZGFuZ2Vyb3VzU3R5bGVWYWx1ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaHlwaGVuYXRlU3R5bGVOYW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2dsYW1vci9saWIvQ1NTUHJvcGVydHlPcGVyYXRpb25zL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2dsYW1vci9saWIvY2xlYW4uanMiLCIuLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9zdGF0aWNEYXRhLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9jYXBpdGFsaXplU3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9wcmVmaXhQcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4VmFsdWUuanMiLCIuLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2N1cnNvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY3Jvc3NGYWRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9maWx0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXguanMiLCIuLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hPbGQuanMiLCIuLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9pbWFnZVNldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvcG9zaXRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3NpemluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jc3MtaW4tanMtdXRpbHMvbGliL2h5cGhlbmF0ZVByb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy90cmFuc2l0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2dsYW1vci9saWIvcHJlZml4ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvZ2xhbW9yL2xpYi9wbHVnaW5zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2dsYW1vci9saWIvaGFzaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9nbGFtb3IvbGliL2luZGV4LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvUGxhY2VzL1BsYWNlSXRlbS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL1BsYWNlcy9QbGFjZUl0ZW1zLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvUGxhY2VzL2luZGV4LmpzIiwiLi4vc3JjL2xpYnMvcGxhY2VCdWlsZGVyLmpzIiwiLi4vc3JjL2luZGV4LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvUGxhdGZvcm0vaW5kZXguanMiLCIuLi9zcmMvbGlicy9pbml0UGxhdGZvcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KHYpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG52YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZyc7XG59O1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nO1xufTtcblxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG52YXIgcmVzb2x2ZWQgPSB7fTtcblxuZnVuY3Rpb24gbG9hZFNjcmlwdCh1cmwsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdmFyIGludm9rZUNhbGxiYWNrID0gZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soKSB7XG4gICAgICAgIHJlc29sdmVkW3VybF0gPSB0cnVlO1xuXG4gICAgICAgIGlmICgoMCwgX3V0aWwuaXNGdW5jdGlvbikoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmIChyZXNvbHZlZFt1cmxdKSB7XG4gICAgICAgIGludm9rZUNhbGxiYWNrKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuXG4gICAgaWYgKHNjcmlwdC5yZWFkeVN0YXRlKSB7XG4gICAgICAgIC8vSUVcbiAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChzY3JpcHQucmVhZHlTdGF0ZSA9PSAnbG9hZGVkJyB8fCBzY3JpcHQucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvL090aGVyc1xuICAgICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2soKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJlc29sdmVkW3VybF0gPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yJywgZSk7XG4gICAgICAgIGlmICgoMCwgX3V0aWwuaXNGdW5jdGlvbikoZXJyb3JDYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBzY3JpcHQuc3JjID0gdXJsO1xuICAgIHZhciBwYXJlbnQgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQ7XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKHNjcmlwdCk7XG59XG5cbmZ1bmN0aW9uIGdldChzcmMsIG9wdHMpIHtcbiAgICBpZiAoKDAsIF91dGlsLmlzU3RyaW5nKShzcmMpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBsb2FkU2NyaXB0KHNyYywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfdXRpbC5pc0FycmF5KShzcmMpKSB7XG4gICAgICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuXG4gICAgICAgIHNyYy5mb3JFYWNoKGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgIHAgPSBwLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQodXJsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgZm9yIGdldCgpJyk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdldDsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2dldC5qcycpLmRlZmF1bHQ7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIFZFUlNJT046IFwidjMvMy4wXCIsIC8vIFZlcnNpb24gb2YgdGhlIHNjcmlwdCB0byBsb2FkXG4gIGludGVyYWN0aXZlOiBmYWxzZSwgLy8gTG9hZHMgaW50ZXJhY3Rpdml0eSBzY3JpcHRcbiAgaW5jbHVkZVVJOiBmYWxzZSwgLy8gTG9hZCB0aGUgZGVmYXVsdCBVSVxuICBpbmNsdWRlUGxhY2VzOiBmYWxzZVxufTtcbiIsIi8qIVxyXG4gKiBAbmFtZSBKYXZhU2NyaXB0L05vZGVKUyBNZXJnZSB2MS4yLjFcclxuICogQGF1dGhvciB5ZWlrb3NcclxuICogQHJlcG9zaXRvcnkgaHR0cHM6Ly9naXRodWIuY29tL3llaWtvcy9qcy5tZXJnZVxyXG5cclxuICogQ29weXJpZ2h0IDIwMTQgeWVpa29zIC0gTUlUIGxpY2Vuc2VcclxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS95ZWlrb3MvanMubWVyZ2UvbWFzdGVyL0xJQ0VOU0VcclxuICovXHJcblxyXG47KGZ1bmN0aW9uKGlzTm9kZSkge1xyXG5cclxuXHQvKipcclxuXHQgKiBNZXJnZSBvbmUgb3IgbW9yZSBvYmplY3RzIFxyXG5cdCAqIEBwYXJhbSBib29sPyBjbG9uZVxyXG5cdCAqIEBwYXJhbSBtaXhlZCwuLi4gYXJndW1lbnRzXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHJcblx0dmFyIFB1YmxpYyA9IGZ1bmN0aW9uKGNsb25lKSB7XHJcblxyXG5cdFx0cmV0dXJuIG1lcmdlKGNsb25lID09PSB0cnVlLCBmYWxzZSwgYXJndW1lbnRzKTtcclxuXHJcblx0fSwgcHVibGljTmFtZSA9ICdtZXJnZSc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIE1lcmdlIHR3byBvciBtb3JlIG9iamVjdHMgcmVjdXJzaXZlbHkgXHJcblx0ICogQHBhcmFtIGJvb2w/IGNsb25lXHJcblx0ICogQHBhcmFtIG1peGVkLC4uLiBhcmd1bWVudHNcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cclxuXHRQdWJsaWMucmVjdXJzaXZlID0gZnVuY3Rpb24oY2xvbmUpIHtcclxuXHJcblx0XHRyZXR1cm4gbWVyZ2UoY2xvbmUgPT09IHRydWUsIHRydWUsIGFyZ3VtZW50cyk7XHJcblxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENsb25lIHRoZSBpbnB1dCByZW1vdmluZyBhbnkgcmVmZXJlbmNlXHJcblx0ICogQHBhcmFtIG1peGVkIGlucHV0XHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cclxuXHRQdWJsaWMuY2xvbmUgPSBmdW5jdGlvbihpbnB1dCkge1xyXG5cclxuXHRcdHZhciBvdXRwdXQgPSBpbnB1dCxcclxuXHRcdFx0dHlwZSA9IHR5cGVPZihpbnB1dCksXHJcblx0XHRcdGluZGV4LCBzaXplO1xyXG5cclxuXHRcdGlmICh0eXBlID09PSAnYXJyYXknKSB7XHJcblxyXG5cdFx0XHRvdXRwdXQgPSBbXTtcclxuXHRcdFx0c2l6ZSA9IGlucHV0Lmxlbmd0aDtcclxuXHJcblx0XHRcdGZvciAoaW5kZXg9MDtpbmRleDxzaXplOysraW5kZXgpXHJcblxyXG5cdFx0XHRcdG91dHB1dFtpbmRleF0gPSBQdWJsaWMuY2xvbmUoaW5wdXRbaW5kZXhdKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XHJcblxyXG5cdFx0XHRvdXRwdXQgPSB7fTtcclxuXHJcblx0XHRcdGZvciAoaW5kZXggaW4gaW5wdXQpXHJcblxyXG5cdFx0XHRcdG91dHB1dFtpbmRleF0gPSBQdWJsaWMuY2xvbmUoaW5wdXRbaW5kZXhdKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG91dHB1dDtcclxuXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogTWVyZ2UgdHdvIG9iamVjdHMgcmVjdXJzaXZlbHlcclxuXHQgKiBAcGFyYW0gbWl4ZWQgaW5wdXRcclxuXHQgKiBAcGFyYW0gbWl4ZWQgZXh0ZW5kXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cclxuXHRmdW5jdGlvbiBtZXJnZV9yZWN1cnNpdmUoYmFzZSwgZXh0ZW5kKSB7XHJcblxyXG5cdFx0aWYgKHR5cGVPZihiYXNlKSAhPT0gJ29iamVjdCcpXHJcblxyXG5cdFx0XHRyZXR1cm4gZXh0ZW5kO1xyXG5cclxuXHRcdGZvciAodmFyIGtleSBpbiBleHRlbmQpIHtcclxuXHJcblx0XHRcdGlmICh0eXBlT2YoYmFzZVtrZXldKSA9PT0gJ29iamVjdCcgJiYgdHlwZU9mKGV4dGVuZFtrZXldKSA9PT0gJ29iamVjdCcpIHtcclxuXHJcblx0XHRcdFx0YmFzZVtrZXldID0gbWVyZ2VfcmVjdXJzaXZlKGJhc2Vba2V5XSwgZXh0ZW5kW2tleV0pO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0YmFzZVtrZXldID0gZXh0ZW5kW2tleV07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBiYXNlO1xyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIE1lcmdlIHR3byBvciBtb3JlIG9iamVjdHNcclxuXHQgKiBAcGFyYW0gYm9vbCBjbG9uZVxyXG5cdCAqIEBwYXJhbSBib29sIHJlY3Vyc2l2ZVxyXG5cdCAqIEBwYXJhbSBhcnJheSBhcmd2XHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHJcblx0ZnVuY3Rpb24gbWVyZ2UoY2xvbmUsIHJlY3Vyc2l2ZSwgYXJndikge1xyXG5cclxuXHRcdHZhciByZXN1bHQgPSBhcmd2WzBdLFxyXG5cdFx0XHRzaXplID0gYXJndi5sZW5ndGg7XHJcblxyXG5cdFx0aWYgKGNsb25lIHx8IHR5cGVPZihyZXN1bHQpICE9PSAnb2JqZWN0JylcclxuXHJcblx0XHRcdHJlc3VsdCA9IHt9O1xyXG5cclxuXHRcdGZvciAodmFyIGluZGV4PTA7aW5kZXg8c2l6ZTsrK2luZGV4KSB7XHJcblxyXG5cdFx0XHR2YXIgaXRlbSA9IGFyZ3ZbaW5kZXhdLFxyXG5cclxuXHRcdFx0XHR0eXBlID0gdHlwZU9mKGl0ZW0pO1xyXG5cclxuXHRcdFx0aWYgKHR5cGUgIT09ICdvYmplY3QnKSBjb250aW51ZTtcclxuXHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBpdGVtKSB7XHJcblxyXG5cdFx0XHRcdGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSBjb250aW51ZTtcclxuXHJcblx0XHRcdFx0dmFyIHNpdGVtID0gY2xvbmUgPyBQdWJsaWMuY2xvbmUoaXRlbVtrZXldKSA6IGl0ZW1ba2V5XTtcclxuXHJcblx0XHRcdFx0aWYgKHJlY3Vyc2l2ZSkge1xyXG5cclxuXHRcdFx0XHRcdHJlc3VsdFtrZXldID0gbWVyZ2VfcmVjdXJzaXZlKHJlc3VsdFtrZXldLCBzaXRlbSk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0cmVzdWx0W2tleV0gPSBzaXRlbTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0eXBlIG9mIHZhcmlhYmxlXHJcblx0ICogQHBhcmFtIG1peGVkIGlucHV0XHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKlxyXG5cdCAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vdHlwZW9mdmFyXHJcblx0ICovXHJcblxyXG5cdGZ1bmN0aW9uIHR5cGVPZihpbnB1dCkge1xyXG5cclxuXHRcdHJldHVybiAoe30pLnRvU3RyaW5nLmNhbGwoaW5wdXQpLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmIChpc05vZGUpIHtcclxuXHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IFB1YmxpYztcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHR3aW5kb3dbcHVibGljTmFtZV0gPSBQdWJsaWM7XHJcblxyXG5cdH1cclxuXHJcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZSAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKTsiLCJpbXBvcnQgZ2V0SlMgZnJvbSBcImdldC1qc1wiO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gXCIuL2RlZmF1bHRzXCI7XG5pbXBvcnQgbWVyZ2UgZnJvbSBcIm1lcmdlXCI7XG5gYDtcblxuY29uc3QgYnVpbGRTY3JpcHRVUkxzID0gKHZlcnNpb24gPSBkZWZhdWx0cy5WRVJTSU9OKSA9PiBbXG4gIGBodHRwczovL2pzLmFwaS5oZXJlLmNvbS8ke3ZlcnNpb259L21hcHNqcy1zZXJ2aWNlLmpzYCwgLy8gU2VydmljZVxuICBgaHR0cHM6Ly9qcy5hcGkuaGVyZS5jb20vJHt2ZXJzaW9ufS9tYXBzanMtdWkuanNgLCAvLyBVSVxuICBgaHR0cHM6Ly9qcy5hcGkuaGVyZS5jb20vJHt2ZXJzaW9ufS9tYXBzanMtbWFwZXZlbnRzLmpzYCwgLy8gRXZlbnRzXG4gIGBodHRwczovL2pzLmFwaS5oZXJlLmNvbS8ke3ZlcnNpb259L21hcHNqcy1wbGFjZXMuanNgIC8vIHBsYWNlc1xuXTtcblxuY29uc3QgbWVyZ2VyID0gb3B0aW9ucyA9PiBtZXJnZShkZWZhdWx0cywgb3B0aW9ucyk7XG5cbmNvbnN0IHNjcmlwdExvYWRlciA9IG9wdGlvbnMgPT4ge1xuICBjb25zdCBfb3B0aW9ucyA9IG1lcmdlcihvcHRpb25zIHx8IHt9KTtcbiAgY29uc3QgeyBWRVJTSU9OLCB2ZXJzaW9uLCBpbnRlcmFjdGl2ZSwgaW5jbHVkZVVJLCBpbmNsdWRlUGxhY2VzIH0gPSBfb3B0aW9ucztcblxuICBjb25zdCBfdiA9IHZlcnNpb24gfHwgVkVSU0lPTjtcbiAgY29uc3QgdXJscyA9IGJ1aWxkU2NyaXB0VVJMcyhfdik7XG5cbiAgLy8gRmlyc3QgbGV0IHVzIHJlbW92ZSB0aGUgZXZlbnRzIGlmIGl0IGlzIG5vdCBuZWVkZWQuIFBFUkZPUk1BTkNFISEhXG4gICFpbnRlcmFjdGl2ZSA/IHVybHMuc3BsaWNlKDIsIDEpIDogbnVsbDtcbiAgLy8gUmVtb3ZlcyB0aGUgVUkgaWYgbm90IG5lZWRlZFxuICAhaW5jbHVkZVVJID8gdXJscy5zcGxpY2UoMSwgMSkgOiBudWxsO1xuICAvLyBSZW1vdmUgcGxhY2VzIGlmIG5vdCBuZWVkZWRcbiAgIWluY2x1ZGVQbGFjZXMgPyB1cmxzLnNwbGljZSgzLCAxKSA6IG51bGw7XG4gIGNvbnN0IGNvcmVVUkwgPSBgaHR0cHM6Ly9qcy5hcGkuaGVyZS5jb20vJHtfdn0vbWFwc2pzLWNvcmUuanNgO1xuXG4gIHJldHVybiBnZXRKUyhjb3JlVVJMKVxuICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGluY2x1ZGVVSSkge1xuICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwicmVsXCIsIFwic3R5bGVzaGVldFwiKTtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dC9jc3NcIik7XG4gICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFxuICAgICAgICAgIFwiaHJlZlwiLFxuICAgICAgICAgIGBodHRwczovL2pzLmFwaS5oZXJlLmNvbS8ke192fS9tYXBzanMtdWkuY3NzYFxuICAgICAgICApO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kKGxpbmspO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldEpTKHVybHMpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNjcmlwdExvYWRlcjtcbiIsIi8qKlxuICogQHR5cGUge3N0cmluZ30gRGVmYXVsdCB2ZXJzaW9uIGZvciB0aGUgQVBJXG4gKi9cbmNvbnN0IFZFUlNJT04gPSBcInYzLzMuMFwiO1xuY29uc3QgTUFQX1RZUEUgPSBcIm5vcm1hbC5tYXBcIjtcbmNvbnN0IF90ZXN0ID0gdHJ1ZTtcbmNvbnN0IG1hcFR5cGVzID0ge1xuICBub3JtYWw6IFtcbiAgICBcInhiYXNlXCIsXG4gICAgXCJ4YmFzZW5pZ2h0XCIsXG4gICAgXCJiYXNlXCIsXG4gICAgXCJiYXNlbmlnaHRcIixcbiAgICBcIm1hcFwiLFxuICAgIFwibWFwbmlnaHRcIixcbiAgICBcInRyYWZmaWNcIixcbiAgICBcInRyYWZmaWNuaWdodFwiLFxuICAgIFwidHJhbnNpdFwiLFxuICAgIFwicGFub3JhbWFcIixcbiAgICBcInBhbm9yYW1hbmlnaHRcIixcbiAgICBcImxhYmVsc1wiLFxuICAgIFwibWV0YUluZm9cIlxuICBdLFxuICBzYXRlbGxpdGU6IFtcInhiYXNlXCIsIFwiYmFzZVwiLCBcIm1hcFwiLCBcInRyYWZmaWNcIiwgXCJwYW5vcmFtYVwiLCBcImxhYmVsc1wiXSxcbiAgdGVycmFpbjogW1wieGJhc2VcIiwgXCJiYXNlXCIsIFwibWFwXCIsIFwidHJhZmZpY1wiLCBcInBhbm9yYW1hXCIsIFwibGFiZWxzXCJdLFxuICBpbmNpZGVudHM6IF90ZXN0LFxuICB2ZW51ZXM6IF90ZXN0XG59O1xuXG5jb25zdCBtYXBPcHRpb25zID0ge1xuICB6b29tOiA4LFxuICBjZW50ZXI6IHtcbiAgICBsYXQ6IDYuNTI0Mzc5MyxcbiAgICBsbmc6IDMuMzc5MjA1N1xuICB9XG59O1xuY29uc3QgdXNlRXZlbnRzID0gZmFsc2U7XG5jb25zdCBpbnRlcmFjdGl2ZSA9IGZhbHNlO1xuY29uc3QgaW5jbHVkZVVJID0gZmFsc2U7XG5jb25zdCBjb250YWluZXJJZCA9IFwiSEVSRV9NQVBfQ09OVEFJTkVSXCI7XG5cbmNvbnN0IF9tYXBFdmVudHMgPSBbXG4gIFwicG9pbnRlcmRvd25cIixcbiAgXCJwb2ludGVydXBcIixcbiAgXCJwb2ludGVybW92ZVwiLFxuICBcInBvaW50ZXJlbnRlclwiLFxuICBcInBvaW50ZXJsZWF2ZVwiLFxuICBcInBvaW50ZXJjYW5jZWxcIixcbiAgXCJkcmFnc3RhcnRcIixcbiAgXCJkcmFnXCIsXG4gIFwiZHJhZ2VuZFwiLFxuICBcInRhYlwiLFxuICBcImRibHRhcFwiXG5dO1xuXG5jb25zdCBkZWZhdWx0Q2xhc3NOYW1lID0gXCJoZXJlLW1hcC1jb250YWluZXJcIjtcblxuY29uc3QgaW5jbHVkZVBsYWNlcyA9IGZhbHNlO1xuXG4vLyBGdW5jdGlvbiB0aGF0IGRvZXMgcmVhbGx5IG5vdGhpbmcsIHN0aWxsIGl0IGlzIGEgZnVuY3Rpb24sIGFuZCBoYXMgaXRzIHJpZ2h0IVxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xubGV0IG1hcEV2ZW50cyA9IHt9O1xuX21hcEV2ZW50cy5tYXAobmFtZSA9PiAobWFwRXZlbnRzW25hbWVdID0gbm9vcCkpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFZFUlNJT04sXG4gIG1hcFR5cGVzLFxuICBtYXBFdmVudHMsXG4gIE1BUF9UWVBFLFxuICBtYXBPcHRpb25zLFxuICBpbnRlcmFjdGl2ZSxcbiAgaW5jbHVkZVVJLFxuICBpbmNsdWRlUGxhY2VzLFxuICB1c2VFdmVudHMsXG4gIGNvbnRhaW5lcklkLFxuICBkZWZhdWx0Q2xhc3NOYW1lXG59O1xuIiwiLyoqXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIH1cbiAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjUuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0ge1xuICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICogfTtcbiAqXG4gKiB2YXIgb3RoZXIgPSB7XG4gKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gKiB9O1xuICpcbiAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gKi9cbnZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlO1xuIiwiaW1wb3J0IGhlcmVNYXBKUyBmcm9tIFwiQGxpbWlzdGFoL2hlcmUtbWFwLWpzXCI7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSBcIi4vZGVmYXVsdHNcIjtcbmltcG9ydCBtZXJnZSBmcm9tIFwibG9kYXNoLm1lcmdlXCI7XG5cbi8vIE1lcmdlcyB0aGUgb3B0aW9uIHdpdGggdGhlIGRlZmF1bHRzIHRvIGNyZWF0ZSBhIHVuaXNvbiBhbmQgbWFrZSByZXF1aXJlZCB2YWx1ZXMgYXZhaWxhYmxlXG5jb25zdCBvcHRpb25NZXJnZXIgPSBvcHRpb25zID0+IG1lcmdlKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuLyoqXG4gKiBTY3JpcHQgaW5pdGlhbGl6YXRpb24sIGJvb3RzdHJhcHMgbmVlZGVkIHV0aWxzIGZvciBzdWNjZXNzZnVsIHJ1bm5pbmcgb2YgdGhlIGxpYnJhcnlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBvcHRpb25zLnZlcnNpb24gVmVyc2lvbiBvZiB0aGUgYXBpIHRvIGxvYWQuIERlZmF1bHRzIHRvIHYzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy5pbnRlcmFjdGl2ZSBBZGRzIGludGVyYWN0aXZlIHNjcmlwdHNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBvcHRpb25zLmluY2x1ZGVVSSBTaG91bGQgYWRkIHRoZSBVSSBzY3JpcHRzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy5pbmNsdWRlUGxhY2VzIEluY2x1ZGUgdGhlIHBsYWNlcyBzY3JpcHRcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIEl0ZW1zIG5lY2Vzc2FyeSB0byBydW4gdGhlIGxpYnJhcnlcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZXIgPSBvcHRpb25zID0+IHtcbiAgY29uc3QgX29wdGlvbnMgPSBvcHRpb25NZXJnZXIob3B0aW9ucyB8fCB7fSk7XG4gIGNvbnN0IHsgVkVSU0lPTiwgdmVyc2lvbiwgaW50ZXJhY3RpdmUsIGluY2x1ZGVVSSwgaW5jbHVkZVBsYWNlcyB9ID0gX29wdGlvbnM7XG4gIC8vIFJldHVybnMgYXN5bmMgbG9hZGluZyBvZiB0aGUgY29tcG9uZW50XG4gIC8vIEZpcnN0IGxvYWQgdGhlIGNvcmUsIHRvIHNhdmUgdXMgcmVmZXJlbmNlIGVycm9yIGlmIGFsbCBvZiB0aGUgbGlicmFyaWVzIGFyZSBsb2FkZWQgYXN5bmNocm9ub3VzbHkgZHVlIHRvIHJhY2UgY29uZGl0aW9uc1xuICByZXR1cm4gaGVyZU1hcEpTKHtcbiAgICBpbmNsdWRlVUksXG4gICAgaW5jbHVkZVBsYWNlcyxcbiAgICBpbnRlcmFjdGl2ZSxcbiAgICB2ZXJzaW9uOiB2ZXJzaW9uIHx8IFZFUlNJT05cbiAgfSkudGhlbigoKSA9PiBfb3B0aW9ucyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbml0aWFsaXplcjtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHgpIHtcblx0dmFyIHR5cGUgPSB0eXBlb2YgeDtcblx0cmV0dXJuIHggIT09IG51bGwgJiYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iaiA9IHJlcXVpcmUoJ2lzLW9iaicpO1xuXG5tb2R1bGUuZXhwb3J0cy5nZXQgPSBmdW5jdGlvbiAob2JqLCBwYXRoKSB7XG5cdGlmICghaXNPYmoob2JqKSB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gb2JqO1xuXHR9XG5cblx0dmFyIHBhdGhBcnIgPSBnZXRQYXRoU2VnbWVudHMocGF0aCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcGF0aEFycltpXSkgfHwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCBwYXRoQXJyW2ldKTtcblx0XHRpZiAoZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0b2JqID0gb2JqW3BhdGhBcnJbaV1dO1xuXG5cdFx0aWYgKG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gYG9iamAgaXMgZWl0aGVyIGB1bmRlZmluZWRgIG9yIGBudWxsYCBzbyB3ZSB3YW50IHRvIHN0b3AgdGhlIGxvb3AsIGFuZFxuXHRcdFx0Ly8gaWYgdGhpcyBpcyBub3QgdGhlIGxhc3QgYml0IG9mIHRoZSBwYXRoLCBhbmRcblx0XHRcdC8vIGlmIGl0IGRpZCd0IHJldHVybiBgdW5kZWZpbmVkYFxuXHRcdFx0Ly8gaXQgd291bGQgcmV0dXJuIGBudWxsYCBpZiBgb2JqYCBpcyBgbnVsbGBcblx0XHRcdC8vIGJ1dCB3ZSB3YW50IGBnZXQoe2ZvbzogbnVsbH0sICdmb28uYmFyJylgIHRvIGVxdWFsIGB1bmRlZmluZWRgIG5vdCBgbnVsbGBcblx0XHRcdGlmIChpICE9PSBwYXRoQXJyLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9iajtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnNldCA9IGZ1bmN0aW9uIChvYmosIHBhdGgsIHZhbHVlKSB7XG5cdGlmICghaXNPYmoob2JqKSB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgcGF0aEFyciA9IGdldFBhdGhTZWdtZW50cyhwYXRoKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhBcnIubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgcCA9IHBhdGhBcnJbaV07XG5cblx0XHRpZiAoIWlzT2JqKG9ialtwXSkpIHtcblx0XHRcdG9ialtwXSA9IHt9O1xuXHRcdH1cblxuXHRcdGlmIChpID09PSBwYXRoQXJyLmxlbmd0aCAtIDEpIHtcblx0XHRcdG9ialtwXSA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdG9iaiA9IG9ialtwXTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMuZGVsZXRlID0gZnVuY3Rpb24gKG9iaiwgcGF0aCkge1xuXHRpZiAoIWlzT2JqKG9iaikgfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHBhdGhBcnIgPSBnZXRQYXRoU2VnbWVudHMocGF0aCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHAgPSBwYXRoQXJyW2ldO1xuXG5cdFx0aWYgKGkgPT09IHBhdGhBcnIubGVuZ3RoIC0gMSkge1xuXHRcdFx0ZGVsZXRlIG9ialtwXTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRvYmogPSBvYmpbcF07XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmhhcyA9IGZ1bmN0aW9uIChvYmosIHBhdGgpIHtcblx0aWYgKCFpc09iaihvYmopIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBwYXRoQXJyID0gZ2V0UGF0aFNlZ21lbnRzKHBhdGgpO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aEFyci5sZW5ndGg7IGkrKykge1xuXHRcdG9iaiA9IG9ialtwYXRoQXJyW2ldXTtcblxuXHRcdGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gZ2V0UGF0aFNlZ21lbnRzKHBhdGgpIHtcblx0dmFyIHBhdGhBcnIgPSBwYXRoLnNwbGl0KCcuJyk7XG5cdHZhciBwYXJ0cyA9IFtdO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aEFyci5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBwID0gcGF0aEFycltpXTtcblxuXHRcdHdoaWxlIChwW3AubGVuZ3RoIC0gMV0gPT09ICdcXFxcJyAmJiBwYXRoQXJyW2kgKyAxXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRwID0gcC5zbGljZSgwLCAtMSkgKyAnLic7XG5cdFx0XHRwICs9IHBhdGhBcnJbKytpXTtcblx0XHR9XG5cblx0XHRwYXJ0cy5wdXNoKHApO1xuXHR9XG5cblx0cmV0dXJuIHBhcnRzO1xufVxuIiwiaW1wb3J0IGRvdFByb3AgZnJvbSBcImRvdC1wcm9wXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChtYXBUeXBlcywgbWFwVHlwZSkgPT4ge1xuICBjb25zdCBpdGVtcyA9IG1hcFR5cGUuc3BsaXQoXCIuXCIpO1xuICBjb25zdCBtYWluVHlwZSA9IG1hcFR5cGVzW2l0ZW1zWzBdXTtcbiAgLy8gU29tZSBvZiB0aGUgdHlwZXMgYXJlIGFycmF5LCBhbmQgc2hvdWxkIGhhdmUgdGhlIHNlY29uZCBlbGVtZW50IGluIHRoZSBzcGxpdCB0eXBlIHRvIGJlIGFuIGl0ZW0gaW4gaXRcbiAgY29uc3QgX3Rlc3QgPSBBcnJheS5pc0FycmF5KG1haW5UeXBlKSAmJiBtYWluVHlwZS5pbmNsdWRlcyhpdGVtc1sxXSk7XG4gIGNvbnN0IF9fdGVzdCA9IG1haW5UeXBlID09PSB0cnVlO1xuICBpZiAoIV90ZXN0ICYmICFfX3Rlc3QpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIm1hcFR5cGUgU2hvdWxkIGJlIG9uZSBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLmhlcmUuY29tL2RvY3VtZW50YXRpb24vbWFwcy90b3BpY3MvbWFwLXR5cGVzLmh0bWwgaW4gZG90IG5vdGF0aW9uXCJcbiAgICApO1xuICB9XG59O1xuIiwiaW1wb3J0IGRvdFByb3AgZnJvbSBcImRvdC1wcm9wXCI7XG5pbXBvcnQgdmFsaWRhdGVNYXBUeXBlIGZyb20gXCIuL3ZhbGlkYXRlTWFwVHlwZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAocGxhdGZvcm0sIGNvbnRhaW5lciwgbWFwT3B0aW9ucywgbWFwVHlwZXMsIG1hcFR5cGUpID0+IHtcbiAgdmFsaWRhdGVNYXBUeXBlKG1hcFR5cGVzLCBtYXBUeXBlKTtcbiAgLy8gR2V0IGFsbCB0aGUgZGVmYXVsdCBsYXllcnMgc28gd2UgY2FuIHNldCB3aGljaCB0byB1c2UgYmFzZWQgb24gdGhlIG1hcCB0eXBlXG4gIGNvbnN0IGRlZmF1bHRMYXllcnMgPSBwbGF0Zm9ybS5jcmVhdGVEZWZhdWx0TGF5ZXJzKCk7XG4gIC8vIEluc3RhbnRpYXRlIChhbmQgZGlzcGxheSkgYSBtYXAgb2JqZWN0OlxuICByZXR1cm4gbmV3IEguTWFwKGNvbnRhaW5lciwgZG90UHJvcC5nZXQoZGVmYXVsdExheWVycywgbWFwVHlwZSksIG1hcE9wdGlvbnMpO1xufTtcbiIsIi8vIEFkZCBpbnRlcmFjdGl2aXR5IGlmIHNldCBmcm9tIHRoZSBvcHRpb25zXG4vLyBpbnRlcmFjdGl2ZSBhbmQgdXNlRXZlbnRzIG11c3QgYmUgdHJ1ZSB0byB1c2UgbWFwIGV2ZW50c1xuY29uc3QgY2hhbmdlQ3Vyc29yVG9HcmFiID0gKCkgPT4ge307XG5cbmV4cG9ydCBkZWZhdWx0IChtYXAsIGludGVyYWN0aXZlLCB1c2VFdmVudHMsIG1hcEV2ZW50cykgPT4ge1xuICBsZXQgYmVoYXZpb3IgPSBpbnRlcmFjdGl2ZVxuICAgID8gbmV3IEgubWFwZXZlbnRzLkJlaGF2aW9yKG5ldyBILm1hcGV2ZW50cy5NYXBFdmVudHMobWFwKSlcbiAgICA6IG51bGw7XG4gIGlmICh1c2VFdmVudHMgJiYgaW50ZXJhY3RpdmUpIHtcbiAgICBmb3IgKGNvbnN0IHR5cGUgaW4gbWFwRXZlbnRzKSB7XG4gICAgICBpZiAobWFwRXZlbnRzLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gbWFwRXZlbnRzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBtYXAuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJlaGF2aW9yO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IChwbGF0Zm9ybSwgbWFwLCBpbmNsdWRlVUksIHVpTGFuZykgPT4ge1xuICBpZiAoIWluY2x1ZGVVSSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImluY2x1ZGVVSSBtdXN0IGJlIHNldCB0byB0cnVlIHRvIGluaXRpYWxpemUgZGVmYXVsdCBVSVwiKTtcbiAgfVxuICAvLyBDcmVhdGUgdGhlIGRlZmF1bHQgVUkgY29tcG9uZW50c1xuICByZXR1cm4gSC51aS5VSS5jcmVhdGVEZWZhdWx0KG1hcCwgcGxhdGZvcm0uY3JlYXRlRGVmYXVsdExheWVycygpLCB1aUxhbmcpO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIGNvbnN0IGNzcyA9IGAuZ3JhYiA9IHtjdXJzb3I6IG1vdmU7Y3Vyc29yOiBncmFiO2N1cnNvcjogLW1vei1ncmFiO2N1cnNvcjogLXdlYmtpdC1ncmFiO30uZ3JhYmJpbmd7Y3Vyc29yOmdyYWJiaW5nO2N1cnNvcjotbW96LWdyYWJiaW5nO2N1cnNvcjotd2Via2l0LWdyYWJiaW5nfWA7XG4gIHN0eWxlLnR5cGUgPSBcInRleHQvY3NzXCI7XG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgLy8gVGhpcyBpcyByZXF1aXJlZCBmb3IgSUU4IGFuZCBiZWxvdy5cbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbiAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgYnVpbGQgZnJvbSBcIi4uLy4uL2xpYnMvbWFwQnVpbGRlclwiO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gXCIuLi8uLi9saWJzL2RlZmF1bHRzXCI7XG5pbXBvcnQgbWVyZ2UgZnJvbSBcImxvZGFzaC5tZXJnZVwiO1xuXG5jbGFzcyBITWFwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5jb250YWluZXIgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICB0aGlzLnN0YXRlID0geyBidWlsZGVyOiB7fSB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBfb3B0aW9ucyA9IG1lcmdlKFxuICAgICAge1xuICAgICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyLmN1cnJlbnQsXG4gICAgICAgIGJ1aWxkOiB0cnVlXG4gICAgICB9LFxuICAgICAgX3Byb3BzLm9wdGlvbnMsXG4gICAgICBfcHJvcHNcbiAgICApO1xuICAgIGRlbGV0ZSBfb3B0aW9ucy5vcHRpb25zO1xuICAgIGNvbnN0IGJ1aWxkZXIgPSBidWlsZChfcHJvcHMucGxhdGZvcm0sIF9vcHRpb25zKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgYnVpbGRlciB9KTtcbiAgfVxuICBjcmVhdGVMb2FkaW5nQ29tcG9uZW50KCkge1xuICAgIHJldHVybiA8ZGl2PkxvYWRpbmc8L2Rpdj47XG4gIH1cbiAgZGlzcGxheUNoaWxkcmVuKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBtYXAsIHBsYXRmb3JtLCB1aSwgb3B0aW9ucyB9ID0gdGhpcy5zdGF0ZS5idWlsZGVyO1xuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNoaWxkID0+XG4gICAgICBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbWFwLCBwbGF0Zm9ybSwgdWksIF9fb3B0aW9uczogb3B0aW9ucyB9KVxuICAgICk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgc3R5bGUsIGxvYWRpbmdFbCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXMuc3RhdGUuYnVpbGRlcjtcblxuICAgIGNvbnN0IGxvYWRpbmcgPSBsb2FkaW5nRWwgfHwgdGhpcy5jcmVhdGVMb2FkaW5nQ29tcG9uZW50KCk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9e2RlZmF1bHRzLmNvbnRhaW5lcklkfVxuICAgICAgICBjbGFzc05hbWU9e2RlZmF1bHRzLmRlZmF1bHRDbGFzc05hbWV9XG4gICAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgICAgcmVmPXt0aGlzLmNvbnRhaW5lcn1cbiAgICAgID5cbiAgICAgICAge3R5cGVvZiBIID09PSBcInVuZGVmaW5lZFwiICYmICFvcHRpb25zICYmIGxvYWRpbmd9XG4gICAgICAgIHt0eXBlb2YgSCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zICYmIHRoaXMuZGlzcGxheUNoaWxkcmVuKCl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkhNYXAucHJvcFR5cGVzID0ge1xuICB2ZXJzaW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtYXBUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB1c2VFdmVudHM6IFByb3BUeXBlcy5ib29sLFxuICBpbnRlcmFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGluY2x1ZGVVSTogUHJvcFR5cGVzLmJvb2wsXG4gIG1hcEV2ZW50czogUHJvcFR5cGVzLm9iamVjdCxcbiAgcGxhdGZvcm06IFByb3BUeXBlcy5vYmplY3QsXG4gIG9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1hcE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhNYXA7XG4iLCJpbXBvcnQgaW5pdE1hcCBmcm9tIFwiLi9pbml0TWFwXCI7XG5pbXBvcnQgaW5pdEludGVyYWN0aW9uIGZyb20gXCIuL2luaXRJbnRlcmFjdGlvblwiO1xuaW1wb3J0IGluaXREZWZhdWx0VUkgZnJvbSBcIi4vaW5pdERlZmF1bHRVSVwiO1xuaW1wb3J0IGluaXRJbnRlcmFjdGlvblN0eWxlcyBmcm9tIFwiLi9pbml0SW50ZXJhY3Rpb25TdHlsZXNcIjtcblxuLyoqXG4gKiBUaGUgd2hvbGUgbGlicmFyeSBpcyBib290c3RyYXBwZWQgYWZ0ZXIgdGhlIGluaXRpYWxpemF0aW9uIGlzIGRvbmUgdXNpbmcgdGhlIG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBvcHRpb25zLnZlcnNpb24gVmVyc2lvbiBvZiB0aGUgYXBpIHRvIGxvYWQuIERlZmF1bHRzIHRvIHYzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy5WRVJTSU9OIERlZmF1bHQgdmVyc2lvbiBEZWZhdWx0cyB0byB2M1xuICogQHByb3BlcnR5IHtvYmplY3R9IG9wdGlvbnMubWFwRXZlbnRzIE1hcCBldmVudHMgaW1wbGVtZW50YXRpb25cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBvcHRpb25zLm1hcE9wdGlvbnMgT3B0aW9ucyBuZWVkZWQgdG8gaW5pdGlhbGl6ZSB0aGUgbWFwXG4gKiBAcHJvcGVydHkge29iamVjdH0gb3B0aW9ucy5wbGF0Zm9ybU9wdGlvbnMgT3B0aW9ucyBuZWVkZWQgdG8gaW5pdGlhbGl6ZSB0aGUgbWFwXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IG9wdGlvbnMuaW50ZXJhY3RpdmUgQWRkcyBpbnRlcmFjdGl2aXR5IHRvIHRoZSBNQVBcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gb3B0aW9ucy51c2VFdmVudHMgQWRkcyBldmVudCBoYW5kbGluZyB0byB0aGUgbWFwXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IG9wdGlvbnMuaW5jbHVkZVVJIEFkZCBVSSBzY3JpcHQgdG8gdGhlIE1BUFxuICogQHByb3BlcnR5IHtib29sZWFufSBvcHRpb25zLmJ1aWxkIERldGVybWluZXMgaWYgdGhlIG1hcCBzaG91bGQgYmUgYnVpbHRcbiAqIEBwcm9wZXJ0eSB7Tm9kZX0gb3B0aW9ucy5jb250YWluZXIgRE9NIEVsZW1lbnQgdG8gaG9sZCB0aGUgTUFQXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy51aUxhbmcgTGFuZ3VhZ2Ugb2YgdGhlIFVJXG4gKiBAcHJvcGVydHkge2J1aWxkfSBvcHRpb25zLmJ1aWxkIEZsYWcgdG8gdGVsbCBpZiB0aGUgTUFQIHNob3VsZCBiZSBidWlsZCBpbW1lZGlhdGVseVxuICogQHByb3BlcnR5IHtzdHJpbmd9IG9wdGlvbnMuYXBwSWQgSGVyZSBNYXAgQVBQIElEXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy5hcHBDb2RlIEhlcmUgTWFwIEFQUCBjb2RlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy5tYXBUeXBlIFRoZSB0eXBlIG9mIHRoZSBtYXAgdG8gbG9hZCBlLmcgLy8gXCJub3JtYWwubWFwXCJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBvcHRpb25zLk1BUF9UWVBFIERlZmF1bHQgbWFwIHR5cGUgdG8gbG9hZCBcIm5vcm1hbC5tYXBcIlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgSXRlbXMgbmVjZXNzYXJ5IHRvIHJ1biB0aGUgbGlicmFyeVxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgKHBsYXRmb3JtLCBvcHRpb25zKSA9PiB7XG4gIC8vIEdldCB2YWx1ZXMgZnJvbSB0aGUgb3B0aW9uc1xuICBjb25zdCB7XG4gICAgdXNlRXZlbnRzLFxuICAgIG1hcEV2ZW50cyxcbiAgICBpbnRlcmFjdGl2ZSxcbiAgICBpbmNsdWRlVUksXG4gICAgbWFwVHlwZSxcbiAgICBNQVBfVFlQRSxcbiAgICBtYXBUeXBlcyxcbiAgICBtYXBPcHRpb25zLFxuICAgIHVpTGFuZyxcbiAgICBjb250YWluZXIsXG4gICAgYnVpbGRcbiAgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgX21hcFR5cGUgPSBtYXBUeXBlIHx8IE1BUF9UWVBFO1xuXG4gIGxldCByZXQgPSB7IG9wdGlvbnM6IHsgLi4ub3B0aW9ucywgTUFQX1RZUEU6IF9tYXBUeXBlIH0sIHBsYXRmb3JtIH07XG5cbiAgaWYgKGNvbnRhaW5lciAmJiBidWlsZCkge1xuICAgIC8vIENyZWF0ZSBhIE1hcFxuICAgIHJldC5tYXAgPSBpbml0TWFwKHBsYXRmb3JtLCBjb250YWluZXIsIG1hcE9wdGlvbnMsIG1hcFR5cGVzLCBfbWFwVHlwZSk7XG4gICAgcmV0LmludGVyYWN0aW9uID0gaW5pdEludGVyYWN0aW9uKFxuICAgICAgcmV0Lm1hcCxcbiAgICAgIGludGVyYWN0aXZlLFxuICAgICAgdXNlRXZlbnRzLFxuICAgICAgbWFwRXZlbnRzXG4gICAgKTtcbiAgICBpZiAoaW5jbHVkZVVJKSB7XG4gICAgICByZXQudWkgPSBpbml0RGVmYXVsdFVJKHBsYXRmb3JtLCByZXQubWFwLCBpbmNsdWRlVUksIHVpTGFuZyk7XG4gICAgfVxuICAgIC8vIEFkZHMgdGhlIGdyYWJiaW5nIHRvIHRoZSBkb2N1bWVudFxuICAgIGluaXRJbnRlcmFjdGlvblN0eWxlcygpO1xuICB9IGVsc2Uge1xuICAgIHJldC5jcmVhdGVNYXAgPSBpbml0TWFwO1xuICAgIHJldC5jcmVhdGVQbGF0Zm9ybSA9IGluaXRQbGF0Zm9ybTtcbiAgICByZXQuY3JlYXRlSW50ZXJhY3Rpb24gPSBpbml0SW50ZXJhY3Rpb247XG4gICAgcmV0LmNyZWF0ZURlZmF1bHRVSSA9IGluaXREZWZhdWx0VUk7XG4gICAgcmV0LmNyZWF0ZUludGVyYWN0aW9uU3R5bGVzID0gaW5pdEludGVyYWN0aW9uU3R5bGVzO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuIiwiY29uc3QgaW5pdE1hcE9iamVjdEV2ZW50cyA9IChtYXBPYmplY3QsIG9iamVjdEV2ZW50cywgcGxhdGZvcm1PcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgdXNlRXZlbnRzLCBpbnRlcmFjdGl2ZSwgbWFwRXZlbnRzIH0gPSBwbGF0Zm9ybU9wdGlvbnM7XG4gIGlmICh1c2VFdmVudHMgJiYgaW50ZXJhY3RpdmUgJiYgb2JqZWN0RXZlbnRzKSB7XG4gICAgZm9yIChjb25zdCB0eXBlIGluIG1hcEV2ZW50cykge1xuICAgICAgaWYgKG1hcEV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkge1xuICAgICAgICBjb25zdCBvYmplY3RFdmVudENhbGxiYWNrID0gb2JqZWN0RXZlbnRzW3R5cGVdO1xuICAgICAgICBpZiAob2JqZWN0RXZlbnRDYWxsYmFjayAmJiB0eXBlb2Ygb2JqZWN0RXZlbnRDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgbWFwT2JqZWN0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBvYmplY3RFdmVudENhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdE1hcE9iamVjdEV2ZW50cztcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtZXJnZSBmcm9tIFwibG9kYXNoLm1lcmdlXCI7XG5pbXBvcnQgaW5pdE1hcE9iamVjdEV2ZW50cyBmcm9tIFwiLi4vLi4vLi4vbGlicy9pbml0TWFwT2JqZWN0RXZlbnRzXCI7XG5cbmZ1bmN0aW9uIFBvbHlMaW5lKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBwb2ludHMsXG4gICAgb3B0aW9ucyxcbiAgICBtYXAsXG4gICAgc2V0Vmlld0JvdW5kcyxcbiAgICBvYmplY3RFdmVudHMsXG4gICAgcGxhdGZvcm0sXG4gICAgdWksXG4gICAgX19vcHRpb25zXG4gIH0gPSBtZXJnZSh7IHNldFZpZXdCb3VuZHM6IHRydWUgfSwgcHJvcHMpO1xuICBpZiAoIUggfHwgIUgubWFwIHx8ICFtYXApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJITWFwIGhhcyB0byBiZSBpbml0aWFsaXplZCBiZWZvcmUgYWRkaW5nIE1hcCBPYmplY3RzXCIpO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHBvaW50cykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcInBvaW50cyBzaG91bGQgYmUgYW4gYXJyYXkgb2Ygb2JqZWN0cyBjb250YWluaW5nIGxhdCBhbmQgbG5nIHByb3BlcnRpZXNcIlxuICAgICk7XG4gIH1cbiAgLy8gSW5pdGlhbGl6ZSBhIExpbmVTdHJpbmcgYW5kIGFkZCBhbGwgdGhlIHBvaW50cyB0byBpdDpcbiAgdmFyIGxpbmVTdHJpbmcgPSBuZXcgSC5nZW8uTGluZVN0cmluZygpO1xuICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihwb2ludCkge1xuICAgIGxpbmVTdHJpbmcucHVzaFBvaW50KHBvaW50KTtcbiAgfSk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBhIHBvbHlMaW5lIHdpdGggdGhlIGxpbmVTdHJpbmc6XG4gIHZhciBwb2x5TGluZSA9IG5ldyBILm1hcC5Qb2x5bGluZShsaW5lU3RyaW5nLCBvcHRpb25zKTtcblxuICAvLyBBZGQgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIG9iamVjdCBpZiBpbnRlbnRpb24gb2YgdXNpbmcgdGhlIG9iamVjdCBpcyBkZWZpbmVkXG4gIGluaXRNYXBPYmplY3RFdmVudHMocG9seUxpbmUsIG9iamVjdEV2ZW50cywgX19vcHRpb25zKTtcblxuICAvLyBBZGQgdGhlIHBvbHlMaW5lIHRvIHRoZSBtYXA6XG4gIG1hcC5hZGRPYmplY3QocG9seUxpbmUpO1xuXG4gIGlmIChzZXRWaWV3Qm91bmRzKSB7XG4gICAgLy8gWm9vbSB0aGUgbWFwIHRvIG1ha2Ugc3VyZSB0aGUgd2hvbGUgcG9seUxpbmUgaXMgdmlzaWJsZTpcbiAgICBtYXAuc2V0Vmlld0JvdW5kcyhwb2x5TGluZS5nZXRCb3VuZHMoKSk7XG4gIH1cblxuICAvLyBUaGVyZSBpcyBubyBuZWVkIHRvIHJlbmRlciBzb21ldGhpbmcgdXNlZnVsIGhlcmUsIEhlcmVNYXAgZG9lcyB0aGF0IG1hZ2ljYWxseVxuICByZXR1cm4gPGRpdiBzdHlsZT17eyBkaXNwbGF5OiBcIm5vbmVcIiB9fSAvPjtcbn1cblxuUG9seUxpbmUucHJvcFR5cGVzID0ge1xuICBwb2ludHM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBvcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICBtYXA6IFByb3BUeXBlcy5vYmplY3QsXG4gIHNldFZpZXdCb3VuZHM6IFByb3BUeXBlcy5ib29sLFxuICBvYmplY3RFdmVudHM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvbHlMaW5lO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1lcmdlIGZyb20gXCJsb2Rhc2gubWVyZ2VcIjtcbmltcG9ydCBpbml0TWFwT2JqZWN0RXZlbnRzIGZyb20gXCIuLi8uLi8uLi9saWJzL2luaXRNYXBPYmplY3RFdmVudHNcIjtcblxuZnVuY3Rpb24gUG9seWdvbihwcm9wcykge1xuICBjb25zdCB7XG4gICAgcG9pbnRzLFxuICAgIG1hcCxcbiAgICBzZXRWaWV3Qm91bmRzLFxuICAgIG9wdGlvbnMsXG4gICAgb2JqZWN0RXZlbnRzLFxuICAgIHBsYXRmb3JtLFxuICAgIHVpLFxuICAgIF9fb3B0aW9uc1xuICB9ID0gbWVyZ2UoeyBzZXRWaWV3Qm91bmRzOiB0cnVlIH0sIHByb3BzKTtcbiAgaWYgKCFIIHx8ICFILm1hcCB8fCAhbWFwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSE1hcCBoYXMgdG8gYmUgaW5pdGlhbGl6ZWQgYmVmb3JlIGFkZGluZyBNYXAgT2JqZWN0c1wiKTtcbiAgfVxuICBpZiAoIUFycmF5LmlzQXJyYXkocG9pbnRzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwicG9pbnRzIHNob3VsZCBiZSBhbiBhcnJheSBvZiBudW1iZXIgdG8gdXNlIGluIGRyYXdpbmcgdGhlIHBvaW50c1wiXG4gICAgKTtcbiAgfVxuXG4gIGxldCBsaW5lU3RyaW5nID0ge307XG4gIGNvbnN0IGZpcnN0RWwgPSBwb2ludHNbMF07XG4gIGlmICh0eXBlb2YgZmlyc3RFbCA9PT0gXCJzdHJpbmdcIiAmJiBmaXJzdEVsLnNwbGl0KFwiLFwiKS5sZW5ndGggPT09IDIpIHtcbiAgICBsaW5lU3RyaW5nID0gbmV3IEguZ2VvLkxpbmVTdHJpbmcoKTtcbiAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihjb29yZHMpIHtcbiAgICAgIGxpbmVTdHJpbmcucHVzaExhdExuZ0FsdC5hcHBseShsaW5lU3RyaW5nLCBjb29yZHMuc3BsaXQoXCIsXCIpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBsaW5lU3RyaW5nID0gbmV3IEguZ2VvLkxpbmVTdHJpbmcocG9pbnRzLCBcInZhbHVlcyBsYXQgbG5nIGFsdFwiKTtcbiAgfVxuXG4gIC8vIEluaXRpYWxpemUgYSBMaW5lU3RyaW5nIGFuZCBhZGQgYWxsIHRoZSBwb2ludHMgdG8gaXQ6XG4gIGNvbnN0IHBvbHlnb24gPSBuZXcgSC5tYXAuUG9seWdvbihsaW5lU3RyaW5nLCBvcHRpb25zKTtcblxuICAvLyBBZGQgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIG9iamVjdCBpZiBpbnRlbnRpb24gb2YgdXNpbmcgdGhlIG9iamVjdCBpcyBkZWZpbmVkXG4gIGluaXRNYXBPYmplY3RFdmVudHMocG9seWdvbiwgb2JqZWN0RXZlbnRzLCBfX29wdGlvbnMpO1xuXG4gIC8vIEFkZCB0aGUgcG9seUxpbmUgdG8gdGhlIG1hcDpcbiAgbWFwLmFkZE9iamVjdChwb2x5Z29uKTtcblxuICBpZiAoc2V0Vmlld0JvdW5kcykge1xuICAgIC8vIFpvb20gdGhlIG1hcCB0byBtYWtlIHN1cmUgdGhlIHdob2xlIHBvbHlnb24gaXMgdmlzaWJsZTpcbiAgICBtYXAuc2V0Vmlld0JvdW5kcyhwb2x5Z29uLmdldEJvdW5kcygpKTtcbiAgfVxuXG4gIC8vIFRoZXJlIGlzIG5vIG5lZWQgdG8gcmVuZGVyIHNvbWV0aGluZyB1c2VmdWwgaGVyZSwgSGVyZU1hcCBkb2VzIHRoYXQgbWFnaWNhbGx5XG4gIHJldHVybiA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6IFwibm9uZVwiIH19IC8+O1xufVxuXG5Qb2x5Z29uLnByb3BUeXBlcyA9IHtcbiAgcG9pbnRzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgb3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbiAgbWFwOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzZXRWaWV3Qm91bmRzOiBQcm9wVHlwZXMuYm9vbCxcbiAgb2JqZWN0RXZlbnRzOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb2x5Z29uO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1lcmdlIGZyb20gXCJsb2Rhc2gubWVyZ2VcIjtcbmltcG9ydCBpbml0TWFwT2JqZWN0RXZlbnRzIGZyb20gXCIuLi8uLi8uLi9saWJzL2luaXRNYXBPYmplY3RFdmVudHNcIjtcblxuZnVuY3Rpb24gTWFya2VyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBpY29uLFxuICAgIG1hcCxcbiAgICBjb29yZHMsXG4gICAgdHlwZSxcbiAgICBvcHRpb25zLFxuICAgIHNldFZpZXdCb3VuZHMsXG4gICAgdXBkYXRlTWFya2VyLFxuICAgIG1hcmtlcixcbiAgICBnZXRNYXJrZXIsXG4gICAgb2JqZWN0RXZlbnRzLFxuICAgIHBsYXRmb3JtLFxuICAgIHVpLFxuICAgIF9fb3B0aW9uc1xuICB9ID0gbWVyZ2UoXG4gICAgeyBzZXRWaWV3Qm91bmRzOiB0cnVlLCB1cGRhdGVNYXJrZXI6IGZhbHNlLCBtYXJrZXI6IG51bGwsIGdldE1hcmtlcigpIHt9IH0sXG4gICAgcHJvcHNcbiAgKTtcbiAgbGV0IF9vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCFIIHx8ICFILm1hcCB8fCAhbWFwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSE1hcCBoYXMgdG8gYmUgaW5pdGlhbGl6ZWQgYmVmb3JlIGFkZGluZyBNYXAgT2JqZWN0c1wiKTtcbiAgfVxuXG4gIGlmICghY29vcmRzLmxhdCB8fCAhY29vcmRzLmxuZykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiY29vcmRzIHNob3VsZCBiZSBhbiBvYmplY3QgaGF2aW5nICdsYXQnIGFuZCAnbG5nJyBhcyBwcm9wc1wiXG4gICAgKTtcbiAgfVxuXG4gIGlmICghaWNvbikge1xuICAgIC8vIHRocm93IG5ldyBFcnJvcihcImljb24gaXMgbm90IHNldCwgTWFya2VyIHdpbGwgbm90IGJlIHJlbmRlcmVkXCIpO1xuICB9XG5cbiAgaWYgKHR5cGUgJiYgdHlwZSA9PT0gXCJET01cIikge1xuICAgIC8vIERpc3BsYXlzIGEgRE9NIEljb25cbiAgICBfb3B0aW9ucy5pY29uID0gbmV3IEgubWFwLkRvbUljb24oaWNvbik7XG4gIH0gZWxzZSBpZiAodHlwZSkge1xuICAgIC8vIERpc3BsYXlzIGEgc3RhdGljIGljb25cbiAgICBfb3B0aW9ucy5pY29uID0gbmV3IEgubWFwLkljb24oaWNvbik7XG4gIH1cblxuICAvLyBDcmVhdGUgYW4gaWNvbiwgYW4gb2JqZWN0IGhvbGRpbmcgdGhlIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUsIGFuZCBhIG1hcmtlcjpcbiAgY29uc3QgX21hcmtlciA9XG4gICAgdXBkYXRlTWFya2VyICYmIG1hcmtlciA/IG1hcmtlciA6IG5ldyBILm1hcC5NYXJrZXIoY29vcmRzLCBfb3B0aW9ucyk7XG5cbiAgLy8gQ2hlY2tzIGlmIG9iamVjdCBvZiBzYW1lIGNvb3JkaW5hdGVzIGhhdmUgYmVlbiBhZGRlZCBmb3JtZXJseVxuICBjb25zdCBhZGRlZE9iamVjdHMgPSBtYXAuZ2V0T2JqZWN0cygpO1xuICBjb25zdCBvYmplY3RFeGlzdHMgPSBhZGRlZE9iamVjdHMuc29tZShvYmplY3QgPT4ge1xuICAgIGlmICh0eXBlb2Ygb2JqZWN0LmdldFBvc2l0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IHsgbGF0LCBsbmcgfSA9IG9iamVjdC5nZXRQb3NpdGlvbigpO1xuICAgICAgcmV0dXJuIGxhdCA9PT0gY29vcmRzLmxhdCAmJiBjb29yZHMubG5nID09PSBsbmc7XG4gICAgfVxuICB9KTtcblxuICAvLyBUaGlzIG9iamVjdCBleGlzdHMgd2UgZG9uJ3Qgd2FudCB0byBhZGQgaXQgYWdhaW4uIFVwZGF0ZSB0aGUgcG9zaXRpb25cbiAgaWYgKCFvYmplY3RFeGlzdHMgJiYgIXVwZGF0ZU1hcmtlcikge1xuICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lciB0byB0aGUgb2JqZWN0IGlmIGludGVudGlvbiBvZiB1c2luZyB0aGUgb2JqZWN0IGlzIGRlZmluZWRcbiAgICBpbml0TWFwT2JqZWN0RXZlbnRzKF9tYXJrZXIsIG9iamVjdEV2ZW50cywgX19vcHRpb25zKTtcbiAgICBtYXAuYWRkT2JqZWN0KF9tYXJrZXIpO1xuICB9IGVsc2UgaWYgKHVwZGF0ZU1hcmtlcikge1xuICAgIC8vIElmIHdlIGFyZSB1cGRhdGluZywgbm8gbmVlZCB0byBjcmVhdGVcbiAgICBfbWFya2VyLnNldFBvc2l0aW9uKGNvb3Jkcyk7XG4gIH1cblxuICAvLyBTZW5kIHRoZSBtYXJrZXIgdG8gdGhlIHBhcmVudFxuICAhbWFya2VyID8gZ2V0TWFya2VyKF9tYXJrZXIpIDogbnVsbDtcblxuICAvLyBDZW50ZXJzIHRoZSBtYXJrZXJcbiAgc2V0Vmlld0JvdW5kcyA/IG1hcC5zZXRDZW50ZXIoY29vcmRzKSA6IG51bGw7XG5cbiAgLy8gVGhlcmUgaXMgbm8gbmVlZCB0byByZW5kZXIgc29tZXRoaW5nIHVzZWZ1bCBoZXJlLCBIZXJlTWFwIGRvZXMgdGhhdCBtYWdpY2FsbHlcbiAgcmV0dXJuIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJub25lXCIgfX0gLz47XG59XG5cbk1hcmtlci5wcm9wVHlwZXMgPSB7XG4gIGNvb3JkczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBpY29uOiBQcm9wVHlwZXMuYW55LFxuICBvcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzZXRWaWV3Qm91bmRzOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWFwOiBQcm9wVHlwZXMub2JqZWN0LFxuICBvYmplY3RFdmVudHM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1hcmtlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtZXJnZSBmcm9tIFwibG9kYXNoLm1lcmdlXCI7XG5pbXBvcnQgaW5pdE1hcE9iamVjdEV2ZW50cyBmcm9tIFwiLi4vLi4vLi4vbGlicy9pbml0TWFwT2JqZWN0RXZlbnRzXCI7XG5cbmZ1bmN0aW9uIENpcmNsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgcmFkaXVzLFxuICAgIG1hcCxcbiAgICBjb29yZHMsXG4gICAgb3B0aW9ucyxcbiAgICBzZXRWaWV3Qm91bmRzLFxuICAgIG9iamVjdEV2ZW50cyxcbiAgICBwbGF0Zm9ybSxcbiAgICB1aSxcbiAgICBfX29wdGlvbnNcbiAgfSA9IG1lcmdlKHsgc2V0Vmlld0JvdW5kczogdHJ1ZSB9LCBwcm9wcyk7XG4gIGlmICghSCB8fCAhSC5tYXAgfHwgIW1hcCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkhNYXAgaGFzIHRvIGJlIGluaXRpYWxpemVkIGJlZm9yZSBhZGRpbmcgTWFwIE9iamVjdHNcIik7XG4gIH1cblxuICBpZiAoIWNvb3Jkcy5sYXQgfHwgIWNvb3Jkcy5sbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcImNvb3JkcyBzaG91bGQgYmUgYW4gb2JqZWN0IGhhdmluZyAnbGF0JyBhbmQgJ2xuZycgYXMgcHJvcHNcIlxuICAgICk7XG4gIH1cblxuICBpZiAoIXJhZGl1cykge1xuICAgIGNvbnNvbGUuaW5mbyhcInJhZGl1cyBpcyBub3Qgc2V0LCBkZWZhdWx0IHJhZGl1cyBvZiAxMDAwIGlzIHVzZWRcIik7XG4gIH1cblxuICBjb25zdCBjaXJjbGUgPSBuZXcgSC5tYXAuQ2lyY2xlKFxuICAgIC8vIFRoZSBjZW50cmFsIHBvaW50IG9mIHRoZSBjaXJjbGVcbiAgICBjb29yZHMsXG4gICAgLy8gVGhlIHJhZGl1cyBvZiB0aGUgY2lyY2xlIGluIG1ldGVyc1xuICAgIHJhZGl1cyB8fCAxMDAwLFxuICAgIG9wdGlvbnNcbiAgKTtcblxuICAvLyBBZGQgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIG9iamVjdCBpZiBpbnRlbnRpb24gb2YgdXNpbmcgdGhlIG9iamVjdCBpcyBkZWZpbmVkXG4gIGluaXRNYXBPYmplY3RFdmVudHMoY2lyY2xlLCBvYmplY3RFdmVudHMsIF9fb3B0aW9ucyk7XG5cbiAgLy8gQWRkIHRoZSBtYXJrZXIgdG8gdGhlIG1hcCBhbmQgY2VudGVyIHRoZSBtYXAgYXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBtYXJrZXI6XG4gIG1hcC5hZGRPYmplY3QoY2lyY2xlKTtcbiAgaWYgKHNldFZpZXdCb3VuZHMpIHtcbiAgICBtYXAuc2V0Q2VudGVyKGNvb3Jkcyk7XG4gIH1cblxuICAvLyBUaGVyZSBpcyBubyBuZWVkIHRvIHJlbmRlciBzb21ldGhpbmcgdXNlZnVsIGhlcmUsIEhlcmVNYXAgZG9lcyB0aGF0IG1hZ2ljYWxseVxuICByZXR1cm4gPGRpdiBzdHlsZT17eyBkaXNwbGF5OiBcIm5vbmVcIiB9fSAvPjtcbn1cblxuQ2lyY2xlLnByb3BUeXBlcyA9IHtcbiAgY29vcmRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIG9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIHJhZGl1czogUHJvcFR5cGVzLm51bWJlcixcbiAgc2V0Vmlld0JvdW5kczogUHJvcFR5cGVzLmJvb2wsXG4gIG1hcDogUHJvcFR5cGVzLm9iamVjdCxcbiAgb2JqZWN0RXZlbnRzOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaXJjbGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgbWVyZ2UgZnJvbSBcImxvZGFzaC5tZXJnZVwiO1xuaW1wb3J0IGluaXRNYXBPYmplY3RFdmVudHMgZnJvbSBcIi4uLy4uLy4uL2xpYnMvaW5pdE1hcE9iamVjdEV2ZW50c1wiO1xuXG5mdW5jdGlvbiBSZWN0YW5nbGUocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIG1hcCxcbiAgICBwb2ludHMsXG4gICAgb3B0aW9ucyxcbiAgICBzZXRWaWV3Qm91bmRzLFxuICAgIG9iamVjdEV2ZW50cyxcbiAgICBwbGF0Zm9ybSxcbiAgICB1aSxcbiAgICBfX29wdGlvbnNcbiAgfSA9IG1lcmdlKHsgc2V0Vmlld0JvdW5kczogdHJ1ZSB9LCBwcm9wcyk7XG4gIGlmICghSCB8fCAhSC5tYXAgfHwgIW1hcCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkhNYXAgaGFzIHRvIGJlIGluaXRpYWxpemVkIGJlZm9yZSBhZGRpbmcgTWFwIE9iamVjdHNcIik7XG4gIH1cblxuICBpZiAoIXBvaW50cyB8fCBwb2ludHMubGVuZ3RoICE9PSA0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicG9pbnRzIHNob3VsZCBiZSBhbiBhcnJheSBvZiBmb3VyIGl0ZW1zXCIpO1xuICB9XG5cbiAgLy8gR2V0IGEgYm91bmRpbmcgYm94XG4gIGNvbnN0IGJvdW5kaW5nQm94ID0gbmV3IEguZ2VvLlJlY3QoXG4gICAgcG9pbnRzWzBdLFxuICAgIHBvaW50c1sxXSxcbiAgICBwb2ludHNbMl0sXG4gICAgcG9pbnRzWzNdXG4gICk7XG5cbiAgLy8gQ3JlYXRlIGFuIHJlY3RhbmdsZVxuICBjb25zdCByZWN0YW5nbGUgPSBuZXcgSC5tYXAuUmVjdChib3VuZGluZ0JveCwgb3B0aW9ucyk7XG5cbiAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBvYmplY3QgaWYgaW50ZW50aW9uIG9mIHVzaW5nIHRoZSBvYmplY3QgaXMgZGVmaW5lZFxuICBpbml0TWFwT2JqZWN0RXZlbnRzKHJlY3RhbmdsZSwgb2JqZWN0RXZlbnRzLCBfX29wdGlvbnMpO1xuXG4gIC8vIEFkZCBhIHJlY3RhbmdsZSB0byB0aGUgbWFwXG4gIG1hcC5hZGRPYmplY3QocmVjdGFuZ2xlKTtcbiAgaWYgKHNldFZpZXdCb3VuZHMpIHtcbiAgICAvLyBab29tIHRoZSBtYXAgdG8gbWFrZSBzdXJlIHRoZSB3aG9sZSByZWN0YW5nbGUgaXMgdmlzaWJsZTpcbiAgICBtYXAuc2V0Vmlld0JvdW5kcyhyZWN0YW5nbGUuZ2V0Qm91bmRzKCkpO1xuICB9XG5cbiAgLy8gVGhlcmUgaXMgbm8gbmVlZCB0byByZW5kZXIgc29tZXRoaW5nIHVzZWZ1bCBoZXJlLCBIZXJlTWFwIGRvZXMgdGhhdCBtYWdpY2FsbHlcbiAgcmV0dXJuIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJub25lXCIgfX0gLz47XG59XG5cblJlY3RhbmdsZS5wcm9wVHlwZXMgPSB7XG4gIG9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIHBvaW50czogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIG1hcDogUHJvcFR5cGVzLm9iamVjdCxcbiAgb2JqZWN0RXZlbnRzOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWN0YW5nbGU7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuZnVuY3Rpb24gR2VvQ29kZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgZ2VvQ29kZVBhcmFtcyxcbiAgICBwbGF0Zm9ybSxcbiAgICBtYXAsXG4gICAgdWksXG4gICAgY2hpbGRyZW4sXG4gICAgcmV2ZXJzZSxcbiAgICBsYW5kbWFya1xuICB9ID0gcHJvcHM7XG4gIGlmICghSCB8fCAhSC5tYXAgfHwgIW1hcCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkhNYXAgaGFzIHRvIGJlIGluaXRpYWxpemVkIGJlZm9yZSBhZGRpbmcgTWFwIE9iamVjdHNcIik7XG4gIH1cblxuICBpZiAoIWdlb0NvZGVQYXJhbXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZW9Db2RlUGFyYW1zIGlzIG5vdCBzZXRcIik7XG4gIH1cbiAgY29uc3QgW2xvY2F0aW9ucywgc2V0TG9jYXRpb25zXSA9IHVzZVN0YXRlKFtdKTtcblxuICAvLyBEZWZpbmUgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBwcm9jZXNzIHRoZSBnZW9jb2RpbmcgcmVzcG9uc2U6XG4gIHZhciBvblJlc3VsdCA9IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgIHNldExvY2F0aW9ucyhyZXN1bHQuUmVzcG9uc2UuVmlld1swXS5SZXN1bHQpO1xuICB9O1xuXG4gIC8vIEdldCBhbiBpbnN0YW5jZSBvZiB0aGUgZ2VvY29kaW5nIHNlcnZpY2U6XG4gIHZhciBnZW9jb2RlciA9IHBsYXRmb3JtLmdldEdlb2NvZGluZ1NlcnZpY2UoKTtcblxuICAvLyBDYWxsIHRoZSBnZW9jb2RlIG1ldGhvZCB3aXRoIHRoZSBnZW9jb2RpbmcgcGFyYW1ldGVycyxcbiAgLy8gdGhlIGNhbGxiYWNrIGFuZCBhbiBlcnJvciBjYWxsYmFjayBmdW5jdGlvbiAoY2FsbGVkIGlmIGFcbiAgLy8gY29tbXVuaWNhdGlvbiBlcnJvciBvY2N1cnMpOlxuICBpZiAobGFuZG1hcmspIHtcbiAgICBnZW9jb2Rlci5zZWFyY2goZ2VvQ29kZVBhcmFtcywgb25SZXN1bHQsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGFsZXJ0KGUpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICAvLyBQb2ludCB0byBhZGRyZXNzXG4gICAgZ2VvY29kZXIucmV2ZXJzZUdlb2NvZGUoZ2VvQ29kZVBhcmFtcywgb25SZXN1bHQsIGUgPT4gY29uc29sZS5sb2coZSkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEFkZHJlc3MgdG8gcG9pbnRcbiAgICBnZW9jb2Rlci5nZW9jb2RlKGdlb0NvZGVQYXJhbXMsIG9uUmVzdWx0LCBlID0+IGNvbnNvbGUubG9nKGUpKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIGxvY2F0aW9ucy5sZW5ndGggJiZcbiAgICBsb2NhdGlvbnMubWFwKGxvY2F0aW9uID0+IHtcbiAgICAgIGNvbnN0IF9sb2NhdGlvbiA9IGxvY2F0aW9uLkxvY2F0aW9uIHx8IGxvY2F0aW9uLlBsYWNlLkxvY2F0aW9uc1swXTtcbiAgICAgIGNvbnN0IGxhdCA9IF9sb2NhdGlvbi5EaXNwbGF5UG9zaXRpb24uTGF0aXR1ZGU7XG4gICAgICBjb25zdCBsbmcgPSBfbG9jYXRpb24uRGlzcGxheVBvc2l0aW9uLkxvbmdpdHVkZTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgbWFwLFxuICAgICAgICBwbGF0Zm9ybSxcbiAgICAgICAgdWksXG4gICAgICAgIGxhdCxcbiAgICAgICAgbG5nLFxuICAgICAgICBrZXk6IGxhdCxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIF9sb2NhdGlvblxuICAgICAgfTtcbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHBhcmFtcyk7XG4gICAgfSlcbiAgKTtcbn1cblxuR2VvQ29kZS5wcm9wVHlwZXMgPSB7XG4gIGdlb0NvZGVQYXJhbXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICByZXZlcnNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgbGFuZG1hcms6IFByb3BUeXBlcy5ib29sLFxuICBtYXA6IFByb3BUeXBlcy5vYmplY3QsXG4gIHBsYXRmb3JtOiBQcm9wVHlwZXMub2JqZWN0LFxuICB1aTogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuZXhwb3J0IGRlZmF1bHQgR2VvQ29kZTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IFBvbHlMaW5lIGZyb20gXCIuLi9ITWFwL29iamVjdHMvUG9seUxpbmVcIjtcbmltcG9ydCBQb2x5Z29uIGZyb20gXCIuLi9ITWFwL29iamVjdHMvUG9seWdvblwiO1xuaW1wb3J0IE1hcmtlciBmcm9tIFwiLi4vSE1hcC9vYmplY3RzL01hcmtlclwiO1xuaW1wb3J0IG1lcmdlIGZyb20gXCJsb2Rhc2gubWVyZ2VcIjtcblxuZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICByb3V0ZVBhcmFtcywgLy8gUGFyYW1zIGZvciB0aGUgcm91dGluZ1xuICAgIHBsYXRmb3JtLCAvLyByZWZlcmVuY2UgdG8gdGhlIHBsYXRmb3JtIG9iamVjdFxuICAgIG1hcCwgLy8gcmVmZXJlbmNlIHRvIHRoZSBtYXAgb2JqZWN0XG4gICAgdWksIC8vIHJlZmVyZW5jZSB0byB0aGUgdWkgb2JqZWN0XG4gICAgY2hpbGRyZW4sIC8vIGhvbGRzIHRoZSBjaGlsZHJlblxuICAgIHJlbmRlckRlZmF1bHRMaW5lLCAvLyBkZXRlcm1pbmVzIGlmIHJlbmRlckRlZmF1bHRMaW5lIHNob3VsZCBiZSB1c2VkXG4gICAgaXNvTGluZSwgLy8gY2FsY3VsYXRlIGlzb0xpbmUgb3IgZGVmYXVsdCByb3V0ZVxuICAgIGxpbmVPcHRpb25zLCAvLyBvcHRpb25zIGZvciB0aGUgbGluZSBpZiBkZWZhdWx0IGRpc3BsYXkgaXMgdHJ1ZVxuICAgIHBvbHlnb25PcHRpb25zLCAvLyBvcHRpb25zIGZvciB0aGUgcG9seWdvbiBpZiBkZWZhdWx0IGRpc3BsYXkgaXMgdHJ1ZVxuICAgIG1hcmtlck9wdGlvbnMsIC8vIG9wdGlvbnMgZm9yIHRoZSBtYXJrZXIgaWYgZGVmYXVsdCBkaXNwbGF5IGlzIHRydWVcbiAgICBpY29uIC8vIGljb24gZm9yIHRoZSBzdGFydCBhbmQgZW5kIG1hcmtlcnNcbiAgfSA9IG1lcmdlKHsgcmVuZGVyRGVmYXVsdExpbmU6IHRydWUgfSwgcHJvcHMpO1xuXG4gIGlmICghSCB8fCAhSC5tYXAgfHwgIW1hcCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkhNYXAgaGFzIHRvIGJlIGluaXRpYWxpemVkIGJlZm9yZSBhZGRpbmcgTWFwIE9iamVjdHNcIik7XG4gIH1cblxuICBpZiAoIXJvdXRlUGFyYW1zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicm91dGVQYXJhbXMgaXMgbm90IHNldFwiKTtcbiAgfVxuICBjb25zdCBbcm91dGVTaGFwZSwgc2V0Um91dGVTaGFwZV0gPSB1c2VTdGF0ZShbXSk7XG4gIGxldCBbcm91dGUsIHNldFJvdXRlXSA9IHVzZVN0YXRlKHt9KTtcbiAgbGV0IFtjb21wb25lbnQsIHNldENvbXBvbmVudF0gPSB1c2VTdGF0ZSh7fSk7XG4gIGNvbnN0IFtyZXN1bHRSZXNwb25zZSwgc2V0UmVzdWx0UmVzcG9uc2VdID0gdXNlU3RhdGUoe30pO1xuICBsZXQgW2NlbnRlciwgc2V0Q2VudGVyXSA9IHVzZVN0YXRlKHt9KTtcblxuICAvLyBEZWZpbmUgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBwcm9jZXNzIHRoZSByb3V0aW5nIHJlc3BvbnNlOlxuICBjb25zdCBvblJlc3VsdCA9IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgIHNldFJlc3VsdFJlc3BvbnNlKHJlc3VsdC5yZXNwb25zZSk7XG4gICAgbGV0IF9yb3V0ZVNoYXBlID0gW107XG4gICAgaWYgKGlzb0xpbmUgJiYgcmVzdWx0UmVzcG9uc2UuaXNvbGluZSkge1xuICAgICAgY29tcG9uZW50ID0gcmVzdWx0UmVzcG9uc2UuaXNvbGluZVswXS5jb21wb25lbnRbMF07XG4gICAgICBfcm91dGVTaGFwZSA9IGNvbXBvbmVudC5zaGFwZTtcblxuICAgICAgY29uc3QgX2NlbnRlciA9IG5ldyBILmdlby5Qb2ludChcbiAgICAgICAgcmVzdWx0UmVzcG9uc2UuY2VudGVyLmxhdGl0dWRlLFxuICAgICAgICByZXN1bHRSZXNwb25zZS5jZW50ZXIubG9uZ2l0dWRlXG4gICAgICApO1xuICAgICAgc2V0Q2VudGVyKF9jZW50ZXIpO1xuICAgICAgc2V0Q29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgfSBlbHNlIGlmICghaXNvTGluZSAmJiByZXN1bHRSZXNwb25zZS5yb3V0ZSkge1xuICAgICAgLy8gUGljayB0aGUgZmlyc3Qgcm91dGUgZnJvbSB0aGUgcmVzcG9uc2U6XG4gICAgICByb3V0ZSA9IHJlc3VsdFJlc3BvbnNlLnJvdXRlWzBdO1xuICAgICAgLy8gUGljayB0aGUgcm91dGUncyBzaGFwZTpcbiAgICAgIF9yb3V0ZVNoYXBlID0gcm91dGUuc2hhcGU7XG4gICAgICBjb25zb2xlLmxvZyhfcm91dGVTaGFwZSk7XG4gICAgICBfcm91dGVTaGFwZSA9IF9yb3V0ZVNoYXBlLm1hcChwb2ludCA9PiB7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHBvaW50LnNwbGl0KFwiLFwiKTtcbiAgICAgICAgcmV0dXJuIHsgbGF0OiBjb29yZHNbMF0sIGxuZzogY29vcmRzWzFdIH07XG4gICAgICB9KTtcbiAgICAgIHNldFJvdXRlKHJvdXRlKTtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coX3JvdXRlU2hhcGUpO1xuICAgIC8vIFVwZGF0ZSBsb2NhbCBzdGF0ZVxuICAgIHNldFJvdXRlU2hhcGUoX3JvdXRlU2hhcGUpO1xuICB9O1xuXG4gIC8vIEdldCBhbiBpbnN0YW5jZSBvZiB0aGUgcm91dGluZyBzZXJ2aWNlOlxuICBjb25zdCByb3V0ZXIgPSBwbGF0Zm9ybS5nZXRSb3V0aW5nU2VydmljZSgpO1xuXG4gIGlmIChpc29MaW5lKSB7XG4gICAgLy8gQ2FsbCB0aGUgUm91dGluZyBBUEkgdG8gY2FsY3VsYXRlIGFuIGlzb2xpbmU6XG4gICAgLy8gcm91dGVyLmNhbGN1bGF0ZUlzb2xpbmUocm91dGVQYXJhbXMsIG9uUmVzdWx0LCBlID0+IGNvbnNvbGUubG9nKGUubWVzc2FnZSkpO1xuICB9IGVsc2Uge1xuICAgIC8vIENhbGwgY2FsY3VsYXRlUm91dGUoKSB3aXRoIHRoZSByb3V0aW5nIHBhcmFtZXRlcnMsXG4gICAgLy8gdGhlIGNhbGxiYWNrIGFuZCBhbiBlcnJvciBjYWxsYmFjayBmdW5jdGlvbiAoY2FsbGVkIGlmIGFcbiAgICAvLyBjb21tdW5pY2F0aW9uIGVycm9yIG9jY3Vycyk6XG4gICAgLy8gcm91dGVyLmNhbGN1bGF0ZVJvdXRlKHJvdXRlUGFyYW1zLCBvblJlc3VsdCwgZSA9PiBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpKTtcbiAgfVxuXG4gIGNvbnN0IHJlbmRlclBvbHlnb24gPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPFBvbHlnb25cbiAgICAgICAgICBwb2ludHM9e3JvdXRlU2hhcGV9XG4gICAgICAgICAgb3B0aW9ucz17cG9seWdvbk9wdGlvbnN9XG4gICAgICAgICAgc2V0Vmlld0JvdW5kcz17dHJ1ZX1cbiAgICAgICAgICBtYXA9e21hcH1cbiAgICAgICAgICBwbGF0Zm9ybT17cGxhdGZvcm19XG4gICAgICAgIC8+XG4gICAgICAgIDxNYXJrZXJcbiAgICAgICAgICBjb29yZHM9e2NlbnRlcn1cbiAgICAgICAgICBtYXA9e21hcH1cbiAgICAgICAgICBwbGF0Zm9ybT17cGxhdGZvcm19XG4gICAgICAgICAgaWNvbj17aWNvbn1cbiAgICAgICAgICBvcHRpb25zPXttYXJrZXJPcHRpb25zfVxuICAgICAgICAgIHNldFZpZXdCb3VuZHM9e2ZhbHNlfVxuICAgICAgICAvPlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9O1xuXG4gIC8vIFJlbmRlcnMgUG9seUxpbmUgYW5kIE1hcmtlcnNcbiAgY29uc3QgcmVuZGVyUG9seUxpbmUgPSAoKSA9PiB7XG4gICAgLy8gUmV0cmlldmUgdGhlIG1hcHBlZCBwb3NpdGlvbnMgb2YgdGhlIHJlcXVlc3RlZCB3YXlwb2ludHM6XG4gICAgY29uc3Qgc3RhcnRQb2ludCA9IHJvdXRlLndheXBvaW50WzBdLm1hcHBlZFBvc2l0aW9uO1xuICAgIGNvbnN0IGVuZFBvaW50ID0gcm91dGUud2F5cG9pbnRbMV0ubWFwcGVkUG9zaXRpb247XG5cbiAgICAvLyBDcmVhdGUgYSBtYXJrZXIgZm9yIHRoZSBzdGFydCBwb2ludDpcbiAgICBjb25zdCBzdGFydE1hcmtlciA9IHsgbGF0OiBzdGFydFBvaW50LmxhdGl0dWRlLCBsbmc6IHN0YXJ0UG9pbnQubG9uZ2l0dWRlIH07XG4gICAgLy8gQ3JlYXRlIGEgbWFya2VyIGZvciB0aGUgZW5kIHBvaW50OlxuICAgIGNvbnN0IGVuZE1hcmtlciA9IHsgbGF0OiBlbmRQb2ludC5sYXRpdHVkZSwgbG5nOiBlbmRQb2ludC5sb25naXR1ZGUgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxQb2x5TGluZVxuICAgICAgICAgIHBvaW50cz17cm91dGVTaGFwZX1cbiAgICAgICAgICBtYXA9e21hcH1cbiAgICAgICAgICBvcHRpb25zPXtsaW5lT3B0aW9uc31cbiAgICAgICAgICBzZXRWaWV3Qm91bmRzPXt0cnVlfVxuICAgICAgICAvPlxuICAgICAgICA8TWFya2VyXG4gICAgICAgICAgY29vcmRzPXtzdGFydE1hcmtlcn1cbiAgICAgICAgICBtYXA9e21hcH1cbiAgICAgICAgICBwbGF0Zm9ybT17cGxhdGZvcm19XG4gICAgICAgICAgaWNvbj17aWNvbn1cbiAgICAgICAgICBvcHRpb25zPXttYXJrZXJPcHRpb25zfVxuICAgICAgICAgIHNldFZpZXdCb3VuZHM9e2ZhbHNlfVxuICAgICAgICAvPlxuICAgICAgICA8TWFya2VyXG4gICAgICAgICAgY29vcmRzPXtlbmRNYXJrZXJ9XG4gICAgICAgICAgbWFwPXttYXB9XG4gICAgICAgICAgcGxhdGZvcm09e3BsYXRmb3JtfVxuICAgICAgICAgIGljb249e2ljb259XG4gICAgICAgICAgb3B0aW9ucz17bWFya2VyT3B0aW9uc31cbiAgICAgICAgICBzZXRWaWV3Qm91bmRzPXtmYWxzZX1cbiAgICAgICAgLz5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJEZWZhdWx0ID0gKCkgPT4gKGlzb0xpbmUgPyByZW5kZXJQb2x5Z29uKCkgOiByZW5kZXJQb2x5TGluZSgpKTtcbiAgLy8gUmVuZGVycyB0aGUgY2hpbGQgZm9yIGFkZGl0aW9uYWwgbWFuaXB1bGF0aW9uc1xuICBjb25zdCByZW5kZXJDaGlsZHJlbiA9ICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBtYXAsXG4gICAgICBwbGF0Zm9ybSxcbiAgICAgIHVpLFxuICAgICAgcm91dGUsXG4gICAgICByb3V0ZVNoYXBlLFxuICAgICAgY2VudGVyLFxuICAgICAgY29tcG9uZW50XG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBwYXJhbXMpO1xuICB9O1xuICBjb25zdCByZW5kZXJSZXN1bHQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHJlbmRlckRlZmF1bHRMaW5lID8gcmVuZGVyRGVmYXVsdCgpIDogcmVuZGVyQ2hpbGRyZW4oKTtcbiAgfTtcbiAgcmV0dXJuIChyb3V0ZS53YXlwb2ludCB8fCBjb21wb25lbnQuc2hhcGUpICYmIHJvdXRlU2hhcGUubGVuZ3RoXG4gICAgPyByZW5kZXJSZXN1bHQoKVxuICAgIDogbnVsbDtcbn1cblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgcm91dGVQYXJhbXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGxpbmVPcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICBtYXJrZXJPcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIHJlbmRlckRlZmF1bHRMaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNvTGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIGljb246IFByb3BUeXBlcy5hbnksXG4gIG1hcDogUHJvcFR5cGVzLm9iamVjdCxcbiAgcGxhdGZvcm06IFByb3BUeXBlcy5vYmplY3QsXG4gIHVpOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgZG90UHJvcCBmcm9tIFwiZG90LXByb3BcIjtcbmltcG9ydCB2YWxpZGF0ZU1hcFR5cGUgZnJvbSBcIi4uLy4uL2xpYnMvdmFsaWRhdGVNYXBUeXBlXCI7XG5cbmZ1bmN0aW9uIFRyYWZmaWMocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHBsYXRmb3JtLFxuICAgIG1hcCxcbiAgICBtYXBMYXllclR5cGUsXG4gICAgX19vcHRpb25zOiB7IG1hcFR5cGVzIH1cbiAgfSA9IHByb3BzO1xuICBpZiAoIUggfHwgIUgubWFwIHx8ICFtYXApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJITWFwIGhhcyB0byBiZSBpbml0aWFsaXplZCBiZWZvcmUgYWRkaW5nIE1hcCBPYmplY3RzXCIpO1xuICB9XG4gIHZhbGlkYXRlTWFwVHlwZShtYXBUeXBlcywgbWFwTGF5ZXJUeXBlKTtcbiAgY29uc3QgZGVmYXVsdExheWVycyA9IHBsYXRmb3JtLmNyZWF0ZURlZmF1bHRMYXllcnMoKTtcbiAgbWFwLmFkZExheWVyKGRvdFByb3AuZ2V0KGRlZmF1bHRMYXllcnMsIG1hcExheWVyVHlwZSkpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuVHJhZmZpYy5wcm9wVHlwZXMgPSB7XG4gIHBsYXRmb3JtOiBQcm9wVHlwZXMub2JqZWN0LFxuICBfX29wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1hcExheWVyVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBtYXA6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyYWZmaWM7XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHJlc3VsdCA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0LCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcImxvZGFzaC5kZWJvdW5jZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1lcmdlIGZyb20gXCJsb2Rhc2gubWVyZ2VcIjtcblxuY29uc3QgaGFuZGxlSW5wdXRDaGFuZ2UgPSBkZWJvdW5jZSgodmFsdWUsIGZuKSA9PiBmbih2YWx1ZSksIDUwMCk7XG5jb25zdCBfc3R5bGUgPSB7XG4gIG1hcmdpbjogMCxcbiAgZm9udEZhbWlseTogXCJpbmhlcml0XCIsXG4gIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgd2lkdGg6IFwiMTAwJVwiLFxuICBwYWRkaW5nOiBcIi4zNzVyZW0gLjc1cmVtXCIsXG4gIGZvbnRTaXplOiBcIjFyZW1cIixcbiAgbGluZUhlaWdodDogMS41LFxuICBjb2xvcjogXCIjNDk1MDU3XCIsXG4gIGJhY2tncm91bmRDb2xvcjogXCIjZmZmXCIsXG4gIGJhY2tncm91bmRDbGlwOiBcInBhZGRpbmctYm94XCIsXG4gIGJvcmRlcjogXCIxcHggc29saWQgI2NlZDRkYVwiLFxuICBib3JkZXJSYWRpdXM6IFwiLjI1cmVtXCIsXG4gIHRyYW5zaXRpb246IFwiYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgLjE1cyBlYXNlLWluLW91dFwiXG59O1xuZnVuY3Rpb24gUGxhY2VJbnB1dCh7IGdldFZhbHVlLCBzdHlsZSwgY2xhc3NOYW1lIH0pIHtcbiAgc3R5bGUgPSBtZXJnZShfc3R5bGUsIHN0eWxlKTtcbiAgcmV0dXJuIChcbiAgICA8aW5wdXRcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBhIHZhbHVlXCJcbiAgICAgIG9uQ2hhbmdlPXtlID0+IGhhbmRsZUlucHV0Q2hhbmdlKGUudGFyZ2V0LnZhbHVlLCBnZXRWYWx1ZSl9XG4gICAgLz5cbiAgKTtcbn1cblxuaGFuZGxlSW5wdXRDaGFuZ2UucHJvcFR5cGVzID0ge1xuICBnZXRWYWx1ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGxhY2VJbnB1dDtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlN0eWxlU2hlZXQgPSBTdHlsZVNoZWV0O1xuXG52YXIgX29iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbi8qIFxuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zIFxuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXMgXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuLSAncG9seWZpbGxzJyBvbiBzZXJ2ZXIgc2lkZSBcblxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICdnbGFtb3IvbGliL3NoZWV0J1xubGV0IHN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCgpXG5cbnN0eWxlU2hlZXQuaW5qZWN0KCkgXG4tICdpbmplY3RzJyB0aGUgc3R5bGVzaGVldCBpbnRvIHRoZSBwYWdlIChvciBpbnRvIG1lbW9yeSBpZiBvbiBzZXJ2ZXIpXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9JykgXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0IFxuXG5zdHlsZVNoZWV0LmZsdXNoKCkgXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG5cbiovXG5cbmZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH1cblxuICAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94IFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpc0RldiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIHx8ICFwcm9jZXNzLmVudi5OT0RFX0VOVjsgLy8oeCA9PiAoeCA9PT0gJ2RldmVsb3BtZW50JykgfHwgIXgpKHByb2Nlc3MuZW52Lk5PREVfRU5WKVxudmFyIGlzVGVzdCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCc7XG5cbnZhciBvbGRJRSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gJzwhLS1baWYgbHQgSUUgMTBdPjxpPjwvaT48IVtlbmRpZl0tLT4nO1xuICAgIHJldHVybiBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2knKS5sZW5ndGggPT09IDE7XG4gIH1cbn0oKTtcblxuZnVuY3Rpb24gbWFrZVN0eWxlVGFnKCkge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnR5cGUgPSAndGV4dC9jc3MnO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLWdsYW1vcicsICcnKTtcbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0pLmFwcGVuZENoaWxkKHRhZyk7XG4gIHJldHVybiB0YWc7XG59XG5cbmZ1bmN0aW9uIFN0eWxlU2hlZXQoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYkc3BlZWR5ID0gX3JlZi5zcGVlZHksXG4gICAgICBzcGVlZHkgPSBfcmVmJHNwZWVkeSA9PT0gdW5kZWZpbmVkID8gIWlzRGV2ICYmICFpc1Rlc3QgOiBfcmVmJHNwZWVkeSxcbiAgICAgIF9yZWYkbWF4TGVuZ3RoID0gX3JlZi5tYXhMZW5ndGgsXG4gICAgICBtYXhMZW5ndGggPSBfcmVmJG1heExlbmd0aCA9PT0gdW5kZWZpbmVkID8gaXNCcm93c2VyICYmIG9sZElFID8gNDAwMCA6IDY1MDAwIDogX3JlZiRtYXhMZW5ndGg7XG5cbiAgdGhpcy5pc1NwZWVkeSA9IHNwZWVkeTsgLy8gdGhlIGJpZyBkcmF3YmFjayBoZXJlIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuICB0aGlzLnNoZWV0ID0gdW5kZWZpbmVkO1xuICB0aGlzLnRhZ3MgPSBbXTtcbiAgdGhpcy5tYXhMZW5ndGggPSBtYXhMZW5ndGg7XG4gIHRoaXMuY3RyID0gMDtcbn1cblxuKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKFN0eWxlU2hlZXQucHJvdG90eXBlLCB7XG4gIGdldFNoZWV0OiBmdW5jdGlvbiBnZXRTaGVldCgpIHtcbiAgICByZXR1cm4gc2hlZXRGb3JUYWcobGFzdCh0aGlzLnRhZ3MpKTtcbiAgfSxcbiAgaW5qZWN0OiBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLmluamVjdGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscmVhZHkgaW5qZWN0ZWQgc3R5bGVzaGVldCEnKTtcbiAgICB9XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgdGhpcy50YWdzWzBdID0gbWFrZVN0eWxlVGFnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNlcnZlciBzaWRlICdwb2x5ZmlsbCcuIGp1c3QgZW5vdWdoIGJlaGF2aW9yIHRvIGJlIHVzZWZ1bC5cbiAgICAgIHRoaXMuc2hlZXQgPSB7XG4gICAgICAgIGNzc1J1bGVzOiBbXSxcbiAgICAgICAgaW5zZXJ0UnVsZTogZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgICAgICAgLy8gZW5vdWdoICdzcGVjIGNvbXBsaWFuY2UnIHRvIGJlIGFibGUgdG8gZXh0cmFjdCB0aGUgcnVsZXMgbGF0ZXIgIFxuICAgICAgICAgIC8vIGluIG90aGVyIHdvcmRzLCBqdXN0IHRoZSBjc3NUZXh0IGZpZWxkIFxuICAgICAgICAgIF90aGlzLnNoZWV0LmNzc1J1bGVzLnB1c2goeyBjc3NUZXh0OiBydWxlIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLmluamVjdGVkID0gdHJ1ZTtcbiAgfSxcbiAgc3BlZWR5OiBmdW5jdGlvbiBzcGVlZHkoYm9vbCkge1xuICAgIGlmICh0aGlzLmN0ciAhPT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgY2hhbmdlIHNwZWVkeSBtb2RlIGFmdGVyIGluc2VydGluZyBhbnkgcnVsZSB0byBzaGVldC4gRWl0aGVyIGNhbGwgc3BlZWR5KCcgKyBib29sICsgJykgZWFybGllciBpbiB5b3VyIGFwcCwgb3IgY2FsbCBmbHVzaCgpIGJlZm9yZSBzcGVlZHkoJyArIGJvb2wgKyAnKScpO1xuICAgIH1cbiAgICB0aGlzLmlzU3BlZWR5ID0gISFib29sO1xuICB9LFxuICBfaW5zZXJ0OiBmdW5jdGlvbiBfaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGlzIHdlaXJkbmVzcyBmb3IgcGVyZiwgYW5kIGNocm9tZSdzIHdlaXJkIGJ1ZyBcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDAwNzk5Mi9jaHJvbWUtc3VkZGVubHktc3RvcHBlZC1hY2NlcHRpbmctaW5zZXJ0cnVsZVxuICAgIHRyeSB7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLmdldFNoZWV0KCk7XG4gICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHJ1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSA/IDAgOiBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChpc0Rldikge1xuICAgICAgICAvLyBtaWdodCBuZWVkIGJldGVyIGR4IGZvciB0aGlzIFxuICAgICAgICBjb25zb2xlLndhcm4oJ3dob29wcywgaWxsZWdhbCBydWxlIGluc2VydGVkJywgcnVsZSk7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG5cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzIFxuICAgICAgaWYgKHRoaXMuaXNTcGVlZHkgJiYgdGhpcy5nZXRTaGVldCgpLmluc2VydFJ1bGUpIHtcbiAgICAgICAgdGhpcy5faW5zZXJ0KHJ1bGUpO1xuICAgICAgfVxuICAgICAgLy8gbW9yZSBicm93c2VyIHdlaXJkbmVzcy4gSSBkb24ndCBldmVuIGtub3cgICAgXG4gICAgICAvLyBlbHNlIGlmKHRoaXMudGFncy5sZW5ndGggPiAwICYmIHRoaXMudGFnczo6bGFzdCgpLnN0eWxlU2hlZXQpIHsgICAgICBcbiAgICAgIC8vICAgdGhpcy50YWdzOjpsYXN0KCkuc3R5bGVTaGVldC5jc3NUZXh0Kz0gcnVsZVxuICAgICAgLy8gfVxuICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHJ1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSkge1xuICAgICAgICAgICAgdmFyIHRhZyA9IGxhc3QodGhpcy50YWdzKTtcbiAgICAgICAgICAgIHRhZy5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSksIHRhZy5maXJzdENoaWxkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGFzdCh0aGlzLnRhZ3MpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2VydmVyIHNpZGUgaXMgcHJldHR5IHNpbXBsZSAgICAgICAgIFxuICAgICAgdGhpcy5zaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHJ1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSA/IDAgOiB0aGlzLnNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgdGhpcy5jdHIrKztcbiAgICBpZiAoaXNCcm93c2VyICYmIHRoaXMuY3RyICUgdGhpcy5tYXhMZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMudGFncy5wdXNoKG1ha2VTdHlsZVRhZygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3RyIC0gMTtcbiAgfSxcblxuICAvLyBjb21tZW50aW5nIHRoaXMgb3V0IHRpbGwgd2UgZGVjaWRlIG9uIHYzJ3MgZGVjaXNpb24gXG4gIC8vIF9yZXBsYWNlKGluZGV4LCBydWxlKSB7XG4gIC8vICAgLy8gdGhpcyB3ZWlyZG5lc3MgZm9yIHBlcmYsIGFuZCBjaHJvbWUncyB3ZWlyZCBidWcgXG4gIC8vICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjAwMDc5OTIvY2hyb21lLXN1ZGRlbmx5LXN0b3BwZWQtYWNjZXB0aW5nLWluc2VydHJ1bGVcbiAgLy8gICB0cnkgeyAgXG4gIC8vICAgICBsZXQgc2hlZXQgPSB0aGlzLmdldFNoZWV0KCkgICAgICAgIFxuICAvLyAgICAgc2hlZXQuZGVsZXRlUnVsZShpbmRleCkgLy8gdG9kbyAtIGNvcnJlY3QgaW5kZXggaGVyZSAgICAgXG4gIC8vICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KVxuICAvLyAgIH1cbiAgLy8gICBjYXRjaChlKSB7XG4gIC8vICAgICBpZihpc0Rldikge1xuICAvLyAgICAgICAvLyBtaWdodCBuZWVkIGJldGVyIGR4IGZvciB0aGlzIFxuICAvLyAgICAgICBjb25zb2xlLndhcm4oJ3dob29wcywgcHJvYmxlbSByZXBsYWNpbmcgcnVsZScsIHJ1bGUpIC8vZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gIC8vICAgICB9ICAgICAgICAgIFxuICAvLyAgIH0gICAgICAgICAgXG5cbiAgLy8gfVxuICAvLyByZXBsYWNlKGluZGV4LCBydWxlKSB7XG4gIC8vICAgaWYoaXNCcm93c2VyKSB7XG4gIC8vICAgICBpZih0aGlzLmlzU3BlZWR5ICYmIHRoaXMuZ2V0U2hlZXQoKS5pbnNlcnRSdWxlKSB7XG4gIC8vICAgICAgIHRoaXMuX3JlcGxhY2UoaW5kZXgsIHJ1bGUpXG4gIC8vICAgICB9XG4gIC8vICAgICBlbHNlIHtcbiAgLy8gICAgICAgbGV0IF9zbG90ID0gTWF0aC5mbG9vcigoaW5kZXggICsgdGhpcy5tYXhMZW5ndGgpIC8gdGhpcy5tYXhMZW5ndGgpIC0gMSAgICAgICAgXG4gIC8vICAgICAgIGxldCBfaW5kZXggPSAoaW5kZXggJSB0aGlzLm1heExlbmd0aCkgKyAxXG4gIC8vICAgICAgIGxldCB0YWcgPSB0aGlzLnRhZ3NbX3Nsb3RdXG4gIC8vICAgICAgIHRhZy5yZXBsYWNlQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSksIHRhZy5jaGlsZE5vZGVzW19pbmRleF0pXG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIGVsc2Uge1xuICAvLyAgICAgbGV0IHJ1bGVzID0gdGhpcy5zaGVldC5jc3NSdWxlc1xuICAvLyAgICAgdGhpcy5zaGVldC5jc3NSdWxlcyA9IFsgLi4ucnVsZXMuc2xpY2UoMCwgaW5kZXgpLCB7IGNzc1RleHQ6IHJ1bGUgfSwgLi4ucnVsZXMuc2xpY2UoaW5kZXggKyAxKSBdXG4gIC8vICAgfVxuICAvLyB9XG4gIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShpbmRleCkge1xuICAgIC8vIHdlIGluc2VydCBhIGJsYW5rIHJ1bGUgd2hlbiAnZGVsZXRpbmcnIHNvIHByZXZpb3VzbHkgcmV0dXJuZWQgaW5kZXhlcyByZW1haW4gc3RhYmxlXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZShpbmRleCwgJycpO1xuICB9LFxuICBmbHVzaDogZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy50YWdzID0gW107XG4gICAgICB0aGlzLnNoZWV0ID0gbnVsbDtcbiAgICAgIHRoaXMuY3RyID0gMDtcbiAgICAgIC8vIHRvZG8gLSBsb29rIGZvciByZW1uYW50cyBpbiBkb2N1bWVudC5zdHlsZVNoZWV0c1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzaW1wbGVyIG9uIHNlcnZlciBcbiAgICAgIHRoaXMuc2hlZXQuY3NzUnVsZXMgPSBbXTtcbiAgICB9XG4gICAgdGhpcy5pbmplY3RlZCA9IGZhbHNlO1xuICB9LFxuICBydWxlczogZnVuY3Rpb24gcnVsZXMoKSB7XG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnNoZWV0LmNzc1J1bGVzO1xuICAgIH1cbiAgICB2YXIgYXJyID0gW107XG4gICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UuYXBwbHkoYXJyLCBbYXJyLmxlbmd0aCwgMF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShBcnJheS5mcm9tKHNoZWV0Rm9yVGFnKHRhZykuY3NzUnVsZXMpKSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBhcnI7XG4gIH1cbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF9oeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKF8sIGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhbWVsaXplID0gcmVxdWlyZSgnLi9jYW1lbGl6ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tb3otdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJNb3pUcmFuc2l0aW9uXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1zLXRyYW5zaXRpb24nKVxuICogICA8IFwibXNUcmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG4gKiAoaHR0cDovL3d3dy5hbmRpc21pdGguY29tL2Jsb2cvMjAxMi8wMi9tb2Rlcm5penItcHJlZml4ZWQvKSwgYW4gYC1tc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGNhbWVsaXplKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZVN0eWxlTmFtZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlcbiAqL1xuXG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqL1xuXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG4gIGJvcmRlckltYWdlT3V0c2V0OiB0cnVlLFxuICBib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuICBib3JkZXJJbWFnZVdpZHRoOiB0cnVlLFxuICBib3hGbGV4OiB0cnVlLFxuICBib3hGbGV4R3JvdXA6IHRydWUsXG4gIGJveE9yZGluYWxHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4UG9zaXRpdmU6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZsZXhOZWdhdGl2ZTogdHJ1ZSxcbiAgZmxleE9yZGVyOiB0cnVlLFxuICBncmlkUm93OiB0cnVlLFxuICBncmlkUm93U3RhcnQ6IHRydWUsXG4gIGdyaWRSb3dFbmQ6IHRydWUsXG4gIGdyaWRDb2x1bW46IHRydWUsXG4gIGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcbiAgZ3JpZENvbHVtbkVuZDogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaGFycmF5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBzdHlsZSBuYW1lLCBlZzogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAgICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gICAqL1xufTtmdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcbiAgcmV0dXJuIHByZWZpeCArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107XG5cbi8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuT2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG4gKiBkb2Vzbid0IGxpa2UgZG9pbmcgdGhhdCB3aXRoIHNob3J0aGFuZCBwcm9wZXJ0aWVzIHNvIGZvciB0aGUgcHJvcGVydGllcyB0aGF0XG4gKiBJRTggYnJlYWtzIG9uLCB3aGljaCBhcmUgbGlzdGVkIGhlcmUsIHdlIGluc3RlYWQgdW5zZXQgZWFjaCBvZiB0aGVcbiAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuICogVGhlIDQtdmFsdWUgJ2Nsb2NrJyBwcm9wZXJ0aWVzIGxpa2UgbWFyZ2luLCBwYWRkaW5nLCBib3JkZXItd2lkdGggc2VlbSB0b1xuICogYmVoYXZlIHdpdGhvdXQgYW55IHByb2JsZW1zLiBDdXJpb3VzbHksIGxpc3Qtc3R5bGUgd29ya3MgdG9vIHdpdGhvdXQgYW55XG4gKiBzcGVjaWFsIHByb2RkaW5nLlxuICovXG52YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFja2dyb3VuZEF0dGFjaG1lbnQ6IHRydWUsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0cnVlLFxuICAgIGJhY2tncm91bmRJbWFnZTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IHRydWUsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogdHJ1ZVxuICB9LFxuICBiYWNrZ3JvdW5kUG9zaXRpb246IHtcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IHRydWVcbiAgfSxcbiAgYm9yZGVyOiB7XG4gICAgYm9yZGVyV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgYm9yZGVyQm90dG9tV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIGJvcmRlckxlZnRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyTGVmdENvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgYm9yZGVyUmlnaHRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJSaWdodFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgYm9yZGVyVG9wV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyVG9wU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyVG9wQ29sb3I6IHRydWVcbiAgfSxcbiAgZm9udDoge1xuICAgIGZvbnRTdHlsZTogdHJ1ZSxcbiAgICBmb250VmFyaWFudDogdHJ1ZSxcbiAgICBmb250V2VpZ2h0OiB0cnVlLFxuICAgIGZvbnRTaXplOiB0cnVlLFxuICAgIGxpbmVIZWlnaHQ6IHRydWUsXG4gICAgZm9udEZhbWlseTogdHJ1ZVxuICB9LFxuICBvdXRsaW5lOiB7XG4gICAgb3V0bGluZVdpZHRoOiB0cnVlLFxuICAgIG91dGxpbmVTdHlsZTogdHJ1ZSxcbiAgICBvdXRsaW5lQ29sb3I6IHRydWVcbiAgfVxufTtcblxudmFyIENTU1Byb3BlcnR5ID0ge1xuICBpc1VuaXRsZXNzTnVtYmVyOiBpc1VuaXRsZXNzTnVtYmVyLFxuICBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnM6IHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ1NTUHJvcGVydHk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZzsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfQ1NTUHJvcGVydHkgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5Jyk7XG5cbnZhciBfQ1NTUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ1NTUHJvcGVydHkpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRhbmdlcm91c1N0eWxlVmFsdWVcbiAqL1xuXG52YXIgaXNVbml0bGVzc051bWJlciA9IF9DU1NQcm9wZXJ0eTIuZGVmYXVsdC5pc1VuaXRsZXNzTnVtYmVyO1xudmFyIHN0eWxlV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgaW50byB0aGUgcHJvcGVyIGNzcyB3cml0YWJsZSB2YWx1ZS4gVGhlIHN0eWxlIG5hbWUgYG5hbWVgXG4gKiBzaG91bGQgYmUgbG9naWNhbCAobm8gaHlwaGVucyksIGFzIHNwZWNpZmllZFxuICogaW4gYENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXJgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENTUyBwcm9wZXJ0eSBuYW1lIHN1Y2ggYXMgYHRvcE1hcmdpbmAuXG4gKiBAcGFyYW0geyp9IHZhbHVlIENTUyBwcm9wZXJ0eSB2YWx1ZSBzdWNoIGFzIGAxMHB4YC5cbiAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGNvbXBvbmVudFxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlLCBjb21wb25lbnQpIHtcbiAgLy8gTm90ZSB0aGF0IHdlJ3ZlIHJlbW92ZWQgZXNjYXBlVGV4dEZvckJyb3dzZXIoKSBjYWxscyBoZXJlIHNpbmNlIHRoZVxuICAvLyB3aG9sZSBzdHJpbmcgd2lsbCBiZSBlc2NhcGVkIHdoZW4gdGhlIGF0dHJpYnV0ZSBpcyBpbmplY3RlZCBpbnRvXG4gIC8vIHRoZSBtYXJrdXAuIElmIHlvdSBwcm92aWRlIHVuc2FmZSB1c2VyIGRhdGEgaGVyZSB0aGV5IGNhbiBpbmplY3RcbiAgLy8gYXJiaXRyYXJ5IENTUyB3aGljaCBtYXkgYmUgcHJvYmxlbWF0aWMgKEkgY291bGRuJ3QgcmVwcm8gdGhpcyk6XG4gIC8vIGh0dHBzOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvWFNTX0ZpbHRlcl9FdmFzaW9uX0NoZWF0X1NoZWV0XG4gIC8vIGh0dHA6Ly93d3cudGhlc3Bhbm5lci5jby51ay8yMDA3LzExLzI2L3VsdGltYXRlLXhzcy1jc3MtaW5qZWN0aW9uL1xuICAvLyBUaGlzIGlzIG5vdCBhbiBYU1MgaG9sZSBidXQgaW5zdGVhZCBhIHBvdGVudGlhbCBDU1MgaW5qZWN0aW9uIGlzc3VlXG4gIC8vIHdoaWNoIGhhcyBsZWFkIHRvIGEgZ3JlYXRlciBkaXNjdXNzaW9uIGFib3V0IGhvdyB3ZSdyZSBnb2luZyB0b1xuICAvLyB0cnVzdCBVUkxzIG1vdmluZyBmb3J3YXJkLiBTZWUgIzIxMTU5MDFcblxuICB2YXIgaXNFbXB0eSA9IHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnO1xuICBpZiAoaXNFbXB0eSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBpc05vbk51bWVyaWMgPSBpc05hTih2YWx1ZSk7XG4gIGlmIChpc05vbk51bWVyaWMgfHwgdmFsdWUgPT09IDAgfHwgaXNVbml0bGVzc051bWJlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBpc1VuaXRsZXNzTnVtYmVyW25hbWVdKSB7XG4gICAgcmV0dXJuICcnICsgdmFsdWU7IC8vIGNhc3QgdG8gc3RyaW5nXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBBbGxvdyAnMCcgdG8gcGFzcyB0aHJvdWdoIHdpdGhvdXQgd2FybmluZy4gMCBpcyBhbHJlYWR5IHNwZWNpYWwgYW5kXG4gICAgICAvLyBkb2Vzbid0IHJlcXVpcmUgdW5pdHMsIHNvIHdlIGRvbid0IG5lZWQgdG8gd2FybiBhYm91dCBpdC5cbiAgICAgIGlmIChjb21wb25lbnQgJiYgdmFsdWUgIT09ICcwJykge1xuICAgICAgICB2YXIgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgdmFyIG93bmVyTmFtZSA9IG93bmVyID8gb3duZXIuZ2V0TmFtZSgpIDogbnVsbDtcbiAgICAgICAgaWYgKG93bmVyTmFtZSAmJiAhc3R5bGVXYXJuaW5nc1tvd25lck5hbWVdKSB7XG4gICAgICAgICAgc3R5bGVXYXJuaW5nc1tvd25lck5hbWVdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICAgICAgICBpZiAob3duZXJOYW1lKSB7XG4gICAgICAgICAgdmFyIHdhcm5pbmdzID0gc3R5bGVXYXJuaW5nc1tvd25lck5hbWVdO1xuICAgICAgICAgIHdhcm5lZCA9IHdhcm5pbmdzW25hbWVdO1xuICAgICAgICAgIGlmICghd2FybmVkKSB7XG4gICAgICAgICAgICB3YXJuaW5nc1tuYW1lXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghd2FybmVkKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdhIGAlc2AgdGFnIChvd25lcjogYCVzYCkgd2FzIHBhc3NlZCBhIG51bWVyaWMgc3RyaW5nIHZhbHVlICcgKyAnZm9yIENTUyBwcm9wZXJ0eSBgJXNgICh2YWx1ZTogYCVzYCkgd2hpY2ggd2lsbCBiZSB0cmVhdGVkICcgKyAnYXMgYSB1bml0bGVzcyBudW1iZXIgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdC4nLCBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50LnR5cGUsIG93bmVyTmFtZSB8fCAndW5rbm93bicsIG5hbWUsIHZhbHVlKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgfVxuICByZXR1cm4gdmFsdWUgKyAncHgnO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBkYW5nZXJvdXNTdHlsZVZhbHVlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoeXBoZW5hdGUgPSByZXF1aXJlKCcuL2h5cGhlbmF0ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICovXG5cbmZ1bmN0aW9uIG1lbW9pemVTdHJpbmdPbmx5KGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIGlmICghY2FjaGUuaGFzT3duUHJvcGVydHkoc3RyaW5nKSkge1xuICAgICAgY2FjaGVbc3RyaW5nXSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW3N0cmluZ107XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZVN0cmluZ09ubHk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wcm9jZXNzU3R5bGVOYW1lID0gdW5kZWZpbmVkO1xuZXhwb3J0cy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMgPSBjcmVhdGVNYXJrdXBGb3JTdHlsZXM7XG5cbnZhciBfY2FtZWxpemVTdHlsZU5hbWUgPSByZXF1aXJlKCdmYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZScpO1xuXG52YXIgX2NhbWVsaXplU3R5bGVOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbWVsaXplU3R5bGVOYW1lKTtcblxudmFyIF9kYW5nZXJvdXNTdHlsZVZhbHVlID0gcmVxdWlyZSgnLi9kYW5nZXJvdXNTdHlsZVZhbHVlJyk7XG5cbnZhciBfZGFuZ2Vyb3VzU3R5bGVWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kYW5nZXJvdXNTdHlsZVZhbHVlKTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUgPSByZXF1aXJlKCdmYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUnKTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlU3R5bGVOYW1lKTtcblxudmFyIF9tZW1vaXplU3RyaW5nT25seSA9IHJlcXVpcmUoJ2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5Jyk7XG5cbnZhciBfbWVtb2l6ZVN0cmluZ09ubHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVtb2l6ZVN0cmluZ09ubHkpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBleHBvcnRzLnByb2Nlc3NTdHlsZU5hbWUgPSAoMCwgX21lbW9pemVTdHJpbmdPbmx5Mi5kZWZhdWx0KShfaHlwaGVuYXRlU3R5bGVOYW1lMi5kZWZhdWx0KTsgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHByb3ZpZGVzTW9kdWxlIENTU1Byb3BlcnR5T3BlcmF0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vICdtc1RyYW5zZm9ybScgaXMgY29ycmVjdCwgYnV0IHRoZSBvdGhlciBwcmVmaXhlcyBzaG91bGQgYmUgY2FwaXRhbGl6ZWRcbiAgdmFyIGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybiA9IC9eKD86d2Via2l0fG1venxvKVtBLVpdLztcblxuICAvLyBzdHlsZSB2YWx1ZXMgc2hvdWxkbid0IGNvbnRhaW4gYSBzZW1pY29sb25cbiAgdmFyIGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiA9IC87XFxzKiQvO1xuXG4gIHZhciB3YXJuZWRTdHlsZU5hbWVzID0ge307XG4gIHZhciB3YXJuZWRTdHlsZVZhbHVlcyA9IHt9O1xuICB2YXIgd2FybmVkRm9yTmFOVmFsdWUgPSBmYWxzZTtcblxuICB2YXIgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lLCBvd25lcikge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ1Vuc3VwcG9ydGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JXMnLCBuYW1lLCAoMCwgX2NhbWVsaXplU3R5bGVOYW1lMi5kZWZhdWx0KShuYW1lKSwgY2hlY2tSZW5kZXJNZXNzYWdlKG93bmVyKSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZShuYW1lLCBvd25lcikge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ1Vuc3VwcG9ydGVkIHZlbmRvci1wcmVmaXhlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPyVzJywgbmFtZSwgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lcikpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24gPSBmdW5jdGlvbiB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24obmFtZSwgdmFsdWUsIG93bmVyKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlVmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnU3R5bGUgcHJvcGVydHkgdmFsdWVzIHNob3VsZG5cXCd0IGNvbnRhaW4gYSBzZW1pY29sb24uJXMgJyArICdUcnkgXCIlczogJXNcIiBpbnN0ZWFkLicsIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lciksIG5hbWUsIHZhbHVlLnJlcGxhY2UoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLCAnJykpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZUlzTmFOID0gZnVuY3Rpb24gd2FyblN0eWxlVmFsdWVJc05hTihuYW1lLCB2YWx1ZSwgb3duZXIpIHtcbiAgICBpZiAod2FybmVkRm9yTmFOVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRGb3JOYU5WYWx1ZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdgTmFOYCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvciB0aGUgYCVzYCBjc3Mgc3R5bGUgcHJvcGVydHkuJXMnLCBuYW1lLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgY2hlY2tSZW5kZXJNZXNzYWdlID0gZnVuY3Rpb24gY2hlY2tSZW5kZXJNZXNzYWdlKG93bmVyKSB7XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlYWN0RE9NQ29tcG9uZW50fSBjb21wb25lbnRcbiAgICovXG4gIHZhciB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uIHdhcm5WYWxpZFN0eWxlKG5hbWUsIHZhbHVlLCBjb21wb25lbnQpIHtcbiAgICAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tdmFyXG4gICAgdmFyIG93bmVyID0gdm9pZCAwO1xuICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgfVxuICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lLCBvd25lcik7XG4gICAgfSBlbHNlIGlmIChiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKSkge1xuICAgICAgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKTtcbiAgICB9IGVsc2UgaWYgKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uKG5hbWUsIHZhbHVlLCBvd25lcik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpKSB7XG4gICAgICB3YXJuU3R5bGVWYWx1ZUlzTmFOKG5hbWUsIHZhbHVlLCBvd25lcik7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAgICogU2VyaWFsaXplcyBhIG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyBmb3IgdXNlIGFzIGlubGluZSBzdHlsZXM6XG4gICAqXG4gICAqICAgPiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoe3dpZHRoOiAnMjAwcHgnLCBoZWlnaHQ6IDB9KVxuICAgKiAgIFwid2lkdGg6MjAwcHg7aGVpZ2h0OjA7XCJcbiAgICpcbiAgICogVW5kZWZpbmVkIHZhbHVlcyBhcmUgaWdub3JlZCBzbyB0aGF0IGRlY2xhcmF0aXZlIHByb2dyYW1taW5nIGlzIGVhc2llci5cbiAgICogVGhlIHJlc3VsdCBzaG91bGQgYmUgSFRNTC1lc2NhcGVkIGJlZm9yZSBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cblxuZnVuY3Rpb24gY3JlYXRlTWFya3VwRm9yU3R5bGVzKHN0eWxlcywgY29tcG9uZW50KSB7XG4gIHZhciBzZXJpYWxpemVkID0gJyc7XG4gIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICB2YXIgaXNDdXN0b21Qcm9wID0gc3R5bGVOYW1lLmluZGV4T2YoJy0tJykgPT09IDA7XG4gICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChzdHlsZU5hbWUgPT09ICdsYWJlbCcpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgc3R5bGVWYWx1ZSA9IHN0eWxlc1tzdHlsZU5hbWVdO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc0N1c3RvbVByb3ApIHtcbiAgICAgIHdhcm5WYWxpZFN0eWxlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSwgY29tcG9uZW50KTtcbiAgICB9XG4gICAgaWYgKHN0eWxlVmFsdWUgIT0gbnVsbCkge1xuICAgICAgaWYgKGlzQ3VzdG9tUHJvcCkge1xuICAgICAgICBzZXJpYWxpemVkICs9IHN0eWxlTmFtZSArICc6JyArIHN0eWxlVmFsdWUgKyAnOyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXJpYWxpemVkICs9IHByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6JztcbiAgICAgICAgc2VyaWFsaXplZCArPSAoMCwgX2Rhbmdlcm91c1N0eWxlVmFsdWUyLmRlZmF1bHQpKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSwgY29tcG9uZW50KSArICc7JztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY2xlYW47XG4vLyBSZXR1cm5zIHRydWUgZm9yIG51bGwsIGZhbHNlLCB1bmRlZmluZWQgYW5kIHt9XG5mdW5jdGlvbiBpc0ZhbHN5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBmYWxzZSB8fCAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xufVxuXG5mdW5jdGlvbiBjbGVhbk9iamVjdChvYmplY3QpIHtcbiAgaWYgKGlzRmFsc3kob2JqZWN0KSkgcmV0dXJuIG51bGw7XG4gIGlmICgodHlwZW9mIG9iamVjdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqZWN0KSkgIT09ICdvYmplY3QnKSByZXR1cm4gb2JqZWN0O1xuXG4gIHZhciBhY2MgPSB7fSxcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpLFxuICAgICAgaGFzRmFsc3kgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleXNbaV1dO1xuICAgIHZhciBmaWx0ZXJlZFZhbHVlID0gY2xlYW4odmFsdWUpO1xuICAgIGlmIChmaWx0ZXJlZFZhbHVlID09PSBudWxsIHx8IGZpbHRlcmVkVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICBoYXNGYWxzeSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChmaWx0ZXJlZFZhbHVlICE9PSBudWxsKSB7XG4gICAgICBhY2Nba2V5c1tpXV0gPSBmaWx0ZXJlZFZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gT2JqZWN0LmtleXMoYWNjKS5sZW5ndGggPT09IDAgPyBudWxsIDogaGFzRmFsc3kgPyBhY2MgOiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIGNsZWFuQXJyYXkocnVsZXMpIHtcbiAgdmFyIGhhc0ZhbHN5ID0gZmFsc2U7XG4gIHZhciBmaWx0ZXJlZCA9IFtdO1xuICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgdmFyIGZpbHRlcmVkUnVsZSA9IGNsZWFuKHJ1bGUpO1xuICAgIGlmIChmaWx0ZXJlZFJ1bGUgPT09IG51bGwgfHwgZmlsdGVyZWRSdWxlICE9PSBydWxlKSB7XG4gICAgICBoYXNGYWxzeSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChmaWx0ZXJlZFJ1bGUgIT09IG51bGwpIHtcbiAgICAgIGZpbHRlcmVkLnB1c2goZmlsdGVyZWRSdWxlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZmlsdGVyZWQubGVuZ3RoID09IDAgPyBudWxsIDogaGFzRmFsc3kgPyBmaWx0ZXJlZCA6IHJ1bGVzO1xufVxuXG4vLyBUYWtlcyBzdHlsZSBhcnJheSBvciBvYmplY3QgcHJvdmlkZWQgYnkgdXNlciBhbmQgY2xlYXJzIGFsbCB0aGUgZmFsc3kgZGF0YSBcbi8vIElmIHRoZXJlIGlzIG5vIHN0eWxlcyBsZWZ0IGFmdGVyIGZpbHRyYXRpb24gcmV0dXJucyBudWxsXG5mdW5jdGlvbiBjbGVhbihpbnB1dCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgPyBjbGVhbkFycmF5KGlucHV0KSA6IGNsZWFuT2JqZWN0KGlucHV0KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIHcgPSBbXCJXZWJraXRcIl07XG52YXIgbSA9IFtcIk1velwiXTtcbnZhciBtcyA9IFtcIm1zXCJdO1xudmFyIHdtID0gW1wiV2Via2l0XCIsIFwiTW96XCJdO1xudmFyIHdtcyA9IFtcIldlYmtpdFwiLCBcIm1zXCJdO1xudmFyIHdtbXMgPSBbXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBwbHVnaW5zOiBbXSxcbiAgcHJlZml4TWFwOiB7IFwiYXBwZWFyYW5jZVwiOiB3bSwgXCJ1c2VyU2VsZWN0XCI6IHdtbXMsIFwidGV4dEVtcGhhc2lzUG9zaXRpb25cIjogdywgXCJ0ZXh0RW1waGFzaXNcIjogdywgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiB3LCBcInRleHRFbXBoYXNpc0NvbG9yXCI6IHcsIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IHcsIFwiY2xpcFBhdGhcIjogdywgXCJtYXNrSW1hZ2VcIjogdywgXCJtYXNrTW9kZVwiOiB3LCBcIm1hc2tSZXBlYXRcIjogdywgXCJtYXNrUG9zaXRpb25cIjogdywgXCJtYXNrQ2xpcFwiOiB3LCBcIm1hc2tPcmlnaW5cIjogdywgXCJtYXNrU2l6ZVwiOiB3LCBcIm1hc2tDb21wb3NpdGVcIjogdywgXCJtYXNrXCI6IHcsIFwibWFza0JvcmRlclNvdXJjZVwiOiB3LCBcIm1hc2tCb3JkZXJNb2RlXCI6IHcsIFwibWFza0JvcmRlclNsaWNlXCI6IHcsIFwibWFza0JvcmRlcldpZHRoXCI6IHcsIFwibWFza0JvcmRlck91dHNldFwiOiB3LCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogdywgXCJtYXNrQm9yZGVyXCI6IHcsIFwibWFza1R5cGVcIjogdywgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IHcsIFwidGV4dERlY29yYXRpb25Ta2lwXCI6IHcsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IHcsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiB3LCBcImZpbHRlclwiOiB3LCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogdywgXCJicmVha0FmdGVyXCI6IHdtbXMsIFwiYnJlYWtCZWZvcmVcIjogd21tcywgXCJicmVha0luc2lkZVwiOiB3bW1zLCBcImNvbHVtbkNvdW50XCI6IHdtLCBcImNvbHVtbkZpbGxcIjogd20sIFwiY29sdW1uR2FwXCI6IHdtLCBcImNvbHVtblJ1bGVcIjogd20sIFwiY29sdW1uUnVsZUNvbG9yXCI6IHdtLCBcImNvbHVtblJ1bGVTdHlsZVwiOiB3bSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogd20sIFwiY29sdW1uc1wiOiB3bSwgXCJjb2x1bW5TcGFuXCI6IHdtLCBcImNvbHVtbldpZHRoXCI6IHdtLCBcIndyaXRpbmdNb2RlXCI6IHdtcywgXCJmbGV4XCI6IHcsIFwiZmxleEJhc2lzXCI6IHcsIFwiZmxleERpcmVjdGlvblwiOiB3LCBcImZsZXhHcm93XCI6IHcsIFwiZmxleEZsb3dcIjogdywgXCJmbGV4U2hyaW5rXCI6IHcsIFwiZmxleFdyYXBcIjogdywgXCJhbGlnbkNvbnRlbnRcIjogdywgXCJhbGlnbkl0ZW1zXCI6IHcsIFwiYWxpZ25TZWxmXCI6IHcsIFwianVzdGlmeUNvbnRlbnRcIjogdywgXCJvcmRlclwiOiB3LCBcInRyYW5zZm9ybVwiOiB3LCBcInRyYW5zZm9ybU9yaWdpblwiOiB3LCBcInRyYW5zZm9ybU9yaWdpblhcIjogdywgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IHcsIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IHcsIFwicGVyc3BlY3RpdmVcIjogdywgXCJwZXJzcGVjdGl2ZU9yaWdpblwiOiB3LCBcInRyYW5zZm9ybVN0eWxlXCI6IHcsIFwidHJhbnNmb3JtT3JpZ2luWlwiOiB3LCBcImFuaW1hdGlvblwiOiB3LCBcImFuaW1hdGlvbkRlbGF5XCI6IHcsIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IHcsIFwiYW5pbWF0aW9uRmlsbE1vZGVcIjogdywgXCJhbmltYXRpb25EdXJhdGlvblwiOiB3LCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHcsIFwiYW5pbWF0aW9uTmFtZVwiOiB3LCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiB3LCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IHcsIFwiYmFja2Ryb3BGaWx0ZXJcIjogdywgXCJmb250S2VybmluZ1wiOiB3LCBcInNjcm9sbFNuYXBUeXBlXCI6IHdtcywgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiB3bXMsIFwic2Nyb2xsU25hcFBvaW50c1lcIjogd21zLCBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiB3bXMsIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogd21zLCBcInNoYXBlSW1hZ2VUaHJlc2hvbGRcIjogdywgXCJzaGFwZUltYWdlTWFyZ2luXCI6IHcsIFwic2hhcGVJbWFnZU91dHNpZGVcIjogdywgXCJoeXBoZW5zXCI6IHdtbXMsIFwiZmxvd0ludG9cIjogd21zLCBcImZsb3dGcm9tXCI6IHdtcywgXCJyZWdpb25GcmFnbWVudFwiOiB3bXMsIFwidGV4dEFsaWduTGFzdFwiOiBtLCBcInRhYlNpemVcIjogbSwgXCJ3cmFwRmxvd1wiOiBtcywgXCJ3cmFwVGhyb3VnaFwiOiBtcywgXCJ3cmFwTWFyZ2luXCI6IG1zLCBcImdyaWRUZW1wbGF0ZUNvbHVtbnNcIjogbXMsIFwiZ3JpZFRlbXBsYXRlUm93c1wiOiBtcywgXCJncmlkVGVtcGxhdGVBcmVhc1wiOiBtcywgXCJncmlkVGVtcGxhdGVcIjogbXMsIFwiZ3JpZEF1dG9Db2x1bW5zXCI6IG1zLCBcImdyaWRBdXRvUm93c1wiOiBtcywgXCJncmlkQXV0b0Zsb3dcIjogbXMsIFwiZ3JpZFwiOiBtcywgXCJncmlkUm93U3RhcnRcIjogbXMsIFwiZ3JpZENvbHVtblN0YXJ0XCI6IG1zLCBcImdyaWRSb3dFbmRcIjogbXMsIFwiZ3JpZFJvd1wiOiBtcywgXCJncmlkQ29sdW1uXCI6IG1zLCBcImdyaWRDb2x1bW5FbmRcIjogbXMsIFwiZ3JpZENvbHVtbkdhcFwiOiBtcywgXCJncmlkUm93R2FwXCI6IG1zLCBcImdyaWRBcmVhXCI6IG1zLCBcImdyaWRHYXBcIjogbXMsIFwidGV4dFNpemVBZGp1c3RcIjogd21zLCBcImJvcmRlckltYWdlXCI6IHcsIFwiYm9yZGVySW1hZ2VPdXRzZXRcIjogdywgXCJib3JkZXJJbWFnZVJlcGVhdFwiOiB3LCBcImJvcmRlckltYWdlU2xpY2VcIjogdywgXCJib3JkZXJJbWFnZVNvdXJjZVwiOiB3LCBcImJvcmRlckltYWdlV2lkdGhcIjogdywgXCJ0cmFuc2l0aW9uRGVsYXlcIjogdywgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogdywgXCJ0cmFuc2l0aW9uUHJvcGVydHlcIjogdywgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogdyB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhcGl0YWxpemVTdHJpbmc7XG5mdW5jdGlvbiBjYXBpdGFsaXplU3RyaW5nKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVmaXhQcm9wZXJ0eTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplU3RyaW5nJyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYXBpdGFsaXplU3RyaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gcHJlZml4UHJvcGVydHkocHJlZml4UHJvcGVydGllcywgcHJvcGVydHksIHN0eWxlKSB7XG4gIGlmIChwcmVmaXhQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHZhciByZXF1aXJlZFByZWZpeGVzID0gcHJlZml4UHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJlcXVpcmVkUHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHN0eWxlW3JlcXVpcmVkUHJlZml4ZXNbaV0gKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV0gPSBzdHlsZVtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByZWZpeFZhbHVlO1xuZnVuY3Rpb24gcHJlZml4VmFsdWUocGx1Z2lucywgcHJvcGVydHksIHZhbHVlLCBzdHlsZSwgbWV0YURhdGEpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBsdWdpbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSBwbHVnaW5zW2ldKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIG1ldGFEYXRhKTtcblxuICAgIC8vIHdlIGNhbiBzdG9wIHByb2Nlc3NpbmcgaWYgYSB2YWx1ZSBpcyByZXR1cm5lZFxuICAgIC8vIGFzIGFsbCBwbHVnaW4gY3JpdGVyaWEgYXJlIHVuaXF1ZVxuICAgIGlmIChwcm9jZXNzZWRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHByb2Nlc3NlZFZhbHVlO1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjdXJzb3I7XG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuXG52YXIgdmFsdWVzID0ge1xuICAnem9vbS1pbic6IHRydWUsXG4gICd6b29tLW91dCc6IHRydWUsXG4gIGdyYWI6IHRydWUsXG4gIGdyYWJiaW5nOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBjdXJzb3IocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2N1cnNvcicgJiYgdmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ByZWZpeGVkVmFsdWU7XG52YXIgcmVnZXggPSAvLXdlYmtpdC18LW1vei18LW1zLS87XG5cbmZ1bmN0aW9uIGlzUHJlZml4ZWRWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiByZWdleC50ZXN0KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyb3NzRmFkZTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jcm9zcy1mYWRlXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJyddO1xuZnVuY3Rpb24gY3Jvc3NGYWRlKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCdjcm9zcy1mYWRlKCcpID4gLTEpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9jcm9zcy1mYWRlXFwoL2csIHByZWZpeCArICdjcm9zcy1mYWRlKCcpO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmaWx0ZXI7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gaHR0cDovL2Nhbml1c2UuY29tLyNmZWF0PWNzcy1maWx0ZXItZnVuY3Rpb25cbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnJ107XG5mdW5jdGlvbiBmaWx0ZXIocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlLmluZGV4T2YoJ2ZpbHRlcignKSA+IC0xKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvZmlsdGVyXFwoL2csIHByZWZpeCArICdmaWx0ZXIoJyk7XG4gICAgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXg7XG52YXIgdmFsdWVzID0ge1xuICBmbGV4OiBbJy13ZWJraXQtYm94JywgJy1tb3otYm94JywgJy1tcy1mbGV4Ym94JywgJy13ZWJraXQtZmxleCcsICdmbGV4J10sXG4gICdpbmxpbmUtZmxleCc6IFsnLXdlYmtpdC1pbmxpbmUtYm94JywgJy1tb3otaW5saW5lLWJveCcsICctbXMtaW5saW5lLWZsZXhib3gnLCAnLXdlYmtpdC1pbmxpbmUtZmxleCcsICdpbmxpbmUtZmxleCddXG59O1xuXG5mdW5jdGlvbiBmbGV4KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlc1t2YWx1ZV07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXhib3hPbGQ7XG52YXIgYWx0ZXJuYXRpdmVWYWx1ZXMgPSB7XG4gICdzcGFjZS1hcm91bmQnOiAnanVzdGlmeScsXG4gICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAnZmxleC1zdGFydCc6ICdzdGFydCcsXG4gICdmbGV4LWVuZCc6ICdlbmQnLFxuICAnd3JhcC1yZXZlcnNlJzogJ211bHRpcGxlJyxcbiAgd3JhcDogJ211bHRpcGxlJ1xufTtcblxudmFyIGFsdGVybmF0aXZlUHJvcHMgPSB7XG4gIGFsaWduSXRlbXM6ICdXZWJraXRCb3hBbGlnbicsXG4gIGp1c3RpZnlDb250ZW50OiAnV2Via2l0Qm94UGFjaycsXG4gIGZsZXhXcmFwOiAnV2Via2l0Qm94TGluZXMnXG59O1xuXG5mdW5jdGlvbiBmbGV4Ym94T2xkKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnZmxleERpcmVjdGlvbicgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZS5pbmRleE9mKCdjb2x1bW4nKSA+IC0xKSB7XG4gICAgICBzdHlsZS5XZWJraXRCb3hPcmllbnQgPSAndmVydGljYWwnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5XZWJraXRCb3hPcmllbnQgPSAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5pbmRleE9mKCdyZXZlcnNlJykgPiAtMSkge1xuICAgICAgc3R5bGUuV2Via2l0Qm94RGlyZWN0aW9uID0gJ3JldmVyc2UnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5XZWJraXRCb3hEaXJlY3Rpb24gPSAnbm9ybWFsJztcbiAgICB9XG4gIH1cbiAgaWYgKGFsdGVybmF0aXZlUHJvcHMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgc3R5bGVbYWx0ZXJuYXRpdmVQcm9wc1twcm9wZXJ0eV1dID0gYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBncmFkaWVudDtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuXG52YXIgdmFsdWVzID0gL2xpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudHxyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50LztcblxuZnVuY3Rpb24gZ3JhZGllbnQocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlcy50ZXN0KHZhbHVlKSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpbWFnZVNldDtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLWltYWdlLXNldFxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICcnXTtcbmZ1bmN0aW9uIGltYWdlU2V0KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCdpbWFnZS1zZXQoJykgPiAtMSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2ltYWdlLXNldFxcKC9nLCBwcmVmaXggKyAnaW1hZ2Utc2V0KCcpO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwb3NpdGlvbjtcbmZ1bmN0aW9uIHBvc2l0aW9uKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdwb3NpdGlvbicgJiYgdmFsdWUgPT09ICdzdGlja3knKSB7XG4gICAgcmV0dXJuIFsnLXdlYmtpdC1zdGlja3knLCAnc3RpY2t5J107XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNpemluZztcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtYXhIZWlnaHQ6IHRydWUsXG4gIG1heFdpZHRoOiB0cnVlLFxuICB3aWR0aDogdHJ1ZSxcbiAgaGVpZ2h0OiB0cnVlLFxuICBjb2x1bW5XaWR0aDogdHJ1ZSxcbiAgbWluV2lkdGg6IHRydWUsXG4gIG1pbkhlaWdodDogdHJ1ZVxufTtcbnZhciB2YWx1ZXMgPSB7XG4gICdtaW4tY29udGVudCc6IHRydWUsXG4gICdtYXgtY29udGVudCc6IHRydWUsXG4gICdmaWxsLWF2YWlsYWJsZSc6IHRydWUsXG4gICdmaXQtY29udGVudCc6IHRydWUsXG4gICdjb250YWluLWZsb2F0cyc6IHRydWVcbn07XG5cbmZ1bmN0aW9uIHNpemluZyhwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyLCBwcmVmZXItdGVtcGxhdGUgKi9cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2dcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS9cbnZhciBjYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGNhY2hlW25hbWVdXG4gIH1cblxuICB2YXIgaE5hbWUgPSBuYW1lLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgdG9IeXBoZW5Mb3dlcilcbiAgcmV0dXJuIChjYWNoZVtuYW1lXSA9IG1zUGF0dGVybi50ZXN0KGhOYW1lKSA/ICctJyArIGhOYW1lIDogaE5hbWUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGh5cGhlbmF0ZVN0eWxlTmFtZVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlUHJvcGVydHk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZSgnaHlwaGVuYXRlLXN0eWxlLW5hbWUnKTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlU3R5bGVOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaHlwaGVuYXRlUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuICgwLCBfaHlwaGVuYXRlU3R5bGVOYW1lMi5kZWZhdWx0KShwcm9wZXJ0eSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9oeXBoZW5hdGVQcm9wZXJ0eScpO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVByb3BlcnR5KTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcgPSByZXF1aXJlKCcuLi8uLi91dGlscy9jYXBpdGFsaXplU3RyaW5nJyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYXBpdGFsaXplU3RyaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IHRydWUsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvbjogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uOiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uUHJvcGVydHk6IHRydWVcbn07XG5cblxudmFyIHByZWZpeE1hcHBpbmcgPSB7XG4gIFdlYmtpdDogJy13ZWJraXQtJyxcbiAgTW96OiAnLW1vei0nLFxuICBtczogJy1tcy0nXG59O1xuXG5mdW5jdGlvbiBwcmVmaXhWYWx1ZSh2YWx1ZSwgcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgaWYgKCgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyBvbmx5IHNwbGl0IG11bHRpIHZhbHVlcywgbm90IGN1YmljIGJlemllcnNcbiAgdmFyIG11bHRpcGxlVmFsdWVzID0gdmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZyk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG11bHRpcGxlVmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHNpbmdsZVZhbHVlID0gbXVsdGlwbGVWYWx1ZXNbaV07XG4gICAgdmFyIHZhbHVlcyA9IFtzaW5nbGVWYWx1ZV07XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgICAgIHZhciBkYXNoQ2FzZVByb3BlcnR5ID0gKDAsIF9oeXBoZW5hdGVQcm9wZXJ0eTIuZGVmYXVsdCkocHJvcGVydHkpO1xuXG4gICAgICBpZiAoc2luZ2xlVmFsdWUuaW5kZXhPZihkYXNoQ2FzZVByb3BlcnR5KSA+IC0xICYmIGRhc2hDYXNlUHJvcGVydHkgIT09ICdvcmRlcicpIHtcbiAgICAgICAgdmFyIHByZWZpeGVzID0gcHJvcGVydHlQcmVmaXhNYXBbcHJvcGVydHldO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgcExlbiA9IHByZWZpeGVzLmxlbmd0aDsgaiA8IHBMZW47ICsraikge1xuICAgICAgICAgIC8vIGpvaW4gYWxsIHByZWZpeGVzIGFuZCBjcmVhdGUgYSBuZXcgdmFsdWVcbiAgICAgICAgICB2YWx1ZXMudW5zaGlmdChzaW5nbGVWYWx1ZS5yZXBsYWNlKGRhc2hDYXNlUHJvcGVydHksIHByZWZpeE1hcHBpbmdbcHJlZml4ZXNbal1dICsgZGFzaENhc2VQcm9wZXJ0eSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbXVsdGlwbGVWYWx1ZXNbaV0gPSB2YWx1ZXMuam9pbignLCcpO1xuICB9XG5cbiAgcmV0dXJuIG11bHRpcGxlVmFsdWVzLmpvaW4oJywnKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbihwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICAvLyBhbHNvIGNoZWNrIGZvciBhbHJlYWR5IHByZWZpeGVkIHRyYW5zaXRpb25zXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgdmFyIG91dHB1dFZhbHVlID0gcHJlZml4VmFsdWUodmFsdWUsIHByb3BlcnR5UHJlZml4TWFwKTtcbiAgICAvLyBpZiB0aGUgcHJvcGVydHkgaXMgYWxyZWFkeSBwcmVmaXhlZFxuICAgIHZhciB3ZWJraXRPdXRwdXQgPSBvdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICEvLW1vei18LW1zLS8udGVzdCh2YWwpO1xuICAgIH0pLmpvaW4oJywnKTtcblxuICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCdXZWJraXQnKSA+IC0xKSB7XG4gICAgICByZXR1cm4gd2Via2l0T3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBtb3pPdXRwdXQgPSBvdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICEvLXdlYmtpdC18LW1zLS8udGVzdCh2YWwpO1xuICAgIH0pLmpvaW4oJywnKTtcblxuICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCdNb3onKSA+IC0xKSB7XG4gICAgICByZXR1cm4gbW96T3V0cHV0O1xuICAgIH1cblxuICAgIHN0eWxlWydXZWJraXQnICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gd2Via2l0T3V0cHV0O1xuICAgIHN0eWxlWydNb3onICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gbW96T3V0cHV0O1xuICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJlZml4ZXI7XG5cbnZhciBfc3RhdGljRGF0YSA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvc3RhdGljRGF0YScpO1xuXG52YXIgX3N0YXRpY0RhdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RhdGljRGF0YSk7XG5cbnZhciBfcHJlZml4UHJvcGVydHkgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4UHJvcGVydHknKTtcblxudmFyIF9wcmVmaXhQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhQcm9wZXJ0eSk7XG5cbnZhciBfcHJlZml4VmFsdWUgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4VmFsdWUnKTtcblxudmFyIF9wcmVmaXhWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhWYWx1ZSk7XG5cbnZhciBfY3Vyc29yID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2N1cnNvcicpO1xuXG52YXIgX2N1cnNvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXJzb3IpO1xuXG52YXIgX2Nyb3NzRmFkZSA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jcm9zc0ZhZGUnKTtcblxudmFyIF9jcm9zc0ZhZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3Jvc3NGYWRlKTtcblxudmFyIF9maWx0ZXIgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmlsdGVyJyk7XG5cbnZhciBfZmlsdGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpbHRlcik7XG5cbnZhciBfZmxleCA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Jyk7XG5cbnZhciBfZmxleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4KTtcblxudmFyIF9mbGV4Ym94T2xkID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hPbGQnKTtcblxudmFyIF9mbGV4Ym94T2xkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXhib3hPbGQpO1xuXG52YXIgX2dyYWRpZW50ID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50Jyk7XG5cbnZhciBfZ3JhZGllbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JhZGllbnQpO1xuXG52YXIgX2ltYWdlU2V0ID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ltYWdlU2V0Jyk7XG5cbnZhciBfaW1hZ2VTZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1hZ2VTZXQpO1xuXG52YXIgX3Bvc2l0aW9uID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3Bvc2l0aW9uJyk7XG5cbnZhciBfcG9zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zaXRpb24pO1xuXG52YXIgX3NpemluZyA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9zaXppbmcnKTtcblxudmFyIF9zaXppbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2l6aW5nKTtcblxudmFyIF90cmFuc2l0aW9uID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3RyYW5zaXRpb24nKTtcblxudmFyIF90cmFuc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcGx1Z2lucyA9IFtfY3Jvc3NGYWRlMi5kZWZhdWx0LCBfY3Vyc29yMi5kZWZhdWx0LCBfZmlsdGVyMi5kZWZhdWx0LCBfZmxleGJveE9sZDIuZGVmYXVsdCwgX2dyYWRpZW50Mi5kZWZhdWx0LCBfaW1hZ2VTZXQyLmRlZmF1bHQsIF9wb3NpdGlvbjIuZGVmYXVsdCwgX3NpemluZzIuZGVmYXVsdCwgX3RyYW5zaXRpb24yLmRlZmF1bHQsIF9mbGV4Mi5kZWZhdWx0XTsgLy8gY3VzdG9tIGZhY2FkZSBmb3IgaW5saW5lLXN0eWxlLXByZWZpeGVyXG5cbnZhciBwcmVmaXhNYXAgPSBfc3RhdGljRGF0YTIuZGVmYXVsdC5wcmVmaXhNYXA7XG5cbmZ1bmN0aW9uIHByZWZpeGVyKHN0eWxlKSB7XG4gIGZvciAodmFyIHByb3BlcnR5IGluIHN0eWxlKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gKDAsIF9wcmVmaXhWYWx1ZTIuZGVmYXVsdCkocGx1Z2lucywgcHJvcGVydHksIHZhbHVlLCBzdHlsZSwgcHJlZml4TWFwKTtcblxuICAgIC8vIG9ubHkgbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCB3YXMgdG91Y2hlZFxuICAgIC8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbiAgICBpZiAocHJvY2Vzc2VkVmFsdWUpIHtcbiAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IHByb2Nlc3NlZFZhbHVlO1xuICAgIH1cblxuICAgICgwLCBfcHJlZml4UHJvcGVydHkyLmRlZmF1bHQpKHByZWZpeE1hcCwgcHJvcGVydHksIHN0eWxlKTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzLlBsdWdpblNldCA9IFBsdWdpblNldDtcbmV4cG9ydHMuZmFsbGJhY2tzID0gZmFsbGJhY2tzO1xuZXhwb3J0cy5jb250ZW50V3JhcCA9IGNvbnRlbnRXcmFwO1xuZXhwb3J0cy5wcmVmaXhlcyA9IHByZWZpeGVzO1xuXG52YXIgX29iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxudmFyIF9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5T3BlcmF0aW9ucycpO1xuXG52YXIgX3ByZWZpeGVyID0gcmVxdWlyZSgnLi9wcmVmaXhlcicpO1xuXG52YXIgX3ByZWZpeGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGlzRGV2ID0gZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuIHggPT09ICdkZXZlbG9wbWVudCcgfHwgIXg7XG59KHByb2Nlc3MuZW52Lk5PREVfRU5WKTtcblxuZnVuY3Rpb24gUGx1Z2luU2V0KGluaXRpYWwpIHtcbiAgdGhpcy5mbnMgPSBpbml0aWFsIHx8IFtdO1xufVxuXG4oMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoUGx1Z2luU2V0LnByb3RvdHlwZSwge1xuICBhZGQ6IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZucyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgZm5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKF90aGlzLmZucy5pbmRleE9mKGZuKSA+PSAwKSB7XG4gICAgICAgIGlmIChpc0Rldikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignYWRkaW5nIHRoZSBzYW1lIHBsdWdpbiBhZ2FpbiwgaWdub3JpbmcnKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuZm5zID0gW2ZuXS5jb25jYXQoX3RoaXMuZm5zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoZm4pIHtcbiAgICB0aGlzLmZucyA9IHRoaXMuZm5zLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHggIT09IGZuO1xuICAgIH0pO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5mbnMgPSBbXTtcbiAgfSxcbiAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0obykge1xuICAgIHJldHVybiB0aGlzLmZucy5yZWR1Y2UoZnVuY3Rpb24gKG8sIGZuKSB7XG4gICAgICByZXR1cm4gZm4obyk7XG4gICAgfSwgbyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBmYWxsYmFja3Mobm9kZSkge1xuICB2YXIgaGFzQXJyYXkgPSBPYmplY3Qua2V5cyhub2RlLnN0eWxlKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShub2RlLnN0eWxlW3hdKTtcbiAgfSkuaW5kZXhPZih0cnVlKSA+PSAwO1xuICBpZiAoaGFzQXJyYXkpIHtcbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuXG4gICAgdmFyIGZsYXR0ZW5lZCA9IE9iamVjdC5rZXlzKHN0eWxlKS5yZWR1Y2UoZnVuY3Rpb24gKG8sIGtleSkge1xuICAgICAgb1trZXldID0gQXJyYXkuaXNBcnJheShzdHlsZVtrZXldKSA/IHN0eWxlW2tleV0uam9pbignOyAnICsgKDAsIF9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMucHJvY2Vzc1N0eWxlTmFtZSkoa2V5KSArICc6ICcpIDogc3R5bGVba2V5XTtcbiAgICAgIHJldHVybiBvO1xuICAgIH0sIHt9KTtcbiAgICAvLyB0b2RvIC0gXG4gICAgLy8gZmxhdHRlbiBhcnJheXMgd2hpY2ggaGF2ZW4ndCBiZWVuIGZsYXR0ZW5lZCB5ZXQgXG4gICAgcmV0dXJuICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7fSwgbm9kZSwgeyBzdHlsZTogZmxhdHRlbmVkIH0pO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG52YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnY291bnRlcicsICdvcGVuLXF1b3RlJywgJ2Nsb3NlLXF1b3RlJywgJ25vLW9wZW4tcXVvdGUnLCAnbm8tY2xvc2UtcXVvdGUnLCAnaW5pdGlhbCcsICdpbmhlcml0J107XG5cbmZ1bmN0aW9uIGNvbnRlbnRXcmFwKG5vZGUpIHtcbiAgaWYgKG5vZGUuc3R5bGUuY29udGVudCkge1xuICAgIHZhciBjb250ID0gbm9kZS5zdHlsZS5jb250ZW50O1xuICAgIGlmIChjb250ZW50VmFsdWVzLmluZGV4T2YoY29udCkgPj0gMCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGlmICgvXihhdHRyfGNhbGN8Y291bnRlcnM/fHVybClcXCgvLnRlc3QoY29udCkpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBpZiAoY29udC5jaGFyQXQoMCkgPT09IGNvbnQuY2hhckF0KGNvbnQubGVuZ3RoIC0gMSkgJiYgKGNvbnQuY2hhckF0KDApID09PSAnXCInIHx8IGNvbnQuY2hhckF0KDApID09PSBcIidcIikpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5vZGUsIHsgc3R5bGU6IF9leHRlbmRzKHt9LCBub2RlLnN0eWxlLCB7IGNvbnRlbnQ6ICdcIicgKyBjb250ICsgJ1wiJyB9KSB9KTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gcHJlZml4ZXMobm9kZSkge1xuICByZXR1cm4gKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHt9LCBub2RlLCB7IHN0eWxlOiAoMCwgX3ByZWZpeGVyMi5kZWZhdWx0KShfZXh0ZW5kcyh7fSwgbm9kZS5zdHlsZSkpIH0pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZG9IYXNoO1xuLy8gbXVybXVyaGFzaDIgdmlhIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3JheWNtb3JnYW4vNTg4NDIzXG5cbmZ1bmN0aW9uIGRvSGFzaChzdHIsIHNlZWQpIHtcbiAgdmFyIG0gPSAweDViZDFlOTk1O1xuICB2YXIgciA9IDI0O1xuICB2YXIgaCA9IHNlZWQgXiBzdHIubGVuZ3RoO1xuICB2YXIgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IDA7XG5cbiAgd2hpbGUgKGxlbmd0aCA+PSA0KSB7XG4gICAgdmFyIGsgPSBVSW50MzIoc3RyLCBjdXJyZW50SW5kZXgpO1xuXG4gICAgayA9IFVtdWwzMihrLCBtKTtcbiAgICBrIF49IGsgPj4+IHI7XG4gICAgayA9IFVtdWwzMihrLCBtKTtcblxuICAgIGggPSBVbXVsMzIoaCwgbSk7XG4gICAgaCBePSBrO1xuXG4gICAgY3VycmVudEluZGV4ICs9IDQ7XG4gICAgbGVuZ3RoIC09IDQ7XG4gIH1cblxuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gVUludDE2KHN0ciwgY3VycmVudEluZGV4KTtcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoY3VycmVudEluZGV4ICsgMikgPDwgMTY7XG4gICAgICBoID0gVW11bDMyKGgsIG0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IFVJbnQxNihzdHIsIGN1cnJlbnRJbmRleCk7XG4gICAgICBoID0gVW11bDMyKGgsIG0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGN1cnJlbnRJbmRleCk7XG4gICAgICBoID0gVW11bDMyKGgsIG0pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBoIF49IGggPj4+IDEzO1xuICBoID0gVW11bDMyKGgsIG0pO1xuICBoIF49IGggPj4+IDE1O1xuXG4gIHJldHVybiBoID4+PiAwO1xufVxuXG5mdW5jdGlvbiBVSW50MzIoc3RyLCBwb3MpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KHBvcysrKSArIChzdHIuY2hhckNvZGVBdChwb3MrKykgPDwgOCkgKyAoc3RyLmNoYXJDb2RlQXQocG9zKyspIDw8IDE2KSArIChzdHIuY2hhckNvZGVBdChwb3MpIDw8IDI0KTtcbn1cblxuZnVuY3Rpb24gVUludDE2KHN0ciwgcG9zKSB7XG4gIHJldHVybiBzdHIuY2hhckNvZGVBdChwb3MrKykgKyAoc3RyLmNoYXJDb2RlQXQocG9zKyspIDw8IDgpO1xufVxuXG5mdW5jdGlvbiBVbXVsMzIobiwgbSkge1xuICBuID0gbiB8IDA7XG4gIG0gPSBtIHwgMDtcbiAgdmFyIG5sbyA9IG4gJiAweGZmZmY7XG4gIHZhciBuaGkgPSBuID4+PiAxNjtcbiAgdmFyIHJlcyA9IG5sbyAqIG0gKyAoKG5oaSAqIG0gJiAweGZmZmYpIDw8IDE2KSB8IDA7XG4gIHJldHVybiByZXM7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jb21wb3NlID0gZXhwb3J0cy5tZXJnZSA9IGV4cG9ydHMuJCA9IGV4cG9ydHMuc3R5bGUgPSBleHBvcnRzLnByZXNldHMgPSBleHBvcnRzLmtleWZyYW1lcyA9IGV4cG9ydHMuZm9udEZhY2UgPSBleHBvcnRzLmluc2VydEdsb2JhbCA9IGV4cG9ydHMuaW5zZXJ0UnVsZSA9IGV4cG9ydHMucGx1Z2lucyA9IGV4cG9ydHMuc3R5bGVTaGVldCA9IHVuZGVmaW5lZDtcbmV4cG9ydHMuc3BlZWR5ID0gc3BlZWR5O1xuZXhwb3J0cy5zaW11bGF0aW9ucyA9IHNpbXVsYXRpb25zO1xuZXhwb3J0cy5zaW11bGF0ZSA9IHNpbXVsYXRlO1xuZXhwb3J0cy5jc3NMYWJlbHMgPSBjc3NMYWJlbHM7XG5leHBvcnRzLmlzTGlrZVJ1bGUgPSBpc0xpa2VSdWxlO1xuZXhwb3J0cy5pZEZvciA9IGlkRm9yO1xuZXhwb3J0cy5jc3MgPSBjc3M7XG5leHBvcnRzLnJlaHlkcmF0ZSA9IHJlaHlkcmF0ZTtcbmV4cG9ydHMuZmx1c2ggPSBmbHVzaDtcbmV4cG9ydHMuc2VsZWN0ID0gc2VsZWN0O1xuZXhwb3J0cy5wYXJlbnQgPSBwYXJlbnQ7XG5leHBvcnRzLm1lZGlhID0gbWVkaWE7XG5leHBvcnRzLnBzZXVkbyA9IHBzZXVkbztcbmV4cG9ydHMuYWN0aXZlID0gYWN0aXZlO1xuZXhwb3J0cy5hbnkgPSBhbnk7XG5leHBvcnRzLmNoZWNrZWQgPSBjaGVja2VkO1xuZXhwb3J0cy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuZXhwb3J0cy5lbXB0eSA9IGVtcHR5O1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuX2RlZmF1bHQgPSBfZGVmYXVsdDtcbmV4cG9ydHMuZmlyc3QgPSBmaXJzdDtcbmV4cG9ydHMuZmlyc3RDaGlsZCA9IGZpcnN0Q2hpbGQ7XG5leHBvcnRzLmZpcnN0T2ZUeXBlID0gZmlyc3RPZlR5cGU7XG5leHBvcnRzLmZ1bGxzY3JlZW4gPSBmdWxsc2NyZWVuO1xuZXhwb3J0cy5mb2N1cyA9IGZvY3VzO1xuZXhwb3J0cy5ob3ZlciA9IGhvdmVyO1xuZXhwb3J0cy5pbmRldGVybWluYXRlID0gaW5kZXRlcm1pbmF0ZTtcbmV4cG9ydHMuaW5SYW5nZSA9IGluUmFuZ2U7XG5leHBvcnRzLmludmFsaWQgPSBpbnZhbGlkO1xuZXhwb3J0cy5sYXN0Q2hpbGQgPSBsYXN0Q2hpbGQ7XG5leHBvcnRzLmxhc3RPZlR5cGUgPSBsYXN0T2ZUeXBlO1xuZXhwb3J0cy5sZWZ0ID0gbGVmdDtcbmV4cG9ydHMubGluayA9IGxpbms7XG5leHBvcnRzLm9ubHlDaGlsZCA9IG9ubHlDaGlsZDtcbmV4cG9ydHMub25seU9mVHlwZSA9IG9ubHlPZlR5cGU7XG5leHBvcnRzLm9wdGlvbmFsID0gb3B0aW9uYWw7XG5leHBvcnRzLm91dE9mUmFuZ2UgPSBvdXRPZlJhbmdlO1xuZXhwb3J0cy5yZWFkT25seSA9IHJlYWRPbmx5O1xuZXhwb3J0cy5yZWFkV3JpdGUgPSByZWFkV3JpdGU7XG5leHBvcnRzLnJlcXVpcmVkID0gcmVxdWlyZWQ7XG5leHBvcnRzLnJpZ2h0ID0gcmlnaHQ7XG5leHBvcnRzLnJvb3QgPSByb290O1xuZXhwb3J0cy5zY29wZSA9IHNjb3BlO1xuZXhwb3J0cy50YXJnZXQgPSB0YXJnZXQ7XG5leHBvcnRzLnZhbGlkID0gdmFsaWQ7XG5leHBvcnRzLnZpc2l0ZWQgPSB2aXNpdGVkO1xuZXhwb3J0cy5kaXIgPSBkaXI7XG5leHBvcnRzLmxhbmcgPSBsYW5nO1xuZXhwb3J0cy5ub3QgPSBub3Q7XG5leHBvcnRzLm50aENoaWxkID0gbnRoQ2hpbGQ7XG5leHBvcnRzLm50aExhc3RDaGlsZCA9IG50aExhc3RDaGlsZDtcbmV4cG9ydHMubnRoTGFzdE9mVHlwZSA9IG50aExhc3RPZlR5cGU7XG5leHBvcnRzLm50aE9mVHlwZSA9IG50aE9mVHlwZTtcbmV4cG9ydHMuYWZ0ZXIgPSBhZnRlcjtcbmV4cG9ydHMuYmVmb3JlID0gYmVmb3JlO1xuZXhwb3J0cy5maXJzdExldHRlciA9IGZpcnN0TGV0dGVyO1xuZXhwb3J0cy5maXJzdExpbmUgPSBmaXJzdExpbmU7XG5leHBvcnRzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbmV4cG9ydHMuYmFja2Ryb3AgPSBiYWNrZHJvcDtcbmV4cG9ydHMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbmV4cG9ydHMuY3NzRm9yID0gY3NzRm9yO1xuZXhwb3J0cy5hdHRyaWJzRm9yID0gYXR0cmlic0ZvcjtcblxudmFyIF9vYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfb2JqZWN0QXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdEFzc2lnbik7XG5cbnZhciBfc2hlZXQgPSByZXF1aXJlKCcuL3NoZWV0LmpzJyk7XG5cbnZhciBfQ1NTUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMnKTtcblxudmFyIF9jbGVhbiA9IHJlcXVpcmUoJy4vY2xlYW4uanMnKTtcblxudmFyIF9jbGVhbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGVhbik7XG5cbnZhciBfcGx1Z2lucyA9IHJlcXVpcmUoJy4vcGx1Z2lucycpO1xuXG52YXIgX2hhc2ggPSByZXF1aXJlKCcuL2hhc2gnKTtcblxudmFyIF9oYXNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhc2gpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbi8qIHN0eWxlc2hlZXQgKi9cblxuXG52YXIgc3R5bGVTaGVldCA9IGV4cG9ydHMuc3R5bGVTaGVldCA9IG5ldyBfc2hlZXQuU3R5bGVTaGVldCgpO1xuLy8gYW4gaXNvbW9ycGhpYyBTdHlsZVNoZWV0IHNoaW0uIGhpZGVzIGFsbCB0aGUgbml0dHkgZ3JpdHR5LlxuXG4vLyAvKioqKioqKioqKioqKioqKiBMSUZUT0ZGIElOIDMuLi4gMi4uLiAxLi4uICoqKioqKioqKioqKioqKiovXG5zdHlsZVNoZWV0LmluamVjdCgpOyAvL2VzbGludC1kaXNhYmxlLWxpbmUgaW5kZW50XG4vLyAvKioqKioqKioqKioqKioqKiAgICAgIFRPIFRIRSBNT09PT09PT04gICAgICoqKioqKioqKioqKioqKiovXG5cbi8vIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIHRvZ2dsZSBzcGVlZHlcbmZ1bmN0aW9uIHNwZWVkeShib29sKSB7XG4gIHJldHVybiBzdHlsZVNoZWV0LnNwZWVkeShib29sKTtcbn1cblxuLy8gcGx1Z2luc1xuLy8gd2UgaW5jbHVkZSB0aGVzZSBieSBkZWZhdWx0XG52YXIgcGx1Z2lucyA9IGV4cG9ydHMucGx1Z2lucyA9IHN0eWxlU2hlZXQucGx1Z2lucyA9IG5ldyBfcGx1Z2lucy5QbHVnaW5TZXQoW19wbHVnaW5zLnByZWZpeGVzLCBfcGx1Z2lucy5jb250ZW50V3JhcCwgX3BsdWdpbnMuZmFsbGJhY2tzXSk7XG5wbHVnaW5zLm1lZGlhID0gbmV3IF9wbHVnaW5zLlBsdWdpblNldCgpOyAvLyBuZWF0ISBtZWRpYSwgZm9udC1mYWNlLCBrZXlmcmFtZXNcbnBsdWdpbnMuZm9udEZhY2UgPSBuZXcgX3BsdWdpbnMuUGx1Z2luU2V0KCk7XG5wbHVnaW5zLmtleWZyYW1lcyA9IG5ldyBfcGx1Z2lucy5QbHVnaW5TZXQoW19wbHVnaW5zLnByZWZpeGVzLCBfcGx1Z2lucy5mYWxsYmFja3NdKTtcblxuLy8gZGVmaW5lIHNvbWUgY29uc3RhbnRzXG5cbnZhciBpc0RldiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIHx8ICFwcm9jZXNzLmVudi5OT0RFX0VOVjtcbnZhciBpc1Rlc3QgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnO1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXG4vKioqKiBzaW11bGF0aW9ucyAgKioqKi9cblxuLy8gYSBmbGFnIHRvIGVuYWJsZSBzaW11bGF0aW9uIG1ldGEgdGFncyBvbiBkb20gbm9kZXNcbi8vIGRlZmF1bHRzIHRvIHRydWUgaW4gZGV2IG1vZGUuIHJlY29tbWVuZCAqbm90KiB0b1xuLy8gdG9nZ2xlIG9mdGVuLlxudmFyIGNhblNpbXVsYXRlID0gaXNEZXY7XG5cbi8vIHdlIHVzZSB0aGVzZSBmbGFncyBmb3IgaXNzdWluZyB3YXJuaW5ncyB3aGVuIHNpbXVsYXRlIGlzIGNhbGxlZFxuLy8gaW4gcHJvZCAvIGluIGluY29ycmVjdCBvcmRlclxudmFyIHdhcm5lZDEgPSBmYWxzZSxcbiAgICB3YXJuZWQyID0gZmFsc2U7XG5cbi8vIHRvZ2dsZXMgc2ltdWxhdGlvbiBhY3Rpdml0eS4gc2hvdWxkbid0IGJlIG5lZWRlZCBpbiBtb3N0IGNhc2VzXG5mdW5jdGlvbiBzaW11bGF0aW9ucygpIHtcbiAgdmFyIGJvb2wgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG5cbiAgY2FuU2ltdWxhdGUgPSAhIWJvb2w7XG59XG5cbi8vIHVzZSB0aGlzIG9uIGRvbSBub2RlcyB0byAnc2ltdWxhdGUnIHBzZXVkb2NsYXNzZXNcbi8vIDxkaXYgey4uLmhvdmVyKHsgY29sb3I6ICdyZWQnIH0pfSB7Li4uc2ltdWxhdGUoJ2hvdmVyJywgJ3Zpc2l0ZWQnKX0+Li4uPC9kaXY+XG4vLyB5b3UgY2FuIGV2ZW4gc2VuZCBpbiBzb21lIHdlaXJkIG9uZXMsIGFzIGxvbmcgYXMgaXQncyBpbiBzaW1wbGUgZm9ybWF0XG4vLyBhbmQgbWF0Y2hlcyBhbiBleGlzdGluZyBydWxlIG9uIHRoZSBlbGVtZW50XG4vLyBlZyBzaW11bGF0ZSgnbnRoQ2hpbGQyJywgJzpob3ZlcjphY3RpdmUnKSBldGNcbmZ1bmN0aW9uIHNpbXVsYXRlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcHNldWRvcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHBzZXVkb3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBwc2V1ZG9zID0gKDAsIF9jbGVhbjIuZGVmYXVsdCkocHNldWRvcyk7XG4gIGlmICghcHNldWRvcykgcmV0dXJuIHt9O1xuICBpZiAoIWNhblNpbXVsYXRlKSB7XG4gICAgaWYgKCF3YXJuZWQxKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2NhblxcJ3Qgc2ltdWxhdGUgd2l0aG91dCBvbmNlIGNhbGxpbmcgc2ltdWxhdGlvbnModHJ1ZSknKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgIHdhcm5lZDEgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWlzRGV2ICYmICFpc1Rlc3QgJiYgIXdhcm5lZDIpIHtcbiAgICAgIGNvbnNvbGUud2FybignZG9uXFwndCB1c2Ugc2ltdWxhdGlvbiBvdXRzaWRlIGRldicpOyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgd2FybmVkMiA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4gcHNldWRvcy5yZWR1Y2UoZnVuY3Rpb24gKG8sIHApIHtcbiAgICByZXR1cm4gb1snZGF0YS1zaW11bGF0ZS0nICsgc2ltcGxlKHApXSA9ICcnLCBvO1xuICB9LCB7fSk7XG59XG5cbi8qKioqIGxhYmVscyAqKioqL1xuLy8gdG9nZ2xlIGZvciBkZWJ1ZyBsYWJlbHMuXG4vLyAqc2hvdWxkbid0KiBoYXZlIHRvIG1lc3Mgd2l0aCB0aGlzIG1hbnVhbGx5XG52YXIgaGFzTGFiZWxzID0gaXNEZXY7XG5cbmZ1bmN0aW9uIGNzc0xhYmVscyhib29sKSB7XG4gIGhhc0xhYmVscyA9ICEhYm9vbDtcbn1cblxuLy8gdGFrZXMgYSBzdHJpbmcsIGNvbnZlcnRzIHRvIGxvd2VyY2FzZSwgc3RyaXBzIG91dCBub25hbHBoYW51bWVyaWMuXG5mdW5jdGlvbiBzaW1wbGUoc3RyKSB7XG4gIHZhciBjaGFyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXowLTldL2csIGNoYXIpO1xufVxuXG4vLyBoYXNoZXMgYSBzdHJpbmcgdG8gc29tZXRoaW5nICd1bmlxdWUnXG4vLyB3ZSB1c2UgdGhpcyB0byBnZW5lcmF0ZSBpZHMgZm9yIHN0eWxlc1xuXG5cbmZ1bmN0aW9uIGhhc2hpZnkob2JqKSB7XG4gIHZhciBzdHIgPSBKU09OLnN0cmluZ2lmeShvYmopO1xuICB2YXIgdG9SZXQgPSAoMCwgX2hhc2gyLmRlZmF1bHQpKHN0cikudG9TdHJpbmcoMzYpO1xuICBpZiAob2JqLmxhYmVsICYmIG9iai5sYWJlbC5sZW5ndGggPiAwICYmIGlzRGV2KSB7XG4gICAgcmV0dXJuIHNpbXBsZShvYmoubGFiZWwuam9pbignLicpLCAnLScpICsgJy0nICsgdG9SZXQ7XG4gIH1cbiAgcmV0dXJuIHRvUmV0O1xufVxuXG4vLyBvZiBzaGFwZSB7ICdkYXRhLWNzcy08aWQ+JzogJycgfVxuZnVuY3Rpb24gaXNMaWtlUnVsZShydWxlKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocnVsZSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHggIT09ICd0b1N0cmluZyc7XG4gIH0pO1xuICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuICEhL2RhdGFcXC1jc3NcXC0oW2EtekEtWjAtOVxcLV9dKykvLmV4ZWMoa2V5c1swXSk7XG59XG5cbi8vIGV4dHJhY3RzIGlkIGZyb20gYSB7ICdkYXRhLWNzcy08aWQ+JzogJyd9IGxpa2Ugb2JqZWN0XG5mdW5jdGlvbiBpZEZvcihydWxlKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocnVsZSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHggIT09ICd0b1N0cmluZyc7XG4gIH0pO1xuICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHRocm93IG5ldyBFcnJvcignbm90IGEgcnVsZScpO1xuICB2YXIgcmVnZXggPSAvZGF0YVxcLWNzc1xcLShbYS16QS1aMC05XFwtX10rKS87XG4gIHZhciBtYXRjaCA9IHJlZ2V4LmV4ZWMoa2V5c1swXSk7XG4gIGlmICghbWF0Y2gpIHRocm93IG5ldyBFcnJvcignbm90IGEgcnVsZScpO1xuICByZXR1cm4gbWF0Y2hbMV07XG59XG5cbi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2oyY3NzL2oyYy9ibG9iLzVkMzgxYzJkNzIxZDA0YjU0ZmFiZTZhMTY1ZDU4NzI0N2MzMDg3Y2Ivc3JjL2hlbHBlcnMuanMjTDI4LUw2MVxuXG4vLyBcIlRva2VuaXplc1wiIHRoZSBzZWxlY3RvcnMgaW50byBwYXJ0cyByZWxldmFudCBmb3IgdGhlIG5leHQgZnVuY3Rpb24uXG4vLyBTdHJpbmdzIGFuZCBjb21tZW50cyBhcmUgbWF0Y2hlZCwgYnV0IGlnbm9yZWQgYWZ0ZXJ3YXJkcy5cbi8vIFRoaXMgaXMgbm90IGEgZnVsbCB0b2tlbml6ZXJzLiBJdCBvbmx5IHJlY29nbml6ZXMgY29tYXMsIHBhcmVudGhlc2VzLFxuLy8gc3RyaW5ncyBhbmQgY29tbWVudHMuXG4vLyByZWdleHAgZ2VuZXJhdGVkIGJ5IHNjcmlwdHMvcmVnZXhwcy5qcyB0aGVuIHRyaW1tZWQgYnkgaGFuZFxudmFyIHNlbGVjdG9yVG9rZW5pemVyID0gL1soKSxdfFwiKD86XFxcXC58W15cIlxcbl0pKlwifCcoPzpcXFxcLnxbXidcXG5dKSonfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8vZztcblxuLyoqXG4gKiBUaGlzIHdpbGwgc3BsaXQgYSBjb21hLXNlcGFyYXRlZCBzZWxlY3RvciBsaXN0IGludG8gaW5kaXZpZHVhbCBzZWxlY3RvcnMsXG4gKiBpZ25vcmluZyBjb21hcyBpbiBzdHJpbmdzLCBjb21tZW50cyBhbmQgaW4gOnBzZXVkby1zZWxlY3RvcnMocGFyYW1ldGVyLCBsaXN0cykuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuXG5mdW5jdGlvbiBzcGxpdFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3Rvci5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIFtzZWxlY3Rvcl07XG4gIH1cblxuICB2YXIgaW5kaWNlcyA9IFtdLFxuICAgICAgcmVzID0gW10sXG4gICAgICBpblBhcmVuID0gMCxcbiAgICAgIG87XG4gIC8qZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24qL1xuICB3aGlsZSAobyA9IHNlbGVjdG9yVG9rZW5pemVyLmV4ZWMoc2VsZWN0b3IpKSB7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgICBzd2l0Y2ggKG9bMF0pIHtcbiAgICAgIGNhc2UgJygnOlxuICAgICAgICBpblBhcmVuKys7YnJlYWs7XG4gICAgICBjYXNlICcpJzpcbiAgICAgICAgaW5QYXJlbi0tO2JyZWFrO1xuICAgICAgY2FzZSAnLCc6XG4gICAgICAgIGlmIChpblBhcmVuKSBicmVhaztpbmRpY2VzLnB1c2goby5pbmRleCk7XG4gICAgfVxuICB9XG4gIGZvciAobyA9IGluZGljZXMubGVuZ3RoOyBvLS07KSB7XG4gICAgcmVzLnVuc2hpZnQoc2VsZWN0b3Iuc2xpY2UoaW5kaWNlc1tvXSArIDEpKTtcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKDAsIGluZGljZXNbb10pO1xuICB9XG4gIHJlcy51bnNoaWZ0KHNlbGVjdG9yKTtcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3IoaWQsIHBhdGgpIHtcbiAgaWYgKCFpZCkge1xuICAgIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcJi9nLCAnJyk7XG4gIH1cbiAgaWYgKCFwYXRoKSByZXR1cm4gJy5jc3MtJyArIGlkICsgJyxbZGF0YS1jc3MtJyArIGlkICsgJ10nO1xuXG4gIHZhciB4ID0gc3BsaXRTZWxlY3RvcihwYXRoKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geC5pbmRleE9mKCcmJykgPj0gMCA/IFt4LnJlcGxhY2UoL1xcJi9tZywgJy5jc3MtJyArIGlkKSwgeC5yZXBsYWNlKC9cXCYvbWcsICdbZGF0YS1jc3MtJyArIGlkICsgJ10nKV0uam9pbignLCcpIC8vIHRvZG8gLSBtYWtlIHN1cmUgZWFjaCBzdWIgc2VsZWN0b3IgaGFzIGFuICZcbiAgICA6ICcuY3NzLScgKyBpZCArIHggKyAnLFtkYXRhLWNzcy0nICsgaWQgKyAnXScgKyB4O1xuICB9KS5qb2luKCcsJyk7XG5cbiAgaWYgKGNhblNpbXVsYXRlICYmIC9eXFwmXFw6Ly5leGVjKHBhdGgpICYmICEvXFxzLy5leGVjKHBhdGgpKSB7XG4gICAgeCArPSAnLC5jc3MtJyArIGlkICsgJ1tkYXRhLXNpbXVsYXRlLScgKyBzaW1wbGUocGF0aCkgKyAnXSxbZGF0YS1jc3MtJyArIGlkICsgJ11bZGF0YS1zaW11bGF0ZS0nICsgc2ltcGxlKHBhdGgpICsgJ10nO1xuICB9XG4gIHJldHVybiB4O1xufVxuXG4vLyBlbmQgaHR0cHM6Ly9naXRodWIuY29tL2oyY3NzL2oyYy9ibG9iLzVkMzgxYzJkNzIxZDA0YjU0ZmFiZTZhMTY1ZDU4NzI0N2MzMDg3Y2Ivc3JjL2hlbHBlcnMuanMjTDI4LUw2MVxuXG5cbmZ1bmN0aW9uIHRvQ1NTKF9yZWYpIHtcbiAgdmFyIHNlbGVjdG9yID0gX3JlZi5zZWxlY3RvcixcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZTtcblxuICB2YXIgcmVzdWx0ID0gcGx1Z2lucy50cmFuc2Zvcm0oeyBzZWxlY3Rvcjogc2VsZWN0b3IsIHN0eWxlOiBzdHlsZSB9KTtcbiAgcmV0dXJuIHJlc3VsdC5zZWxlY3RvciArICd7JyArICgwLCBfQ1NTUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclN0eWxlcykocmVzdWx0LnN0eWxlKSArICd9Jztcbn1cblxuZnVuY3Rpb24gZGVjb25zdHJ1Y3Qoc3R5bGUpIHtcbiAgLy8gd2UgY2FuIGJlIHN1cmUgaXQncyBub3QgaW5maW5pdGVseSBuZXN0ZWQgaGVyZVxuICB2YXIgcGxhaW4gPSB2b2lkIDAsXG4gICAgICBzZWxlY3RzID0gdm9pZCAwLFxuICAgICAgbWVkaWFzID0gdm9pZCAwLFxuICAgICAgc3VwcG9ydHMgPSB2b2lkIDA7XG4gIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5LmluZGV4T2YoJyYnKSA+PSAwKSB7XG4gICAgICBzZWxlY3RzID0gc2VsZWN0cyB8fCB7fTtcbiAgICAgIHNlbGVjdHNba2V5XSA9IHN0eWxlW2tleV07XG4gICAgfSBlbHNlIGlmIChrZXkuaW5kZXhPZignQG1lZGlhJykgPT09IDApIHtcbiAgICAgIG1lZGlhcyA9IG1lZGlhcyB8fCB7fTtcbiAgICAgIG1lZGlhc1trZXldID0gZGVjb25zdHJ1Y3Qoc3R5bGVba2V5XSk7XG4gICAgfSBlbHNlIGlmIChrZXkuaW5kZXhPZignQHN1cHBvcnRzJykgPT09IDApIHtcbiAgICAgIHN1cHBvcnRzID0gc3VwcG9ydHMgfHwge307XG4gICAgICBzdXBwb3J0c1trZXldID0gZGVjb25zdHJ1Y3Qoc3R5bGVba2V5XSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdsYWJlbCcpIHtcbiAgICAgIGlmIChzdHlsZS5sYWJlbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBsYWluID0gcGxhaW4gfHwge307XG4gICAgICAgIHBsYWluLmxhYmVsID0gaGFzTGFiZWxzID8gc3R5bGUubGFiZWwuam9pbignLicpIDogJyc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBsYWluID0gcGxhaW4gfHwge307XG4gICAgICBwbGFpbltrZXldID0gc3R5bGVba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4geyBwbGFpbjogcGxhaW4sIHNlbGVjdHM6IHNlbGVjdHMsIG1lZGlhczogbWVkaWFzLCBzdXBwb3J0czogc3VwcG9ydHMgfTtcbn1cblxuZnVuY3Rpb24gZGVjb25zdHJ1Y3RlZFN0eWxlVG9DU1MoaWQsIHN0eWxlKSB7XG4gIHZhciBjc3MgPSBbXTtcblxuICAvLyBwbHVnaW5zIGhlcmVcbiAgdmFyIHBsYWluID0gc3R5bGUucGxhaW4sXG4gICAgICBzZWxlY3RzID0gc3R5bGUuc2VsZWN0cyxcbiAgICAgIG1lZGlhcyA9IHN0eWxlLm1lZGlhcyxcbiAgICAgIHN1cHBvcnRzID0gc3R5bGUuc3VwcG9ydHM7XG5cbiAgaWYgKHBsYWluKSB7XG4gICAgY3NzLnB1c2godG9DU1MoeyBzdHlsZTogcGxhaW4sIHNlbGVjdG9yOiBzZWxlY3RvcihpZCkgfSkpO1xuICB9XG4gIGlmIChzZWxlY3RzKSB7XG4gICAgT2JqZWN0LmtleXMoc2VsZWN0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gY3NzLnB1c2godG9DU1MoeyBzdHlsZTogc2VsZWN0c1trZXldLCBzZWxlY3Rvcjogc2VsZWN0b3IoaWQsIGtleSkgfSkpO1xuICAgIH0pO1xuICB9XG4gIGlmIChtZWRpYXMpIHtcbiAgICBPYmplY3Qua2V5cyhtZWRpYXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGNzcy5wdXNoKGtleSArICd7JyArIGRlY29uc3RydWN0ZWRTdHlsZVRvQ1NTKGlkLCBtZWRpYXNba2V5XSkuam9pbignJykgKyAnfScpO1xuICAgIH0pO1xuICB9XG4gIGlmIChzdXBwb3J0cykge1xuICAgIE9iamVjdC5rZXlzKHN1cHBvcnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBjc3MucHVzaChrZXkgKyAneycgKyBkZWNvbnN0cnVjdGVkU3R5bGVUb0NTUyhpZCwgc3VwcG9ydHNba2V5XSkuam9pbignJykgKyAnfScpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBjc3M7XG59XG5cbi8vIHRoaXMgY2FjaGUgdG8gdHJhY2sgd2hpY2ggcnVsZXMgaGF2ZVxuLy8gYmVlbiBpbnNlcnRlZCBpbnRvIHRoZSBzdHlsZXNoZWV0XG52YXIgaW5zZXJ0ZWQgPSBzdHlsZVNoZWV0Lmluc2VydGVkID0ge307XG5cbi8vIGFuZCBoZWxwZXJzIHRvIGluc2VydCBydWxlcyBpbnRvIHNhaWQgc3R5bGVTaGVldFxuZnVuY3Rpb24gaW5zZXJ0KHNwZWMpIHtcbiAgaWYgKCFpbnNlcnRlZFtzcGVjLmlkXSkge1xuICAgIGluc2VydGVkW3NwZWMuaWRdID0gdHJ1ZTtcbiAgICB2YXIgZGVjb25zdHJ1Y3RlZCA9IGRlY29uc3RydWN0KHNwZWMuc3R5bGUpO1xuICAgIHZhciBydWxlcyA9IGRlY29uc3RydWN0ZWRTdHlsZVRvQ1NTKHNwZWMuaWQsIGRlY29uc3RydWN0ZWQpO1xuICAgIGluc2VydGVkW3NwZWMuaWRdID0gaXNCcm93c2VyID8gdHJ1ZSA6IHJ1bGVzO1xuICAgIHJ1bGVzLmZvckVhY2goZnVuY3Rpb24gKGNzc1J1bGUpIHtcbiAgICAgIHJldHVybiBzdHlsZVNoZWV0Lmluc2VydChjc3NSdWxlKTtcbiAgICB9KTtcbiAgfVxufVxuXG4vLyBhIHNpbXBsZSBjYWNoZSB0byBzdG9yZSBnZW5lcmF0ZWQgcnVsZXNcbnZhciByZWdpc3RlcmVkID0gc3R5bGVTaGVldC5yZWdpc3RlcmVkID0ge307XG5mdW5jdGlvbiByZWdpc3RlcihzcGVjKSB7XG4gIGlmICghcmVnaXN0ZXJlZFtzcGVjLmlkXSkge1xuICAgIHJlZ2lzdGVyZWRbc3BlYy5pZF0gPSBzcGVjO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRSZWdpc3RlcmVkKHJ1bGUpIHtcbiAgaWYgKGlzTGlrZVJ1bGUocnVsZSkpIHtcbiAgICB2YXIgcmV0ID0gcmVnaXN0ZXJlZFtpZEZvcihydWxlKV07XG4gICAgaWYgKHJldCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tnbGFtb3JdIGFuIHVuZXhwZWN0ZWQgcnVsZSBjYWNoZSBtaXNzIG9jY3VycmVkLiBUaGlzIGlzIHByb2JhYmx5IGEgc2lnbiBvZiBtdWx0aXBsZSBnbGFtb3IgaW5zdGFuY2VzIGluIHlvdXIgYXBwLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3RocmVlcG9pbnRvbmUvZ2xhbW9yL2lzc3Vlcy83OScpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG4gIHJldHVybiBydWxlO1xufVxuXG4vLyB0b2RvIC0gcGVyZlxudmFyIHJ1bGVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gdG9SdWxlKHNwZWMpIHtcbiAgcmVnaXN0ZXIoc3BlYyk7XG4gIGluc2VydChzcGVjKTtcblxuICBpZiAocnVsZUNhY2hlW3NwZWMuaWRdKSB7XG4gICAgcmV0dXJuIHJ1bGVDYWNoZVtzcGVjLmlkXTtcbiAgfVxuXG4gIHZhciByZXQgPSBfZGVmaW5lUHJvcGVydHkoe30sICdkYXRhLWNzcy0nICsgc3BlYy5pZCwgaGFzTGFiZWxzID8gc3BlYy5sYWJlbCB8fCAnJyA6ICcnKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldCwgJ3RvU3RyaW5nJywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICByZXR1cm4gJ2Nzcy0nICsgc3BlYy5pZDtcbiAgICB9XG4gIH0pO1xuICBydWxlQ2FjaGVbc3BlYy5pZF0gPSByZXQ7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIGNvbnNvbGUubG9nKHRoaXMpOyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gaXNTZWxlY3RvcihrZXkpIHtcbiAgdmFyIHBvc3NpYmxlcyA9IFsnOicsICcuJywgJ1snLCAnPicsICcgJ10sXG4gICAgICBmb3VuZCA9IGZhbHNlLFxuICAgICAgY2ggPSBrZXkuY2hhckF0KDApO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc3NpYmxlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjaCA9PT0gcG9zc2libGVzW2ldKSB7XG4gICAgICBmb3VuZCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvdW5kIHx8IGtleS5pbmRleE9mKCcmJykgPj0gMDtcbn1cblxuZnVuY3Rpb24gam9pblNlbGVjdG9ycyhhLCBiKSB7XG4gIHZhciBhcyA9IHNwbGl0U2VsZWN0b3IoYSkubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuICEoYS5pbmRleE9mKCcmJykgPj0gMCkgPyAnJicgKyBhIDogYTtcbiAgfSk7XG4gIHZhciBicyA9IHNwbGl0U2VsZWN0b3IoYikubWFwKGZ1bmN0aW9uIChiKSB7XG4gICAgcmV0dXJuICEoYi5pbmRleE9mKCcmJykgPj0gMCkgPyAnJicgKyBiIDogYjtcbiAgfSk7XG5cbiAgcmV0dXJuIGJzLnJlZHVjZShmdW5jdGlvbiAoYXJyLCBiKSB7XG4gICAgcmV0dXJuIGFyci5jb25jYXQoYXMubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gYi5yZXBsYWNlKC9cXCYvZywgYSk7XG4gICAgfSkpO1xuICB9LCBbXSkuam9pbignLCcpO1xufVxuXG5mdW5jdGlvbiBqb2luTWVkaWFRdWVyaWVzKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyAnQG1lZGlhICcgKyBhLnN1YnN0cmluZyg2KSArICcgYW5kICcgKyBiLnN1YnN0cmluZyg2KSA6IGI7XG59XG5cbmZ1bmN0aW9uIGlzTWVkaWFRdWVyeShrZXkpIHtcbiAgcmV0dXJuIGtleS5pbmRleE9mKCdAbWVkaWEnKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNTdXBwb3J0cyhrZXkpIHtcbiAgcmV0dXJuIGtleS5pbmRleE9mKCdAc3VwcG9ydHMnKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gam9pblN1cHBvcnRzKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyAnQHN1cHBvcnRzICcgKyBhLnN1YnN0cmluZyg5KSArICcgYW5kICcgKyBiLnN1YnN0cmluZyg5KSA6IGI7XG59XG5cbi8vIGZsYXR0ZW4gYSBuZXN0ZWQgYXJyYXlcbmZ1bmN0aW9uIGZsYXR0ZW4oaW5BcnIpIHtcbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW5BcnJbaV0pKSBhcnIgPSBhcnIuY29uY2F0KGZsYXR0ZW4oaW5BcnJbaV0pKTtlbHNlIGFyciA9IGFyci5jb25jYXQoaW5BcnJbaV0pO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbnZhciBwcmVmaXhlZFBzZXVkb1NlbGVjdG9ycyA9IHtcbiAgJzo6cGxhY2Vob2xkZXInOiBbJzo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcicsICc6Oi1tb3otcGxhY2Vob2xkZXInLCAnOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInXSxcbiAgJzpmdWxsc2NyZWVuJzogWyc6LXdlYmtpdC1mdWxsLXNjcmVlbicsICc6LW1vei1mdWxsLXNjcmVlbicsICc6LW1zLWZ1bGxzY3JlZW4nXVxuXG4gIC8vIG11dGFibGUhIG1vZGlmaWVzIGRlc3QuXG59O2Z1bmN0aW9uIGJ1aWxkKGRlc3QsIF9yZWYyKSB7XG4gIHZhciBfcmVmMiRzZWxlY3RvciA9IF9yZWYyLnNlbGVjdG9yLFxuICAgICAgc2VsZWN0b3IgPSBfcmVmMiRzZWxlY3RvciA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmMiRzZWxlY3RvcixcbiAgICAgIF9yZWYyJG1xID0gX3JlZjIubXEsXG4gICAgICBtcSA9IF9yZWYyJG1xID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYyJG1xLFxuICAgICAgX3JlZjIkc3VwcCA9IF9yZWYyLnN1cHAsXG4gICAgICBzdXBwID0gX3JlZjIkc3VwcCA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmMiRzdXBwLFxuICAgICAgX3JlZjIkc3JjID0gX3JlZjIuc3JjLFxuICAgICAgc3JjID0gX3JlZjIkc3JjID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYyJHNyYztcblxuXG4gIGlmICghQXJyYXkuaXNBcnJheShzcmMpKSB7XG4gICAgc3JjID0gW3NyY107XG4gIH1cbiAgc3JjID0gZmxhdHRlbihzcmMpO1xuXG4gIHNyYy5mb3JFYWNoKGZ1bmN0aW9uIChfc3JjKSB7XG4gICAgaWYgKGlzTGlrZVJ1bGUoX3NyYykpIHtcbiAgICAgIHZhciByZWcgPSBfZ2V0UmVnaXN0ZXJlZChfc3JjKTtcbiAgICAgIGlmIChyZWcudHlwZSAhPT0gJ2NzcycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgbWVyZ2UgdGhpcyBydWxlJyk7XG4gICAgICB9XG4gICAgICBfc3JjID0gcmVnLnN0eWxlO1xuICAgIH1cbiAgICBfc3JjID0gKDAsIF9jbGVhbjIuZGVmYXVsdCkoX3NyYyk7XG4gICAgaWYgKF9zcmMgJiYgX3NyYy5jb21wb3Nlcykge1xuICAgICAgYnVpbGQoZGVzdCwgeyBzZWxlY3Rvcjogc2VsZWN0b3IsIG1xOiBtcSwgc3VwcDogc3VwcCwgc3JjOiBfc3JjLmNvbXBvc2VzIH0pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhfc3JjIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChpc1NlbGVjdG9yKGtleSkpIHtcblxuICAgICAgICBpZiAocHJlZml4ZWRQc2V1ZG9TZWxlY3RvcnNba2V5XSkge1xuICAgICAgICAgIHByZWZpeGVkUHNldWRvU2VsZWN0b3JzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkKGRlc3QsIHsgc2VsZWN0b3I6IGpvaW5TZWxlY3RvcnMoc2VsZWN0b3IsIHApLCBtcTogbXEsIHN1cHA6IHN1cHAsIHNyYzogX3NyY1trZXldIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVpbGQoZGVzdCwgeyBzZWxlY3Rvcjogam9pblNlbGVjdG9ycyhzZWxlY3Rvciwga2V5KSwgbXE6IG1xLCBzdXBwOiBzdXBwLCBzcmM6IF9zcmNba2V5XSB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNZWRpYVF1ZXJ5KGtleSkpIHtcbiAgICAgICAgYnVpbGQoZGVzdCwgeyBzZWxlY3Rvcjogc2VsZWN0b3IsIG1xOiBqb2luTWVkaWFRdWVyaWVzKG1xLCBrZXkpLCBzdXBwOiBzdXBwLCBzcmM6IF9zcmNba2V5XSB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTdXBwb3J0cyhrZXkpKSB7XG4gICAgICAgIGJ1aWxkKGRlc3QsIHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBtcTogbXEsIHN1cHA6IGpvaW5TdXBwb3J0cyhzdXBwLCBrZXkpLCBzcmM6IF9zcmNba2V5XSB9KTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnY29tcG9zZXMnKSB7XG4gICAgICAgIC8vIGlnbm9yZSwgd2UgYWxyZWFkeSBkZWFsdGggd2l0aCBpdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9kZXN0ID0gZGVzdDtcbiAgICAgICAgaWYgKHN1cHApIHtcbiAgICAgICAgICBfZGVzdFtzdXBwXSA9IF9kZXN0W3N1cHBdIHx8IHt9O1xuICAgICAgICAgIF9kZXN0ID0gX2Rlc3Rbc3VwcF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX2Rlc3RbbXFdID0gX2Rlc3RbbXFdIHx8IHt9O1xuICAgICAgICAgIF9kZXN0ID0gX2Rlc3RbbXFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIF9kZXN0W3NlbGVjdG9yXSA9IF9kZXN0W3NlbGVjdG9yXSB8fCB7fTtcbiAgICAgICAgICBfZGVzdCA9IF9kZXN0W3NlbGVjdG9yXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkgPT09ICdsYWJlbCcpIHtcbiAgICAgICAgICBpZiAoaGFzTGFiZWxzKSB7XG4gICAgICAgICAgICBkZXN0LmxhYmVsID0gZGVzdC5sYWJlbC5jb25jYXQoX3NyYy5sYWJlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9kZXN0W2tleV0gPSBfc3JjW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIF9jc3MocnVsZXMpIHtcbiAgdmFyIHN0eWxlID0geyBsYWJlbDogW10gfTtcbiAgYnVpbGQoc3R5bGUsIHsgc3JjOiBydWxlcyB9KTsgLy8gbXV0YXRpdmUhIGJ1dCB3b3J0aCBpdC5cblxuICB2YXIgc3BlYyA9IHtcbiAgICBpZDogaGFzaGlmeShzdHlsZSksXG4gICAgc3R5bGU6IHN0eWxlLCBsYWJlbDogaGFzTGFiZWxzID8gc3R5bGUubGFiZWwuam9pbignLicpIDogJycsXG4gICAgdHlwZTogJ2NzcydcbiAgfTtcbiAgcmV0dXJuIHRvUnVsZShzcGVjKTtcbn1cblxudmFyIG51bGxydWxlID0ge1xuICAvLyAnZGF0YS1jc3MtbmlsJzogJydcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobnVsbHJ1bGUsICd0b1N0cmluZycsIHtcbiAgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICByZXR1cm4gJ2Nzcy1uaWwnO1xuICB9XG59KTtcblxudmFyIGlucHV0Q2FjaGVzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnID8gW251bGxydWxlLCBuZXcgV2Vha01hcCgpLCBuZXcgV2Vha01hcCgpLCBuZXcgV2Vha01hcCgpXSA6IFtudWxscnVsZV07XG5cbnZhciB3YXJuZWRXZWFrTWFwRXJyb3IgPSBmYWxzZTtcbmZ1bmN0aW9uIG11bHRpSW5kZXhDYWNoZShmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAoaW5wdXRDYWNoZXNbYXJncy5sZW5ndGhdKSB7XG4gICAgICB2YXIgY29pID0gaW5wdXRDYWNoZXNbYXJncy5sZW5ndGhdO1xuICAgICAgdmFyIGN0ciA9IDA7XG4gICAgICB3aGlsZSAoY3RyIDwgYXJncy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGlmICghY29pLmhhcyhhcmdzW2N0cl0pKSB7XG4gICAgICAgICAgY29pLnNldChhcmdzW2N0cl0sIG5ldyBXZWFrTWFwKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvaSA9IGNvaS5nZXQoYXJnc1tjdHJdKTtcbiAgICAgICAgY3RyKys7XG4gICAgICB9XG4gICAgICBpZiAoY29pLmhhcyhhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHZhciByZXQgPSBjb2kuZ2V0KGFyZ3NbY3RyXSk7XG5cbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRbcmV0LnRvU3RyaW5nKCkuc3Vic3RyaW5nKDQpXSkge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSBpdCBoYXNuJ3QgYmVlbiBmbHVzaGVkXG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBmbihhcmdzKTtcbiAgICBpZiAoaW5wdXRDYWNoZXNbYXJncy5sZW5ndGhdKSB7XG4gICAgICB2YXIgX2N0ciA9IDAsXG4gICAgICAgICAgX2NvaSA9IGlucHV0Q2FjaGVzW2FyZ3MubGVuZ3RoXTtcbiAgICAgIHdoaWxlIChfY3RyIDwgYXJncy5sZW5ndGggLSAxKSB7XG4gICAgICAgIF9jb2kgPSBfY29pLmdldChhcmdzW19jdHJdKTtcbiAgICAgICAgX2N0cisrO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgX2NvaS5zZXQoYXJnc1tfY3RyXSwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChpc0RldiAmJiAhd2FybmVkV2Vha01hcEVycm9yKSB7XG4gICAgICAgICAgdmFyIF9jb25zb2xlO1xuXG4gICAgICAgICAgd2FybmVkV2Vha01hcEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAoX2NvbnNvbGUgPSBjb25zb2xlKS53YXJuLmFwcGx5KF9jb25zb2xlLCBbJ2ZhaWxlZCBzZXR0aW5nIHRoZSBXZWFrTWFwIGNhY2hlIGZvciBhcmdzOiddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKCd0aGlzIHNob3VsZCBOT1QgaGFwcGVuLCBwbGVhc2UgZmlsZSBhIGJ1ZyBvbiB0aGUgZ2l0aHViIHJlcG8uJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxudmFyIGNhY2hlZENzcyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IG11bHRpSW5kZXhDYWNoZShfY3NzKSA6IF9jc3M7XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBydWxlcyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgcnVsZXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGlmIChydWxlc1swXSAmJiBydWxlc1swXS5sZW5ndGggJiYgcnVsZXNbMF0ucmF3KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd5b3UgZm9yZ290IHRvIGluY2x1ZGUgZ2xhbW9yL2JhYmVsIGluIHlvdXIgYmFiZWwgcGx1Z2lucy4nKTtcbiAgfVxuXG4gIHJ1bGVzID0gKDAsIF9jbGVhbjIuZGVmYXVsdCkocnVsZXMpO1xuICBpZiAoIXJ1bGVzKSB7XG4gICAgcmV0dXJuIG51bGxydWxlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlZENzcyhydWxlcyk7XG59XG5cbmNzcy5pbnNlcnQgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIHZhciBzcGVjID0ge1xuICAgIGlkOiBoYXNoaWZ5KGNzcyksXG4gICAgY3NzOiBjc3MsXG4gICAgdHlwZTogJ3JhdydcbiAgfTtcbiAgcmVnaXN0ZXIoc3BlYyk7XG4gIGlmICghaW5zZXJ0ZWRbc3BlYy5pZF0pIHtcbiAgICBzdHlsZVNoZWV0Lmluc2VydChzcGVjLmNzcyk7XG4gICAgaW5zZXJ0ZWRbc3BlYy5pZF0gPSBpc0Jyb3dzZXIgPyB0cnVlIDogW3NwZWMuY3NzXTtcbiAgfVxufTtcblxudmFyIGluc2VydFJ1bGUgPSBleHBvcnRzLmluc2VydFJ1bGUgPSBjc3MuaW5zZXJ0O1xuXG5jc3MuZ2xvYmFsID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBzdHlsZSkge1xuICBzdHlsZSA9ICgwLCBfY2xlYW4yLmRlZmF1bHQpKHN0eWxlKTtcbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuIGNzcy5pbnNlcnQodG9DU1MoeyBzZWxlY3Rvcjogc2VsZWN0b3IsIHN0eWxlOiBzdHlsZSB9KSk7XG4gIH1cbn07XG5cbnZhciBpbnNlcnRHbG9iYWwgPSBleHBvcnRzLmluc2VydEdsb2JhbCA9IGNzcy5nbG9iYWw7XG5cbmZ1bmN0aW9uIGluc2VydEtleWZyYW1lKHNwZWMpIHtcbiAgaWYgKCFpbnNlcnRlZFtzcGVjLmlkXSkge1xuICAgIHZhciBpbm5lciA9IE9iamVjdC5rZXlzKHNwZWMua2V5ZnJhbWVzKS5tYXAoZnVuY3Rpb24gKGtmKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gcGx1Z2lucy5rZXlmcmFtZXMudHJhbnNmb3JtKHsgaWQ6IHNwZWMuaWQsIG5hbWU6IGtmLCBzdHlsZTogc3BlYy5rZXlmcmFtZXNba2ZdIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdC5uYW1lICsgJ3snICsgKDAsIF9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yU3R5bGVzKShyZXN1bHQuc3R5bGUpICsgJ30nO1xuICAgIH0pLmpvaW4oJycpO1xuXG4gICAgdmFyIHJ1bGVzID0gWyctd2Via2l0LScsICctbW96LScsICctby0nLCAnJ10ubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiAnQCcgKyBwcmVmaXggKyAna2V5ZnJhbWVzICcgKyAoc3BlYy5uYW1lICsgJ18nICsgc3BlYy5pZCkgKyAneycgKyBpbm5lciArICd9JztcbiAgICB9KTtcbiAgICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICByZXR1cm4gc3R5bGVTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgfSk7XG5cbiAgICBpbnNlcnRlZFtzcGVjLmlkXSA9IGlzQnJvd3NlciA/IHRydWUgOiBydWxlcztcbiAgfVxufVxuY3NzLmtleWZyYW1lcyA9IGZ1bmN0aW9uIChuYW1lLCBrZnMpIHtcbiAgaWYgKCFrZnMpIHtcbiAgICBrZnMgPSBuYW1lLCBuYW1lID0gJ2FuaW1hdGlvbic7XG4gIH1cblxuICAvLyBkbyBub3QgaWdub3JlIGVtcHR5IGtleWZyYW1lIGRlZmluaXRpb25zIGZvciBub3cuXG4gIGtmcyA9ICgwLCBfY2xlYW4yLmRlZmF1bHQpKGtmcykgfHwge307XG4gIHZhciBzcGVjID0ge1xuICAgIGlkOiBoYXNoaWZ5KHsgbmFtZTogbmFtZSwga2ZzOiBrZnMgfSksXG4gICAgdHlwZTogJ2tleWZyYW1lcycsXG4gICAgbmFtZTogbmFtZSxcbiAgICBrZXlmcmFtZXM6IGtmc1xuICB9O1xuICByZWdpc3RlcihzcGVjKTtcbiAgaW5zZXJ0S2V5ZnJhbWUoc3BlYyk7XG4gIHJldHVybiBuYW1lICsgJ18nICsgc3BlYy5pZDtcbn07XG5cbi8vIHdlIGRvbid0IGdvIGFsbCBvdXQgZm9yIGZvbnRzIGFzIG11Y2gsIGdpdmluZyBhIHNpbXBsZSBmb250IGxvYWRpbmcgc3RyYXRlZ3lcbi8vIHVzZSBhIGZhbmNpZXIgbGliIGlmIHlvdSBuZWVkIG1vYXIgcG93ZXJcbmNzcy5mb250RmFjZSA9IGZ1bmN0aW9uIChmb250KSB7XG4gIGZvbnQgPSAoMCwgX2NsZWFuMi5kZWZhdWx0KShmb250KTtcbiAgdmFyIHNwZWMgPSB7XG4gICAgaWQ6IGhhc2hpZnkoZm9udCksXG4gICAgdHlwZTogJ2ZvbnQtZmFjZScsXG4gICAgZm9udDogZm9udFxuICB9O1xuICByZWdpc3RlcihzcGVjKTtcbiAgaW5zZXJ0Rm9udEZhY2Uoc3BlYyk7XG5cbiAgcmV0dXJuIGZvbnQuZm9udEZhbWlseTtcbn07XG5cbnZhciBmb250RmFjZSA9IGV4cG9ydHMuZm9udEZhY2UgPSBjc3MuZm9udEZhY2U7XG52YXIga2V5ZnJhbWVzID0gZXhwb3J0cy5rZXlmcmFtZXMgPSBjc3Mua2V5ZnJhbWVzO1xuXG5mdW5jdGlvbiBpbnNlcnRGb250RmFjZShzcGVjKSB7XG4gIGlmICghaW5zZXJ0ZWRbc3BlYy5pZF0pIHtcbiAgICB2YXIgcnVsZSA9ICdAZm9udC1mYWNleycgKyAoMCwgX0NTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMpKHNwZWMuZm9udCkgKyAnfSc7XG4gICAgc3R5bGVTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgaW5zZXJ0ZWRbc3BlYy5pZF0gPSBpc0Jyb3dzZXIgPyB0cnVlIDogW3J1bGVdO1xuICB9XG59XG5cbi8vIHJlaHlkcmF0ZSB0aGUgaW5zZXJ0aW9uIGNhY2hlIHdpdGggaWRzIHNlbnQgZnJvbVxuLy8gcmVuZGVyU3RhdGljIC8gcmVuZGVyU3RhdGljT3B0aW1pemVkXG5mdW5jdGlvbiByZWh5ZHJhdGUoaWRzKSB7XG4gIC8vIGxvYWQgdXAgaWRzXG4gICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KShpbnNlcnRlZCwgaWRzLnJlZHVjZShmdW5jdGlvbiAobywgaSkge1xuICAgIHJldHVybiBvW2ldID0gdHJ1ZSwgbztcbiAgfSwge30pKTtcbiAgLy8gYXNzdW1lIGNzcyBsb2FkZWQgc2VwYXJhdGVseVxufVxuXG4vLyBjbGVhcnMgb3V0IHRoZSBjYWNoZSBhbmQgZW1wdGllcyB0aGUgc3R5bGVzaGVldFxuLy8gYmVzdCBmb3IgdGVzdHMsIHRob3VnaCB0aGVyZSBtaWdodCBiZSBzb21lIHZhbHVlIGZvciBTU1IuXG5cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBpbnNlcnRlZCA9IHN0eWxlU2hlZXQuaW5zZXJ0ZWQgPSB7fTtcbiAgcmVnaXN0ZXJlZCA9IHN0eWxlU2hlZXQucmVnaXN0ZXJlZCA9IHt9O1xuICBydWxlQ2FjaGUgPSB7fTtcbiAgc3R5bGVTaGVldC5mbHVzaCgpO1xuICBzdHlsZVNoZWV0LmluamVjdCgpO1xufVxuXG52YXIgcHJlc2V0cyA9IGV4cG9ydHMucHJlc2V0cyA9IHtcbiAgbW9iaWxlOiAnKG1pbi13aWR0aDogNDAwcHgpJyxcbiAgTW9iaWxlOiAnQG1lZGlhIChtaW4td2lkdGg6IDQwMHB4KScsXG4gIHBoYWJsZXQ6ICcobWluLXdpZHRoOiA1NTBweCknLFxuICBQaGFibGV0OiAnQG1lZGlhIChtaW4td2lkdGg6IDU1MHB4KScsXG4gIHRhYmxldDogJyhtaW4td2lkdGg6IDc1MHB4KScsXG4gIFRhYmxldDogJ0BtZWRpYSAobWluLXdpZHRoOiA3NTBweCknLFxuICBkZXNrdG9wOiAnKG1pbi13aWR0aDogMTAwMHB4KScsXG4gIERlc2t0b3A6ICdAbWVkaWEgKG1pbi13aWR0aDogMTAwMHB4KScsXG4gIGhkOiAnKG1pbi13aWR0aDogMTIwMHB4KScsXG4gIEhkOiAnQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCknXG59O1xuXG52YXIgc3R5bGUgPSBleHBvcnRzLnN0eWxlID0gY3NzO1xuXG5mdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgc3R5bGVzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHJldHVybiBzdHlsZShzdHlsZXMpO1xuICB9XG4gIHJldHVybiBjc3MoX2RlZmluZVByb3BlcnR5KHt9LCBzZWxlY3Rvciwgc3R5bGVzKSk7XG59XG52YXIgJCA9IGV4cG9ydHMuJCA9IHNlbGVjdDtcblxuZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVzID0gQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIHN0eWxlc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHJldHVybiBjc3MoX2RlZmluZVByb3BlcnR5KHt9LCBzZWxlY3RvciArICcgJicsIHN0eWxlcykpO1xufVxuXG52YXIgbWVyZ2UgPSBleHBvcnRzLm1lcmdlID0gY3NzO1xudmFyIGNvbXBvc2UgPSBleHBvcnRzLmNvbXBvc2UgPSBjc3M7XG5cbmZ1bmN0aW9uIG1lZGlhKHF1ZXJ5KSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgcnVsZXMgPSBBcnJheShfbGVuNSA+IDEgPyBfbGVuNSAtIDEgOiAwKSwgX2tleTUgPSAxOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgcnVsZXNbX2tleTUgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICByZXR1cm4gY3NzKF9kZWZpbmVQcm9wZXJ0eSh7fSwgJ0BtZWRpYSAnICsgcXVlcnksIHJ1bGVzKSk7XG59XG5cbmZ1bmN0aW9uIHBzZXVkbyhzZWxlY3Rvcikge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0eWxlcyA9IEFycmF5KF9sZW42ID4gMSA/IF9sZW42IC0gMSA6IDApLCBfa2V5NiA9IDE7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBzdHlsZXNbX2tleTYgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICByZXR1cm4gY3NzKF9kZWZpbmVQcm9wZXJ0eSh7fSwgc2VsZWN0b3IsIHN0eWxlcykpO1xufVxuXG4vLyBhbGxsbGxsIHRoZSBwc2V1ZG9jbGFzc2VzXG5cbmZ1bmN0aW9uIGFjdGl2ZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzphY3RpdmUnLCB4KTtcbn1cblxuZnVuY3Rpb24gYW55KHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmFueScsIHgpO1xufVxuXG5mdW5jdGlvbiBjaGVja2VkKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmNoZWNrZWQnLCB4KTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZWQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6ZGlzYWJsZWQnLCB4KTtcbn1cblxuZnVuY3Rpb24gZW1wdHkoeCkge1xuICByZXR1cm4gcHNldWRvKCc6ZW1wdHknLCB4KTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlZCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzplbmFibGVkJywgeCk7XG59XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmRlZmF1bHQnLCB4KTsgLy8gbm90ZSAnX2RlZmF1bHQnIG5hbWVcbn1cblxuZnVuY3Rpb24gZmlyc3QoeCkge1xuICByZXR1cm4gcHNldWRvKCc6Zmlyc3QnLCB4KTtcbn1cblxuZnVuY3Rpb24gZmlyc3RDaGlsZCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpmaXJzdC1jaGlsZCcsIHgpO1xufVxuXG5mdW5jdGlvbiBmaXJzdE9mVHlwZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpmaXJzdC1vZi10eXBlJywgeCk7XG59XG5cbmZ1bmN0aW9uIGZ1bGxzY3JlZW4oeCkge1xuICByZXR1cm4gcHNldWRvKCc6ZnVsbHNjcmVlbicsIHgpO1xufVxuXG5mdW5jdGlvbiBmb2N1cyh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpmb2N1cycsIHgpO1xufVxuXG5mdW5jdGlvbiBob3Zlcih4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpob3ZlcicsIHgpO1xufVxuXG5mdW5jdGlvbiBpbmRldGVybWluYXRlKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmluZGV0ZXJtaW5hdGUnLCB4KTtcbn1cblxuZnVuY3Rpb24gaW5SYW5nZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzppbi1yYW5nZScsIHgpO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmludmFsaWQnLCB4KTtcbn1cblxuZnVuY3Rpb24gbGFzdENoaWxkKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmxhc3QtY2hpbGQnLCB4KTtcbn1cblxuZnVuY3Rpb24gbGFzdE9mVHlwZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpsYXN0LW9mLXR5cGUnLCB4KTtcbn1cblxuZnVuY3Rpb24gbGVmdCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpsZWZ0JywgeCk7XG59XG5cbmZ1bmN0aW9uIGxpbmsoeCkge1xuICByZXR1cm4gcHNldWRvKCc6bGluaycsIHgpO1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6b25seS1jaGlsZCcsIHgpO1xufVxuXG5mdW5jdGlvbiBvbmx5T2ZUeXBlKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOm9ubHktb2YtdHlwZScsIHgpO1xufVxuXG5mdW5jdGlvbiBvcHRpb25hbCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpvcHRpb25hbCcsIHgpO1xufVxuXG5mdW5jdGlvbiBvdXRPZlJhbmdlKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOm91dC1vZi1yYW5nZScsIHgpO1xufVxuXG5mdW5jdGlvbiByZWFkT25seSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpyZWFkLW9ubHknLCB4KTtcbn1cblxuZnVuY3Rpb24gcmVhZFdyaXRlKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOnJlYWQtd3JpdGUnLCB4KTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZWQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6cmVxdWlyZWQnLCB4KTtcbn1cblxuZnVuY3Rpb24gcmlnaHQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6cmlnaHQnLCB4KTtcbn1cblxuZnVuY3Rpb24gcm9vdCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpyb290JywgeCk7XG59XG5cbmZ1bmN0aW9uIHNjb3BlKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOnNjb3BlJywgeCk7XG59XG5cbmZ1bmN0aW9uIHRhcmdldCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzp0YXJnZXQnLCB4KTtcbn1cblxuZnVuY3Rpb24gdmFsaWQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6dmFsaWQnLCB4KTtcbn1cblxuZnVuY3Rpb24gdmlzaXRlZCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzp2aXNpdGVkJywgeCk7XG59XG5cbi8vIHBhcmFtZXRlcml6ZWQgcHNldWRvY2xhc3Nlc1xuZnVuY3Rpb24gZGlyKHAsIHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmRpcignICsgcCArICcpJywgeCk7XG59XG5mdW5jdGlvbiBsYW5nKHAsIHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmxhbmcoJyArIHAgKyAnKScsIHgpO1xufVxuZnVuY3Rpb24gbm90KHAsIHgpIHtcbiAgLy8gc2hvdWxkIHRoaXMgYmUgYSBwbHVnaW4/XG4gIHZhciBzZWxlY3RvciA9IHAuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geC50cmltKCk7XG4gIH0pLm1hcChmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiAnOm5vdCgnICsgeCArICcpJztcbiAgfSk7XG4gIGlmIChzZWxlY3Rvci5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gcHNldWRvKCc6bm90KCcgKyBwICsgJyknLCB4KTtcbiAgfVxuICByZXR1cm4gc2VsZWN0KHNlbGVjdG9yLmpvaW4oJycpLCB4KTtcbn1cbmZ1bmN0aW9uIG50aENoaWxkKHAsIHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOm50aC1jaGlsZCgnICsgcCArICcpJywgeCk7XG59XG5mdW5jdGlvbiBudGhMYXN0Q2hpbGQocCwgeCkge1xuICByZXR1cm4gcHNldWRvKCc6bnRoLWxhc3QtY2hpbGQoJyArIHAgKyAnKScsIHgpO1xufVxuZnVuY3Rpb24gbnRoTGFzdE9mVHlwZShwLCB4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpudGgtbGFzdC1vZi10eXBlKCcgKyBwICsgJyknLCB4KTtcbn1cbmZ1bmN0aW9uIG50aE9mVHlwZShwLCB4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpudGgtb2YtdHlwZSgnICsgcCArICcpJywgeCk7XG59XG5cbi8vIHBzZXVkb2VsZW1lbnRzXG5mdW5jdGlvbiBhZnRlcih4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzo6YWZ0ZXInLCB4KTtcbn1cbmZ1bmN0aW9uIGJlZm9yZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzo6YmVmb3JlJywgeCk7XG59XG5mdW5jdGlvbiBmaXJzdExldHRlcih4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzo6Zmlyc3QtbGV0dGVyJywgeCk7XG59XG5mdW5jdGlvbiBmaXJzdExpbmUoeCkge1xuICByZXR1cm4gcHNldWRvKCc6OmZpcnN0LWxpbmUnLCB4KTtcbn1cbmZ1bmN0aW9uIHNlbGVjdGlvbih4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzo6c2VsZWN0aW9uJywgeCk7XG59XG5mdW5jdGlvbiBiYWNrZHJvcCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzo6YmFja2Ryb3AnLCB4KTtcbn1cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyKHgpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RocmVlcG9pbnRvbmUvZ2xhbW9yL2lzc3Vlcy8xNFxuICByZXR1cm4gY3NzKHsgJzo6cGxhY2Vob2xkZXInOiB4IH0pO1xufVxuXG4vKioqIGhlbHBlcnMgZm9yIHdlYiBjb21wb25lbnRzICoqKi9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aHJlZXBvaW50b25lL2dsYW1vci9pc3N1ZXMvMTZcblxuZnVuY3Rpb24gY3NzRm9yKCkge1xuICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIHJ1bGVzID0gQXJyYXkoX2xlbjcpLCBfa2V5NyA9IDA7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICBydWxlc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICB9XG5cbiAgcnVsZXMgPSAoMCwgX2NsZWFuMi5kZWZhdWx0KShydWxlcyk7XG4gIHJldHVybiBydWxlcyA/IHJ1bGVzLm1hcChmdW5jdGlvbiAocikge1xuICAgIHZhciBzdHlsZSA9IHsgbGFiZWw6IFtdIH07XG4gICAgYnVpbGQoc3R5bGUsIHsgc3JjOiByIH0pOyAvLyBtdXRhdGl2ZSEgYnV0IHdvcnRoIGl0LlxuICAgIHJldHVybiBkZWNvbnN0cnVjdGVkU3R5bGVUb0NTUyhoYXNoaWZ5KHN0eWxlKSwgZGVjb25zdHJ1Y3Qoc3R5bGUpKS5qb2luKCcnKTtcbiAgfSkuam9pbignJykgOiAnJztcbn1cblxuZnVuY3Rpb24gYXR0cmlic0ZvcigpIHtcbiAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBydWxlcyA9IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgcnVsZXNbX2tleThdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgfVxuXG4gIHJ1bGVzID0gKDAsIF9jbGVhbjIuZGVmYXVsdCkocnVsZXMpO1xuICB2YXIgaHRtbEF0dHJpYnV0ZXMgPSBydWxlcyA/IHJ1bGVzLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgIGlkRm9yKHJ1bGUpOyAvLyB0aHJvd2F3YXkgY2hlY2sgZm9yIHJ1bGVcbiAgICB2YXIga2V5ID0gT2JqZWN0LmtleXMocnVsZSlbMF0sXG4gICAgICAgIHZhbHVlID0gcnVsZVtrZXldO1xuICAgIHJldHVybiBrZXkgKyAnPVwiJyArICh2YWx1ZSB8fCAnJykgKyAnXCInO1xuICB9KS5qb2luKCcgJykgOiAnJztcblxuICByZXR1cm4gaHRtbEF0dHJpYnV0ZXM7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSBcImdsYW1vclwiO1xuXG5jb25zdCBpY29uU3R5bGUgPSBjc3Moe1xuICBoZWlnaHQ6IFwiMjVweFwiLFxuICB3aWR0aDogXCIxOXB4XCJcbn0pO1xuXG5jb25zdCBpdGVtU3R5bGUgPSBjc3Moe1xuICB3aWR0aDogXCIxMDAlXCIsXG4gIGJhY2tncm91bmQ6IFwidHJhbnNwYXJlbnRcIixcbiAgcGFkZGluZzogXCIxMHB4IDE1cHhcIixcbiAgZm9udFdlaWdodDogXCI3MDBcIixcbiAgY29sb3I6IFwiI2VmZlwiLFxuICBib3JkZXJSYWRpdXM6IFwiNXB4XCIsXG4gIGZvbnRTaXplOiBcIi44NWVtXCIsXG4gIGJvcmRlckJvdHRvbTogXCIxcHggZGFzaGVkICNlZWVcIixcbiAgXCI6bGFzdC1vZi10eXBlXCI6IHtcbiAgICBib3JkZXJCb3R0b206IDBcbiAgfSxcbiAgXCI6aG92ZXJcIjoge1xuICAgIGJhY2tncm91bmQ6IFwiIzc2ZTNkY1wiLFxuICAgIGNvbG9yOiBcIiNmZmZcIixcbiAgICBjdXJzb3I6IFwicG9pbnRlclwiXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBQbGFjZUl0ZW0ocHJvcHMpIHtcbiAgY29uc3QgeyBpdGVtLCBpdGVtQ2xhc3MsIGljb25DbGFzcywgZ2V0SXRlbSB9ID0gcHJvcHM7XG4gIGNvbnN0IF9nZXRJdGVtID0gdHlwZW9mIGdldEl0ZW0gPT0gXCJmdW5jdGlvblwiID8gZ2V0SXRlbSA6ICgpID0+IHt9O1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtpdGVtU3R5bGV9ICR7aXRlbUNsYXNzfWB9IG9uQ2xpY2s9e2UgPT4gX2dldEl0ZW0oaXRlbSl9PlxuICAgICAgPGltZyBjbGFzc05hbWU9e2Ake2ljb25TdHlsZX0gJHtpY29uQ2xhc3N9YH0gc3JjPXtpdGVtLmljb259IC8+XG4gICAgICB7aXRlbS50aXRsZX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuUGxhY2VJdGVtLnByb3BUeXBlcyA9IHtcbiAgaXRlbTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBpdGVtQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGljb25DbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ2V0SXRlbTogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBsYWNlSXRlbTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBQbGFjZUl0ZW0gZnJvbSBcIi4vUGxhY2VJdGVtXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiZ2xhbW9yXCI7XG5cbmNvbnN0IF9jb250Q2xhc3MgPSBjc3Moe1xuICBib3R0b206IFwiLTUycHhcIixcbiAgbGVmdDogXCIxNXB4XCIsXG4gIHdpZHRoOiBcIjQwMHB4XCIsXG4gIGJvcmRlclJhZGl1czogXCI1cHhcIixcbiAgYmFja2dyb3VuZDogXCIjMDBhZmFhXCJcbn0pO1xuXG5jb25zdCBQbGFjZUl0ZW1zID0gcHJvcHMgPT4ge1xuICBjb25zdCB7IGNvbnRhaW5lckNsYXNzLCBnZXRJdGVtLCBpdGVtcywgaWNvbkNsYXNzLCBpdGVtQ2xhc3MgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtfY29udENsYXNzfSAke2NvbnRhaW5lckNsYXNzfWB9PlxuICAgICAge2l0ZW1zLm1hcChpdGVtID0+IChcbiAgICAgICAgPFBsYWNlSXRlbVxuICAgICAgICAgIGljb25DbGFzcz17aWNvbkNsYXNzfVxuICAgICAgICAgIGl0ZW1DbGFzcz17aXRlbUNsYXNzfVxuICAgICAgICAgIGdldEl0ZW09e2dldEl0ZW19XG4gICAgICAgICAgaXRlbT17aXRlbX1cbiAgICAgICAgICBrZXk9e2l0ZW0udGl0bGV9XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblBsYWNlSXRlbXMucHJvcFR5cGVzID0ge1xuICBpdGVtczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIGl0ZW1DbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGFpbmVyQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGljb25DbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ2V0SXRlbTogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBsYWNlSXRlbXM7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgbWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFBsYWNlSW5wdXQgZnJvbSBcIi4vUGxhY2VJbnB1dFwiO1xuaW1wb3J0IFBsYWNlSXRlbXMgZnJvbSBcIi4vUGxhY2VJdGVtc1wiO1xuaW1wb3J0IHBsYWNlQnVpbGRlciBmcm9tIFwiLi8uLi8uLi9saWJzL3BsYWNlQnVpbGRlclwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IEhNYXAgZnJvbSBcIi4vLi4vSE1hcFwiO1xuaW1wb3J0IEhNYXBNYXJrZXIgZnJvbSBcIi4vLi4vSE1hcC9vYmplY3RzL01hcmtlclwiO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSBcImdsYW1vclwiO1xuXG5jb25zdCBwbGFjZVN0eWxlID0gY3NzKHtcbiAgcGFkZGluZ1JpZ2h0OiBcIjE1cHhcIixcbiAgcGFkZGluZ0xlZnQ6IFwiMTVweFwiLFxuICBtYXJnaW5SaWdodDogXCJhdXRvXCIsXG4gIG1hcmdpbkxlZnQ6IFwiYXV0b1wiLFxuICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG59KTtcblxuY29uc3QgUGxhY2UgPSBtZW1vKHByb3BzID0+IHtcbiAgY29uc3Qge1xuICAgIGlucHV0U3R5bGUsIC8vIFN0eWxlcyBmb3IgdGhlIGlucHV0XG4gICAgaW5wdXRDbGFzc05hbWUsIC8vIENsYXNzIG5hbWUgZm9yIGlucHV0IGV4dGVybmFsIHN0eWxlc1xuICAgIGl0ZW1Db250YWluZXJDbGFzcywgLy8gUGxhY2UgcmVzdWx0IGl0ZW0gY29udGFpbmVyIGNsYXNzXG4gICAgaWNvbkNsYXNzLCAvLyBQbGFjZSByZXN1bHQgaXRlbSBpY29uIGNsYXNzXG4gICAgaXRlbUNsYXNzLCAvLyBQbGFjZSByZXN1bHQgaXRlbSBjbGFzc1xuICAgIHBsYWNlQ2xhc3NOYW1lLCAvLyBDbGFzcyBmb3IgdGhlIGFjdHVhbCBjb250YWluZXIgZm9yIHRoZSB3aG9sZSBlbGVtZW50XG4gICAgbGlicmFyeSwgLy8gVHlwZSBvZiBwbGFjZSBsaWJyYXJ5IHRvIHVzZSBmb3IgdGhlIHJlcXVlc3RzXG4gICAgZ2V0SXRlbSwgLy8gQ2FsbGJhY2sgd2hlbiBhbiBpdGVtIGlzIGNsaWNrZWQgaW4gdGhlIHJlc3VsdFxuICAgIHF1ZXJ5LCAvLyBQYXNzaW5nIHRoZSBxdWVyeSBleHRlcm5hbGx5IHRvIGluaXRpYXRlIHRoZSByZXF1ZXN0IG9uIGxvYWQgYWZ0ZXIgZ2V0dGluZyB0aGUgbG9jYXRpb24gb2YgdGhlIHVzZXJcbiAgICBjYXRlZ29yeSwgLy8gQ2F0ZWdvcnkgb2YgdGhlIHNlYXJjaFxuICAgIG1hcmtlck9wdGlvbnMsIC8vIE9wdGlvbnMgZm9yIHRoZSBtYXJrZXJcbiAgICBtYXJrZXJJY29uLCAvLyBJY29uIGZvciB0aGUgbWFya2VyXG4gICAgbWFya2VyVHlwZSwgLy8gVHlwZSBvZiBtYXJrZXIgaWNvblxuICAgIG11bHRpTWFya2VyLCAvLyBhbGxvdyBmb3IgbWFueSBtYXJrZXJzXG4gICAgbWFwT3B0aW9ucywgLy8gT3B0aW9ucyB0byBjb25zaWRlciB3aGVuIGxvYWRpbmcgdGhlIG1hcFxuICAgIHBsYXRmb3JtIC8vIFBsYXRmb3JtIHBhc3NlZCBieSB0aGUgcGxhdGZvcm0gcGFyZW50IGNvbXBvbmVudFxuICB9ID0gcHJvcHM7XG5cbiAgLy8gU3RvcmVzIHRoZSBzZWFyY2ggdmFsdWVzXG4gIGNvbnN0IFtzZWFyY2hWYWx1ZSwgc2V0U2VhcmNoVmFsdWVdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IGhhbmRsZUdldFZhbHVlID0gdmFsdWUgPT4ge1xuICAgIHNldFNlYXJjaFZhbHVlKHZhbHVlKTtcbiAgICAvLyBVcGRhdGUgdGhlIHBhcmFtcyAgYXMgd2VsbFxuICAgIHNldFBhcmFtcyh7IC4uLnBhcmFtcywgcTogdmFsdWUgfSk7XG4gIH07XG4gIC8vIEVuc3VyZSB0aGF0IHN1cHBvcnRlZCBsaWJyYXJ5IHR5cGUgaXMgcGFzc2VkLiBEZWZhdWx0cyB0byBzZWFyY2hcbiAgY29uc3QgdHlwZSA9IFtcbiAgICBcInNlYXJjaFwiLFxuICAgIFwiY2F0ZWdvcmllc1wiLFxuICAgIFwiYXJvdW5kXCIsXG4gICAgXCJleHBsb3JlXCIsXG4gICAgXCJoZXJlXCIsXG4gICAgXCJzdWdnZXN0XCJcbiAgXS5pbmNsdWRlcyhsaWJyYXJ5KVxuICAgID8gbGlicmFyeVxuICAgIDogXCJzZWFyY2hcIjtcbiAgY29uc3QgW3NlYXJjaFJlc3VsdCwgc2V0U2VhcmNoUmVzdWx0XSA9IHVzZVN0YXRlKFtdKTtcbiAgLy8gUGFyYW1zIGZvciB0aGUgcGxhY2UgcmVxdWVzdFxuICBjb25zdCBbcGFyYW1zLCBzZXRQYXJhbXNdID0gdXNlU3RhdGUoe1xuICAgIHE6IHNlYXJjaFZhbHVlIHx8IHF1ZXJ5LFxuICAgIGNhdDogY2F0ZWdvcnlcbiAgfSk7XG5cbiAgY29uc3QgW3VwZGF0ZU1hcmtlciwgc2V0VXBkYXRlTWFya2VyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3BsYWNlTWFya2VyLCBzZXRQbGFjZU1hcmtlcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgaGFuZGxlR2V0TWFya2VyID0gbWFya2VyID0+IHtcbiAgICBzZXRQbGFjZU1hcmtlcihtYXJrZXIpO1xuICB9O1xuXG4gIC8vIE1ha2Ugc3VyZSB0aGF0IHdlIGFyZSBub3QgdXNpbmcgdGhlIHByZXNldCBjZW50ZXIgYnkgdGhlIGNvbnN1bWVyIG9mIHRoZSBsaWJyYXJ5XG4gIGNvbnN0IF9tYXBPcHRpb25zID0gbWFwT3B0aW9ucyB8fCB7fTtcbiAgZGVsZXRlIF9tYXBPcHRpb25zLmNlbnRlcjtcbiAgY29uc3QgW21hcENlbnRlciwgc2V0TWFwQ2VudGVyXSA9IHVzZVN0YXRlKHsgbGF0OiAzNywgbG5nOiA5MCB9KTtcbiAgLy8gSGVyZSBNYXAgcGxhY2UgbGlicmFyeSByZXF1aXJlcyB0aGUgdXNlIFwiYXRcIiBpbiB0aGUgcGFyYW1zIHdoaWNoIGRlZmluZXMgdGhlIGNvbnRleHQgZm9yIHRoZSBzZWFyY2guIFRvIG1pbmltaXplIHRoZSBvdmVyaGVhZCwgd2UgYXJlIHVzaW5nIHRoZSBpbmJ1aWx0IGJyb3dzZXIgZ2VvbG9jYXRpb24gQVBJLCB0aGlzIGNvbXBvbmVudCB3aWxsIHRocm93IGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgR2VvbG9jYXRpb25cbiAgaWYgKG5hdmlnYXRvci5nZW9sb2NhdGlvbikge1xuICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24ocG9zaXRpb24gPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjb29yZHM6IHsgbGF0aXR1ZGUsIGxvbmdpdHVkZSB9XG4gICAgICB9ID0gcG9zaXRpb247XG4gICAgICBjb25zdCBjb29yZHMgPSB7IGxhdDogbGF0aXR1ZGUsIGxuZzogbG9uZ2l0dWRlIH07XG4gICAgICBsZXQgX3BhcmFtcyA9IHBhcmFtcztcbiAgICAgIF9wYXJhbXMuYXQgPSBgJHtsYXRpdHVkZX0sJHtsb25naXR1ZGV9OzEwMDAwYDtcbiAgICAgIHNldFVwZGF0ZU1hcmtlcighbXVsdGlNYXJrZXIpO1xuICAgICAgLy8gVXBkYXRlIHRoZSBwYXJhbXNcbiAgICAgIHNldFBhcmFtcyhfcGFyYW1zKTtcbiAgICAgIC8vIFNldCB0aGUgbWFwQ2VudGVyXG4gICAgICBzZXRNYXBDZW50ZXIoY29vcmRzKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhcIkdlb2xvY2F0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLlwiKTtcbiAgfVxuXG4gIC8vIEhhbmRsZXMgd2hlbiBhIHJlc3VsdCBpdGVtIGlzIGNsaWNrZWRcbiAgY29uc3QgaGFuZGxlR2V0SXRlbSA9IGl0ZW0gPT4ge1xuICAgIC8vIFByZXZlbnQgZm9yIGZhaWx1cmUgd2hlbiBjYWxsaW5nICd1bmRlZmluZWQnIGFzIGZ1bmN0aW9uXG4gICAgY29uc3QgX2dldEl0ZW0gPSB0eXBlb2YgZ2V0SXRlbSA9PSBcImZ1bmN0aW9uXCIgPyBnZXRJdGVtIDogKCkgPT4ge307XG4gICAgc2V0U2VhcmNoUmVzdWx0KFtdKTtcbiAgICAvLyBPbmx5IG5vbiBtdWx0aSBtYXJrZXIgc2hvdWxkIHVwZGF0ZSB0aGUgY3VycmVudCBtYXJrZXJcbiAgICBzZXRVcGRhdGVNYXJrZXIoIW11bHRpTWFya2VyKTtcbiAgICBzZXRNYXBDZW50ZXIoeyBsYXQ6IGl0ZW0ucG9zaXRpb25bMF0sIGxuZzogaXRlbS5wb3NpdGlvblsxXSB9KTtcbiAgICBfZ2V0SXRlbShpdGVtKTtcbiAgfTtcblxuICBjb25zdCBwbGFjZSA9IHBsYWNlQnVpbGRlcihwbGF0Zm9ybSwgdHlwZSk7XG4gIC8vIERlZmluZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGhhbmRsZSBkYXRhIG9uIHN1Y2Nlc3M6XG4gIGZ1bmN0aW9uIG9uUmVzdWx0KGRhdGEpIHtcbiAgICBzZXRTZWFyY2hSZXN1bHQoZGF0YS5pdGVtcyB8fCBkYXRhLnN1Z2dlc3Rpb25zIHx8IGRhdGEucmVzdWx0cy5pdGVtcyk7XG4gIH1cbiAgLy8gRGVmaW5lIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gaGFuZGxlIGVycm9yczpcbiAgZnVuY3Rpb24gb25FcnJvcihkYXRhKSB7XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG4gIH1cbiAgLy8gT25seSBtYWtlIHRoZSBjYWxsIHdoZW4gdGhlICdhdCcgb2YgdGhlIHBhcmFtcyBpcyBzZXQsIHRocm91Z2ggdGhlIGdlb2xvY2F0aW9uIEFQSSBvZiB0aGUgYnJvd3NlclxuICBpZiAoKHBhcmFtcy5xIHx8IHBhcmFtcy5jYXQpICYmIHBhcmFtcy5hdCkge1xuICAgIHBsYWNlLnJlcXVlc3QocGFyYW1zLCB7fSwgb25SZXN1bHQsIG9uRXJyb3IpO1xuICB9XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Ake3BsYWNlU3R5bGV9ICR7cGxhY2VDbGFzc05hbWV9YH0+XG4gICAgICA8UGxhY2VJbnB1dFxuICAgICAgICBjbGFzc05hbWU9e2lucHV0Q2xhc3NOYW1lIHx8IFwiXCJ9XG4gICAgICAgIHN0eWxlPXtpbnB1dFN0eWxlfVxuICAgICAgICBnZXRWYWx1ZT17aGFuZGxlR2V0VmFsdWV9XG4gICAgICAvPlxuICAgICAgeyEhc2VhcmNoUmVzdWx0Lmxlbmd0aCAmJiAoXG4gICAgICAgIDxQbGFjZUl0ZW1zXG4gICAgICAgICAgY29udGFpbmVyQ2xhc3M9e2l0ZW1Db250YWluZXJDbGFzc31cbiAgICAgICAgICBpY29uQ2xhc3M9e2ljb25DbGFzc31cbiAgICAgICAgICBpdGVtQ2xhc3M9e2l0ZW1DbGFzc31cbiAgICAgICAgICBnZXRJdGVtPXtoYW5kbGVHZXRJdGVtfVxuICAgICAgICAgIGl0ZW1zPXtzZWFyY2hSZXN1bHR9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAgeyEhbWFwQ2VudGVyLmxhdCAmJiAoXG4gICAgICAgIDxITWFwXG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGhlaWdodDogXCIyMDBweFwiLFxuICAgICAgICAgICAgd2lkdGg6IFwiNDAwcHhcIlxuICAgICAgICAgIH19XG4gICAgICAgICAgcGxhdGZvcm09e3BsYXRmb3JtfVxuICAgICAgICAgIG9wdGlvbnM9e3Byb3BzLm9wdGlvbnN9XG4gICAgICAgICAgbWFwT3B0aW9ucz17eyBjZW50ZXI6IG1hcENlbnRlciwgem9vbTogNywgLi4uX21hcE9wdGlvbnMgfX1cbiAgICAgICAgICBpbnRlcmFjdGl2ZT17dHJ1ZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxITWFwTWFya2VyXG4gICAgICAgICAgICBjb29yZHM9e21hcENlbnRlcn1cbiAgICAgICAgICAgIGdldE1hcmtlcj17aGFuZGxlR2V0TWFya2VyfVxuICAgICAgICAgICAgbWFya2VyPXtwbGFjZU1hcmtlcn1cbiAgICAgICAgICAgIGljb249e21hcmtlckljb259XG4gICAgICAgICAgICB0eXBlPXttYXJrZXJUeXBlfVxuICAgICAgICAgICAgb3B0aW9ucz17bWFya2VyT3B0aW9uc31cbiAgICAgICAgICAgIHVwZGF0ZU1hcmtlcj17dXBkYXRlTWFya2VyfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSE1hcD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59KTtcblxuUGxhY2UucHJvcFR5cGVzID0ge1xuICBsaWJyYXJ5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHF1ZXJ5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjYXRlZ29yeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpbnB1dENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGFpbmVyU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGlucHV0U3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgaXRlbUNvbnRhaW5lckNsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLCAvLyBQbGFjZSByZXN1bHQgaXRlbSBjb250YWluZXIgY2xhc3NcbiAgaWNvbkNsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLCAvLyBQbGFjZSByZXN1bHQgaXRlbSBpY29uIGNsYXNzXG4gIGl0ZW1DbGFzczogUHJvcFR5cGVzLnN0cmluZywgLy8gUGxhY2UgcmVzdWx0IGl0ZW0gY2xhc3NcbiAgcGxhY2VDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsIC8vIENsYXNzIGZvciB0aGUgYWN0dWFsIGNvbnRhaW5lciBmb3IgdGhlIHdob2xlIGVsZW1lbnRcbiAgZ2V0SXRlbTogUHJvcFR5cGVzLmZ1bmMsIC8vIENhbGxiYWNrIHdoZW4gYW4gaXRlbSBpcyBjbGlja2VkIGluIHRoZSByZXN1bHRcbiAgbWFya2VyT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCwgLy8gT3B0aW9ucyBmb3IgdGhlIG1hcmtlclxuICBtYXJrZXJJY29uOiBQcm9wVHlwZXMuZWxlbWVudCwgLy8gSWNvbiBmb3IgdGhlIG1hcmtlclxuICBtYXJrZXJUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLCAvLyBUeXBlIG9mIG1hcmtlciBpY29uXG4gIG11bHRpTWFya2VyOiBQcm9wVHlwZXMuYm9vbCAvLyBhbGxvdyBmb3IgbWFueSBtYXJrZXJzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQbGFjZTtcbiIsIi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHBsYXRmb3JtIFBsYXRmb3JtIG9iamVjdCB0byB1c2UgZm9yIGluaXRpYWxpemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCAocGxhdGZvcm0sIHR5cGUpID0+IHtcbiAgaWYgKCFwbGF0Zm9ybSB8fCBwbGF0Zm9ybS5BICE9IFwiYXBpLmhlcmUuY29tXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGF0Zm9ybSBzaG91bGQgYmUgb2YgSGVyZSBNYXAncyBQbGF0Zm9ybVwiKTtcbiAgfVxuICBjb25zdCBwbGFjZXNTZXJ2aWNlID0gcGxhdGZvcm0uZ2V0UGxhY2VzU2VydmljZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiYXJvdW5kXCI6XG4gICAgICByZXR1cm4gbmV3IEgucGxhY2VzLkFyb3VuZChwbGFjZXNTZXJ2aWNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYXRlZ29yaWVzXCI6XG4gICAgICByZXR1cm4gbmV3IEgucGxhY2VzLkNhdGVnb3JpZXMocGxhY2VzU2VydmljZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZXhwbG9yZVwiOlxuICAgICAgcmV0dXJuIG5ldyBILnBsYWNlcy5FeHBsb3JlKHBsYWNlc1NlcnZpY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImhlcmVcIjpcbiAgICAgIHJldHVybiBuZXcgSC5wbGFjZXMuSGVyZShwbGFjZXNTZXJ2aWNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJsb29rdXBcIjpcbiAgICAgIHJldHVybiBuZXcgSC5wbGFjZXMuTG9va3VwKHBsYWNlc1NlcnZpY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN1Z2dlc3RcIjpcbiAgICAgIHJldHVybiBuZXcgSC5wbGFjZXMuU3VnZ2VzdChwbGFjZXNTZXJ2aWNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzZWFyY2hcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG5ldyBILnBsYWNlcy5TZWFyY2gocGxhY2VzU2VydmljZSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcbiIsImltcG9ydCBIUGxhdGZvcm0gZnJvbSBcIi4vY29tcG9uZW50cy9QbGF0Zm9ybVwiO1xuaW1wb3J0IE1hcCBmcm9tIFwiLi9jb21wb25lbnRzL0hNYXBcIjtcbmltcG9ydCBQb2x5TGluZSBmcm9tIFwiLi9jb21wb25lbnRzL0hNYXAvb2JqZWN0cy9Qb2x5TGluZVwiO1xuaW1wb3J0IFBvbHlnb24gZnJvbSBcIi4vY29tcG9uZW50cy9ITWFwL29iamVjdHMvUG9seWdvblwiO1xuaW1wb3J0IE1hcmtlciBmcm9tIFwiLi9jb21wb25lbnRzL0hNYXAvb2JqZWN0cy9NYXJrZXJcIjtcbmltcG9ydCBDaXJjbGUgZnJvbSBcIi4vY29tcG9uZW50cy9ITWFwL29iamVjdHMvQ2lyY2xlXCI7XG5pbXBvcnQgUmVjdGFuZ2xlIGZyb20gXCIuL2NvbXBvbmVudHMvSE1hcC9vYmplY3RzL1JlY3RhbmdsZVwiO1xuaW1wb3J0IEdlb0NvZGUgZnJvbSBcIi4vY29tcG9uZW50cy9HZW9Db2RlXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vY29tcG9uZW50cy9Sb3V0ZVwiO1xuaW1wb3J0IExheWVyIGZyb20gXCIuL2NvbXBvbmVudHMvTGF5ZXJcIjtcbmltcG9ydCBQbGFjZXMgZnJvbSBcIi4vY29tcG9uZW50cy9QbGFjZXNcIjtcblxuZXhwb3J0IGNvbnN0IEhNYXBQb2x5TGluZSA9IFBvbHlMaW5lO1xuZXhwb3J0IGNvbnN0IEhNYXBQb2x5Z29uID0gUG9seWdvbjtcbmV4cG9ydCBjb25zdCBITWFwTWFya2VyID0gTWFya2VyO1xuZXhwb3J0IGNvbnN0IEhNYXBDaXJjbGUgPSBDaXJjbGU7XG5leHBvcnQgY29uc3QgSE1hcFJlY3RhbmdsZSA9IFJlY3RhbmdsZTtcbmV4cG9ydCBjb25zdCBITWFwUm91dGUgPSBSb3V0ZTtcbmV4cG9ydCBjb25zdCBITWFwTGF5ZXIgPSBMYXllcjtcbmV4cG9ydCBjb25zdCBITWFwR2VvQ29kZSA9IEdlb0NvZGU7XG5leHBvcnQgY29uc3QgSE1hcFBsYWNlcyA9IFBsYWNlcztcbmV4cG9ydCBjb25zdCBITWFwID0gTWFwO1xuZXhwb3J0IGRlZmF1bHQgSFBsYXRmb3JtO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBsb2FkTWFwIGZyb20gXCIuLy4uLy4uL2xpYnMvbG9hZE1hcFwiO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gXCIuLy4uLy4uL2xpYnMvZGVmYXVsdHNcIjtcbmltcG9ydCBtZXJnZSBmcm9tIFwibG9kYXNoLm1lcmdlXCI7XG5pbXBvcnQgaW5pdFBsYXRmb3JtIGZyb20gXCIuLy4uLy4uL2xpYnMvaW5pdFBsYXRmb3JtXCI7XG5cbmNvbnN0IG9wdGlvbk1lcmdlciA9IChvcHRpb25zKSA9PiBtZXJnZShkZWZhdWx0cywgb3B0aW9ucyk7XG5cbmZ1bmN0aW9uIFBsYXRmb3JtKHByb3BzKSB7XG4gIGNvbnN0IFtwbGF0Zm9ybURhdGEsIHNldFBsYXRmb3JtRGF0YV0gPSB1c2VTdGF0ZSh7XG4gICAgcGxhdGZvcm06IHt9LFxuICAgIG9wdGlvbnM6IHt9LFxuICB9KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBjb25zdCB7IHZlcnNpb24sIGludGVyYWN0aXZlLCBpbmNsdWRlVUksIGluY2x1ZGVQbGFjZXMgfSA9IHByb3BzO1xuICAgIGxvYWRNYXAocHJvcHMpLnRoZW4oKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IHBsYXRmb3JtID0gaW5pdFBsYXRmb3JtKG9wdGlvbnMpO1xuICAgICAgc2V0UGxhdGZvcm1EYXRhKHsgcGxhdGZvcm0sIG9wdGlvbnMgfSk7XG4gICAgfSk7XG4gIH0sIFtwbGF0Zm9ybURhdGEucGxhdGZvcm0uQV0pO1xuICBjb25zdCB7IHBsYXRmb3JtLCBvcHRpb25zIH0gPSBwbGF0Zm9ybURhdGE7XG5cbiAgcmV0dXJuIHBsYXRmb3JtLkEgPT0gXCJhcGkuaGVyZS5jb21cIiAmJiAob3B0aW9ucy5hcHBfY29kZSB8fCBvcHRpb25zLmFwaWtleSlcbiAgICA/IFJlYWN0LkNoaWxkcmVuLm1hcChwcm9wcy5jaGlsZHJlbiwgKGNoaWxkKSA9PiB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgcGxhdGZvcm0sIG9wdGlvbnMgfSk7XG4gICAgICB9KVxuICAgIDogbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxhdGZvcm07XG4iLCJleHBvcnQgZGVmYXVsdCAob3B0aW9ucykgPT4ge1xuICBjb25zdCB7IGFwcF9pZCwgYXBwX2NvZGUsIGFwaWtleSB9ID0gb3B0aW9ucztcbiAgaWYgKCghYXBwX2lkIHx8ICFhcHBfY29kZSkgJiYgIWFwaWtleSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbnMgbXVzdCBpbmNsdWRlIGFwcElkIGFuZCBhcHBDb2RlIE9SIGFuIGFwaUtleVwiKTtcbiAgfVxuICBpZiAodHlwZW9mIEggPT09IFwidW5kZWZpbmVkXCIgfHwgIUguc2VydmljZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkhlcmUgTWFwIEphdmFTY3JpcHRzIGlzIG5vdCBsb2FkZWQuXCIpO1xuICB9XG4gIHJldHVybiBuZXcgSC5zZXJ2aWNlLlBsYXRmb3JtKG9wdGlvbnMpO1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInYiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJyZXNvbHZlZCIsImdldCIsInNyYyIsIm9wdHMiLCJfdXRpbCIsImlzU3RyaW5nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ1cmwiLCJjYWxsYmFjayIsImVycm9yQ2FsbGJhY2siLCJpbnZva2VDYWxsYmFjayIsImlzRnVuY3Rpb24iLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwicmVhZHlTdGF0ZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJlIiwiY29uc29sZSIsImxvZyIsImJvZHkiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJsb2FkU2NyaXB0IiwiaXNBcnJheSIsInAiLCJmb3JFYWNoIiwidGhlbiIsIkVycm9yIiwicmVxdWlyZSQkMCIsImRlZmF1bHQiLCJWRVJTSU9OIiwiaW50ZXJhY3RpdmUiLCJpbmNsdWRlVUkiLCJpbmNsdWRlUGxhY2VzIiwiaXNOb2RlIiwiUHVibGljIiwiY2xvbmUiLCJtZXJnZSIsImFyZ3VtZW50cyIsIm1lcmdlX3JlY3Vyc2l2ZSIsImJhc2UiLCJleHRlbmQiLCJ0eXBlT2YiLCJrZXkiLCJyZWN1cnNpdmUiLCJhcmd2IiwicmVzdWx0Iiwic2l6ZSIsImxlbmd0aCIsImluZGV4IiwiaXRlbSIsInNpdGVtIiwiaW5wdXQiLCJzbGljZSIsInRvTG93ZXJDYXNlIiwib3V0cHV0IiwibW9kdWxlIiwid2luZG93Iiwic2NyaXB0TG9hZGVyIiwib3B0aW9ucyIsIl9vcHRpb25zIiwiZGVmYXVsdHMiLCJtZXJnZXIiLCJ2ZXJzaW9uIiwiX3YiLCJ1cmxzIiwiYnVpbGRTY3JpcHRVUkxzIiwic3BsaWNlIiwiZ2V0SlMiLCJsaW5rIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmQiLCJjYXRjaCIsImVycm9yIiwibWFwVHlwZXMiLCJub3JtYWwiLCJzYXRlbGxpdGUiLCJ0ZXJyYWluIiwiaW5jaWRlbnRzIiwidmVudWVzIiwibm9vcCIsIm1hcEV2ZW50cyIsIm1hcCIsIm5hbWUiLCJNQVBfVFlQRSIsIm1hcE9wdGlvbnMiLCJ6b29tIiwiY2VudGVyIiwibGF0IiwibG5nIiwidXNlRXZlbnRzIiwiY29udGFpbmVySWQiLCJkZWZhdWx0Q2xhc3NOYW1lIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXBwbHkiLCJmdW5jIiwidGhpc0FyZyIsImFyZ3MiLCJ1aWQiLCJ0cmFuc2Zvcm0iLCJhcnJheVByb3RvIiwiQXJyYXkiLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsIm1hc2tTcmNLZXkiLCJleGVjIiwia2V5cyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwicmVJc05hdGl2ZSIsIlJlZ0V4cCIsInJlcGxhY2UiLCJCdWZmZXIiLCJ1bmRlZmluZWQiLCJTeW1ib2wiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsImFyZyIsIm9iamVjdENyZWF0ZSIsImNyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVNYXgiLCJNYXRoIiwibWF4IiwibmF0aXZlTm93IiwiRGF0ZSIsIm5vdyIsIk1hcCIsIm5hdGl2ZUNyZWF0ZSIsImJhc2VDcmVhdGUiLCJvYmplY3QiLCJwcm90byIsImlzT2JqZWN0IiwiSGFzaCIsImVudHJpZXMiLCJ0aGlzIiwiY2xlYXIiLCJlbnRyeSIsInNldCIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU3RhY2siLCJkYXRhIiwiX19kYXRhX18iLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJuIiwiaXRlcmF0ZWUiLCJiYXNlVGltZXMiLCJTdHJpbmciLCJpc0luZGV4IiwicHVzaCIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJhcnJheSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImhhcyIsInBvcCIsImhhc2giLCJzdHJpbmciLCJnZXRNYXBEYXRhIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiZnJvbVJpZ2h0IiwiYmFzZUZvciIsImtleXNGdW5jIiwiaXRlcmFibGUiLCJwcm9wcyIsImJhc2VHZXRUYWciLCJpc093biIsInRhZyIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlSXNBcmd1bWVudHMiLCJpc09iamVjdExpa2UiLCJiYXNlSXNOYXRpdmUiLCJpc01hc2tlZCIsInRlc3QiLCJ0b1NvdXJjZSIsImJhc2VLZXlzSW4iLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiaXNQcm90b3R5cGUiLCJiYXNlTWVyZ2UiLCJzb3VyY2UiLCJzcmNJbmRleCIsImN1c3RvbWl6ZXIiLCJzdGFjayIsInNyY1ZhbHVlIiwibWVyZ2VGdW5jIiwic2FmZUdldCIsInN0YWNrZWQiLCJuZXdWYWx1ZSIsImlzQ29tbW9uIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlIiwiY29weUFycmF5IiwiYnVmZmVyIiwiaXNEZWVwIiwiY29uc3RydWN0b3IiLCJjb3B5IiwiY2xvbmVCdWZmZXIiLCJ0eXBlZEFycmF5IiwiYXJyYXlCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsIkN0b3IiLCJpc1BsYWluT2JqZWN0IiwiaXNOZXciLCJjb3B5T2JqZWN0Iiwia2V5c0luIiwidG9QbGFpbk9iamVjdCIsImluaXRDbG9uZU9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlUmVzdCIsInN0YXJ0Iiwic2V0VG9TdHJpbmciLCJvdGhlckFyZ3MiLCJvdmVyUmVzdCIsImlkZW50aXR5IiwiZ2V0VmFsdWUiLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInNob3J0T3V0Iiwib3RoZXIiLCJpc0xlbmd0aCIsImJhc2VVbmFyeSIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpbml0aWFsaXplciIsIm9wdGlvbk1lcmdlciIsImhlcmVNYXBKUyIsIngiLCJnZXRQYXRoU2VnbWVudHMiLCJwYXRoIiwicGF0aEFyciIsInNwbGl0IiwicGFydHMiLCJpIiwib2JqIiwiaXNPYmoiLCJkZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibWFwVHlwZSIsIml0ZW1zIiwibWFpblR5cGUiLCJpbmNsdWRlcyIsInBsYXRmb3JtIiwiY29udGFpbmVyIiwidmFsaWRhdGVNYXBUeXBlIiwiZGVmYXVsdExheWVycyIsImNyZWF0ZURlZmF1bHRMYXllcnMiLCJIIiwiZG90UHJvcCIsImJlaGF2aW9yIiwibWFwZXZlbnRzIiwiQmVoYXZpb3IiLCJNYXBFdmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwidWlMYW5nIiwidWkiLCJVSSIsImNyZWF0ZURlZmF1bHQiLCJzdHlsZSIsImNzcyIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJITWFwIiwiUmVhY3QiLCJjcmVhdGVSZWYiLCJzdGF0ZSIsImJ1aWxkZXIiLCJfcHJvcHMiLCJjdXJyZW50IiwiYnVpbGQiLCJfbWFwVHlwZSIsInJldCIsImluaXRNYXAiLCJpbnRlcmFjdGlvbiIsImluaXRJbnRlcmFjdGlvbiIsImluaXREZWZhdWx0VUkiLCJpbml0SW50ZXJhY3Rpb25TdHlsZXMiLCJjcmVhdGVNYXAiLCJjcmVhdGVQbGF0Zm9ybSIsImluaXRQbGF0Zm9ybSIsImNyZWF0ZUludGVyYWN0aW9uIiwiY3JlYXRlRGVmYXVsdFVJIiwiY3JlYXRlSW50ZXJhY3Rpb25TdHlsZXMiLCJzZXRTdGF0ZSIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJjaGlsZCIsImNsb25lRWxlbWVudCIsIl9fb3B0aW9ucyIsImxvYWRpbmdFbCIsImxvYWRpbmciLCJjcmVhdGVMb2FkaW5nQ29tcG9uZW50IiwiaWQiLCJjbGFzc05hbWUiLCJyZWYiLCJkaXNwbGF5Q2hpbGRyZW4iLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJib29sIiwibWFwT2JqZWN0Iiwib2JqZWN0RXZlbnRzIiwicGxhdGZvcm1PcHRpb25zIiwib2JqZWN0RXZlbnRDYWxsYmFjayIsIlBvbHlMaW5lIiwic2V0Vmlld0JvdW5kcyIsInBvaW50cyIsImxpbmVTdHJpbmciLCJnZW8iLCJMaW5lU3RyaW5nIiwicG9pbnQiLCJwdXNoUG9pbnQiLCJwb2x5TGluZSIsIlBvbHlsaW5lIiwiaW5pdE1hcE9iamVjdEV2ZW50cyIsImFkZE9iamVjdCIsImdldEJvdW5kcyIsImRpc3BsYXkiLCJQb2x5Z29uIiwiZmlyc3RFbCIsImNvb3JkcyIsInB1c2hMYXRMbmdBbHQiLCJwb2x5Z29uIiwiTWFya2VyIiwidXBkYXRlTWFya2VyIiwibWFya2VyIiwiZ2V0TWFya2VyIiwiaWNvbiIsIkRvbUljb24iLCJJY29uIiwiX21hcmtlciIsImdldE9iamVjdHMiLCJzb21lIiwiZ2V0UG9zaXRpb24iLCJzZXRQb3NpdGlvbiIsInNldENlbnRlciIsIkNpcmNsZSIsInJhZGl1cyIsImluZm8iLCJjaXJjbGUiLCJSZWN0YW5nbGUiLCJib3VuZGluZ0JveCIsIlJlY3QiLCJyZWN0YW5nbGUiLCJHZW9Db2RlIiwiZ2VvQ29kZVBhcmFtcyIsInJldmVyc2UiLCJsYW5kbWFyayIsInVzZVN0YXRlIiwibG9jYXRpb25zIiwic2V0TG9jYXRpb25zIiwib25SZXN1bHQiLCJSZXNwb25zZSIsIlZpZXciLCJSZXN1bHQiLCJnZW9jb2RlciIsImdldEdlb2NvZGluZ1NlcnZpY2UiLCJzZWFyY2giLCJhbGVydCIsInJldmVyc2VHZW9jb2RlIiwiZ2VvY29kZSIsImxvY2F0aW9uIiwiX2xvY2F0aW9uIiwiTG9jYXRpb24iLCJQbGFjZSIsIkxvY2F0aW9ucyIsIkRpc3BsYXlQb3NpdGlvbiIsIkxhdGl0dWRlIiwiTG9uZ2l0dWRlIiwicGFyYW1zIiwiUm91dGVyIiwicmVuZGVyRGVmYXVsdExpbmUiLCJyb3V0ZVBhcmFtcyIsImlzb0xpbmUiLCJsaW5lT3B0aW9ucyIsInBvbHlnb25PcHRpb25zIiwibWFya2VyT3B0aW9ucyIsInJvdXRlU2hhcGUiLCJyb3V0ZSIsImNvbXBvbmVudCIsInJlbmRlckRlZmF1bHQiLCJnZXRSb3V0aW5nU2VydmljZSIsIkZyYWdtZW50Iiwic3RhcnRQb2ludCIsIndheXBvaW50IiwibWFwcGVkUG9zaXRpb24iLCJlbmRQb2ludCIsInN0YXJ0TWFya2VyIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJlbmRNYXJrZXIiLCJzaGFwZSIsIlRyYWZmaWMiLCJtYXBMYXllclR5cGUiLCJhZGRMYXllciIsImlzUmVxdWlyZWQiLCJhbnkiLCJudW1iZXIiLCJlbGVtZW50IiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJwYXJzZUludCIsIm5hdGl2ZU1pbiIsIm1pbiIsInRvTnVtYmVyIiwiaXNTeW1ib2wiLCJ2YWx1ZU9mIiwiaXNCaW5hcnkiLCJoYW5kbGVJbnB1dENoYW5nZSIsIndhaXQiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJ0cmFpbGluZyIsIlR5cGVFcnJvciIsImludm9rZUZ1bmMiLCJ0aW1lIiwibGVhZGluZ0VkZ2UiLCJzZXRUaW1lb3V0IiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImNhbmNlbCIsImNsZWFyVGltZW91dCIsImZsdXNoIiwiZGVib3VuY2UiLCJmbiIsIl9zdHlsZSIsIm1hcmdpbiIsImZvbnRGYW1pbHkiLCJ3aWR0aCIsInBhZGRpbmciLCJmb250U2l6ZSIsImxpbmVIZWlnaHQiLCJjb2xvciIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRDbGlwIiwiYm9yZGVyIiwiYm9yZGVyUmFkaXVzIiwidHJhbnNpdGlvbiIsIlBsYWNlSW5wdXQiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiYXNzaWduIiwidGVzdDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwidGVzdDMiLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwicyIsIlN0eWxlU2hlZXQiLCJfb2JqZWN0QXNzaWduMiIsIl9vYmplY3RBc3NpZ24iLCJfX2VzTW9kdWxlIiwibGFzdCIsImFyciIsInNoZWV0Rm9yVGFnIiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsImlzQnJvd3NlciIsImlzRGV2IiwiZW52IiwiTk9ERV9FTlYiLCJpc1Rlc3QiLCJvbGRJRSIsImRpdiIsImlubmVySFRNTCIsIm1ha2VTdHlsZVRhZyIsIl9yZWYiLCJfcmVmJHNwZWVkeSIsInNwZWVkeSIsIl9yZWYkbWF4TGVuZ3RoIiwibWF4TGVuZ3RoIiwiaXNTcGVlZHkiLCJ0YWdzIiwiY3RyIiwiZ2V0U2hlZXQiLCJpbmplY3QiLCJfdGhpcyIsImluamVjdGVkIiwiY3NzUnVsZXMiLCJpbnNlcnRSdWxlIiwicnVsZSIsIl9pbnNlcnQiLCJpbmRleE9mIiwid2FybiIsImluc2VydCIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJkZWxldGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJydWxlcyIsImNvbmNhdCIsImFycjIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfaHlwaGVuUGF0dGVybiIsIl8iLCJjaGFyYWN0ZXIiLCJ0b1VwcGVyQ2FzZSIsIm1zUGF0dGVybiIsImNhbWVsaXplIiwiaXNVbml0bGVzc051bWJlciIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZFJvd0VuZCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkQ29sdW1uRW5kIiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4IiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicHJlZml4ZXMiLCJwcm9wIiwicHJlZml4IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwicHJlZml4S2V5IiwiQ1NTUHJvcGVydHkiLCJzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZEF0dGFjaG1lbnQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb25YIiwiYmFja2dyb3VuZFBvc2l0aW9uWSIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbVN0eWxlIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyUmlnaHRTdHlsZSIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyVG9wQ29sb3IiLCJmb250IiwiZm9udFN0eWxlIiwiZm9udFZhcmlhbnQiLCJvdXRsaW5lIiwib3V0bGluZVdpZHRoIiwib3V0bGluZVN0eWxlIiwib3V0bGluZUNvbG9yIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsIndhcm5pbmciLCJwcmludFdhcm5pbmciLCJmb3JtYXQiLCJfbGVuIiwiX2tleSIsImFyZ0luZGV4IiwibWVzc2FnZSIsImNvbmRpdGlvbiIsIl9sZW4yIiwiX2tleTIiLCJfQ1NTUHJvcGVydHkyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9DU1NQcm9wZXJ0eSIsIl93YXJuaW5nMiIsIl93YXJuaW5nIiwic3R5bGVXYXJuaW5ncyIsImlzTmFOIiwib3duZXIiLCJfY3VycmVudEVsZW1lbnQiLCJfb3duZXIiLCJvd25lck5hbWUiLCJnZXROYW1lIiwid2FybmVkIiwid2FybmluZ3MiLCJ0cmltIiwiX3VwcGVyY2FzZVBhdHRlcm4iLCJoeXBoZW5hdGUiLCJjYWNoZSIsInN0eWxlcyIsInNlcmlhbGl6ZWQiLCJzdHlsZU5hbWUiLCJpc0N1c3RvbVByb3AiLCJzdHlsZVZhbHVlIiwid2FyblZhbGlkU3R5bGUiLCJwcm9jZXNzU3R5bGVOYW1lIiwiX2Rhbmdlcm91c1N0eWxlVmFsdWUyIiwiX2NhbWVsaXplU3R5bGVOYW1lMiIsIl9jYW1lbGl6ZVN0eWxlTmFtZSIsIl9kYW5nZXJvdXNTdHlsZVZhbHVlIiwiX2h5cGhlbmF0ZVN0eWxlTmFtZTIiLCJfaHlwaGVuYXRlU3R5bGVOYW1lIiwiX21lbW9pemVTdHJpbmdPbmx5MiIsIl9tZW1vaXplU3RyaW5nT25seSIsImJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybiIsImJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiIsIndhcm5lZFN0eWxlTmFtZXMiLCJ3YXJuZWRTdHlsZVZhbHVlcyIsIndhcm5lZEZvck5hTlZhbHVlIiwiY2hlY2tSZW5kZXJNZXNzYWdlIiwid2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUiLCJ3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUiLCJ3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24iLCJ3YXJuU3R5bGVWYWx1ZUlzTmFOIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiY2xlYW5PYmplY3QiLCJpc0ZhbHN5IiwiYWNjIiwiaGFzRmFsc3kiLCJmaWx0ZXJlZFZhbHVlIiwiY2xlYW4iLCJmaWx0ZXJlZCIsImZpbHRlcmVkUnVsZSIsInciLCJtIiwibXMiLCJ3bSIsIndtcyIsIndtbXMiLCJwbHVnaW5zIiwicHJlZml4TWFwIiwiYXBwZWFyYW5jZSIsInVzZXJTZWxlY3QiLCJ0ZXh0RW1waGFzaXNQb3NpdGlvbiIsInRleHRFbXBoYXNpcyIsInRleHRFbXBoYXNpc1N0eWxlIiwidGV4dEVtcGhhc2lzQ29sb3IiLCJib3hEZWNvcmF0aW9uQnJlYWsiLCJjbGlwUGF0aCIsIm1hc2tJbWFnZSIsIm1hc2tNb2RlIiwibWFza1JlcGVhdCIsIm1hc2tQb3NpdGlvbiIsIm1hc2tDbGlwIiwibWFza09yaWdpbiIsIm1hc2tTaXplIiwibWFza0NvbXBvc2l0ZSIsIm1hc2siLCJtYXNrQm9yZGVyU291cmNlIiwibWFza0JvcmRlck1vZGUiLCJtYXNrQm9yZGVyU2xpY2UiLCJtYXNrQm9yZGVyV2lkdGgiLCJtYXNrQm9yZGVyT3V0c2V0IiwibWFza0JvcmRlclJlcGVhdCIsIm1hc2tCb3JkZXIiLCJtYXNrVHlwZSIsInRleHREZWNvcmF0aW9uU3R5bGUiLCJ0ZXh0RGVjb3JhdGlvblNraXAiLCJ0ZXh0RGVjb3JhdGlvbkxpbmUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwiZmlsdGVyIiwiZm9udEZlYXR1cmVTZXR0aW5ncyIsImJyZWFrQWZ0ZXIiLCJicmVha0JlZm9yZSIsImJyZWFrSW5zaWRlIiwiY29sdW1uRmlsbCIsImNvbHVtbkdhcCIsImNvbHVtblJ1bGUiLCJjb2x1bW5SdWxlQ29sb3IiLCJjb2x1bW5SdWxlU3R5bGUiLCJjb2x1bW5SdWxlV2lkdGgiLCJjb2x1bW5zIiwiY29sdW1uU3BhbiIsImNvbHVtbldpZHRoIiwid3JpdGluZ01vZGUiLCJmbGV4QmFzaXMiLCJmbGV4RGlyZWN0aW9uIiwiZmxleEZsb3ciLCJmbGV4V3JhcCIsImFsaWduQ29udGVudCIsImFsaWduSXRlbXMiLCJhbGlnblNlbGYiLCJqdXN0aWZ5Q29udGVudCIsInRyYW5zZm9ybU9yaWdpbiIsInRyYW5zZm9ybU9yaWdpblgiLCJ0cmFuc2Zvcm1PcmlnaW5ZIiwiYmFja2ZhY2VWaXNpYmlsaXR5IiwicGVyc3BlY3RpdmUiLCJwZXJzcGVjdGl2ZU9yaWdpbiIsInRyYW5zZm9ybVN0eWxlIiwidHJhbnNmb3JtT3JpZ2luWiIsImFuaW1hdGlvbiIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uRGlyZWN0aW9uIiwiYW5pbWF0aW9uRmlsbE1vZGUiLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbk5hbWUiLCJhbmltYXRpb25QbGF5U3RhdGUiLCJhbmltYXRpb25UaW1pbmdGdW5jdGlvbiIsImJhY2tkcm9wRmlsdGVyIiwiZm9udEtlcm5pbmciLCJzY3JvbGxTbmFwVHlwZSIsInNjcm9sbFNuYXBQb2ludHNYIiwic2Nyb2xsU25hcFBvaW50c1kiLCJzY3JvbGxTbmFwRGVzdGluYXRpb24iLCJzY3JvbGxTbmFwQ29vcmRpbmF0ZSIsInNoYXBlSW1hZ2VUaHJlc2hvbGQiLCJzaGFwZUltYWdlTWFyZ2luIiwic2hhcGVJbWFnZU91dHNpZGUiLCJoeXBoZW5zIiwiZmxvd0ludG8iLCJmbG93RnJvbSIsInJlZ2lvbkZyYWdtZW50IiwidGV4dEFsaWduTGFzdCIsIndyYXBGbG93Iiwid3JhcFRocm91Z2giLCJ3cmFwTWFyZ2luIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkVGVtcGxhdGVBcmVhcyIsImdyaWRUZW1wbGF0ZSIsImdyaWRBdXRvQ29sdW1ucyIsImdyaWRBdXRvUm93cyIsImdyaWRBdXRvRmxvdyIsImdyaWQiLCJncmlkQ29sdW1uR2FwIiwiZ3JpZFJvd0dhcCIsImdyaWRBcmVhIiwiZ3JpZEdhcCIsInRleHRTaXplQWRqdXN0IiwiYm9yZGVySW1hZ2UiLCJib3JkZXJJbWFnZVJlcGVhdCIsImJvcmRlckltYWdlU291cmNlIiwidHJhbnNpdGlvbkRlbGF5IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwic3RyIiwicHJlZml4UHJvcGVydGllcyIsInByb3BlcnR5IiwicmVxdWlyZWRQcmVmaXhlcyIsImxlbiIsIl9jYXBpdGFsaXplU3RyaW5nMiIsIl9jYXBpdGFsaXplU3RyaW5nIiwibWV0YURhdGEiLCJwcm9jZXNzZWRWYWx1ZSIsInZhbHVlcyIsInpvb20taW4iLCJ6b29tLW91dCIsImdyYWIiLCJncmFiYmluZyIsInJlZ2V4IiwiX2lzUHJlZml4ZWRWYWx1ZTIiLCJfaXNQcmVmaXhlZFZhbHVlIiwiaW5saW5lLWZsZXgiLCJXZWJraXRCb3hPcmllbnQiLCJXZWJraXRCb3hEaXJlY3Rpb24iLCJhbHRlcm5hdGl2ZVByb3BzIiwiYWx0ZXJuYXRpdmVWYWx1ZXMiLCJzcGFjZS1hcm91bmQiLCJzcGFjZS1iZXR3ZWVuIiwiZmxleC1zdGFydCIsImZsZXgtZW5kIiwid3JhcC1yZXZlcnNlIiwid3JhcCIsInByb3BlcnRpZXMiLCJtYXhIZWlnaHQiLCJtYXhXaWR0aCIsImhlaWdodCIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwibWluLWNvbnRlbnQiLCJtYXgtY29udGVudCIsImZpbGwtYXZhaWxhYmxlIiwiZml0LWNvbnRlbnQiLCJjb250YWluLWZsb2F0cyIsInVwcGVyY2FzZVBhdHRlcm4iLCJ0b0h5cGhlbkxvd2VyIiwibWF0Y2giLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJoTmFtZSIsInByb3BlcnR5UHJlZml4TWFwIiwib3V0cHV0VmFsdWUiLCJtdWx0aXBsZVZhbHVlcyIsInNpbmdsZVZhbHVlIiwiZGFzaENhc2VQcm9wZXJ0eSIsIl9oeXBoZW5hdGVQcm9wZXJ0eTIiLCJqIiwicExlbiIsInVuc2hpZnQiLCJwcmVmaXhNYXBwaW5nIiwicHJlZml4VmFsdWUiLCJ3ZWJraXRPdXRwdXQiLCJtb3pPdXRwdXQiLCJfaHlwaGVuYXRlUHJvcGVydHkiLCJXZWJraXRUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvblByb3BlcnR5IiwiTW96VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb25Qcm9wZXJ0eSIsIldlYmtpdCIsIk1veiIsIl9wcmVmaXhWYWx1ZTIiLCJfcHJlZml4UHJvcGVydHkyIiwiX3N0YXRpY0RhdGEyIiwiX3N0YXRpY0RhdGEiLCJfcHJlZml4UHJvcGVydHkiLCJfcHJlZml4VmFsdWUiLCJfY3Vyc29yMiIsIl9jdXJzb3IiLCJfY3Jvc3NGYWRlMiIsIl9jcm9zc0ZhZGUiLCJfZmlsdGVyMiIsIl9maWx0ZXIiLCJfZmxleDIiLCJfZmxleCIsIl9mbGV4Ym94T2xkMiIsIl9mbGV4Ym94T2xkIiwiX2dyYWRpZW50MiIsIl9ncmFkaWVudCIsIl9pbWFnZVNldDIiLCJfaW1hZ2VTZXQiLCJfcG9zaXRpb24yIiwiX3Bvc2l0aW9uIiwiX3NpemluZzIiLCJfc2l6aW5nIiwiX3RyYW5zaXRpb24yIiwiX3RyYW5zaXRpb24iLCJfZXh0ZW5kcyIsIlBsdWdpblNldCIsIm5vZGUiLCJmbGF0dGVuZWQiLCJyZWR1Y2UiLCJvIiwiX0NTU1Byb3BlcnR5T3BlcmF0aW9ucyIsImNvbnRlbnQiLCJjb250IiwiY29udGVudFZhbHVlcyIsIl9wcmVmaXhlcjIiLCJfcHJlZml4ZXIiLCJpbml0aWFsIiwiZm5zIiwiYWRkIiwicmVtb3ZlIiwiVUludDMyIiwicG9zIiwiY2hhckNvZGVBdCIsIlVJbnQxNiIsIlVtdWwzMiIsInNlZWQiLCJoIiwiY3VycmVudEluZGV4IiwiayIsImNhblNpbXVsYXRlIiwicHNldWRvcyIsIl9jbGVhbjIiLCJ3YXJuZWQxIiwid2FybmVkMiIsInNpbXBsZSIsImhhc0xhYmVscyIsImlzTGlrZVJ1bGUiLCJpZEZvciIsImlkcyIsImluc2VydGVkIiwicmVnaXN0ZXJlZCIsInJ1bGVDYWNoZSIsInNlbGVjdCIsInNlbGVjdG9yIiwiX2xlbjQiLCJfa2V5NCIsIl9kZWZpbmVQcm9wZXJ0eSIsInF1ZXJ5IiwiX2xlbjUiLCJfa2V5NSIsInBzZXVkbyIsIjo6cGxhY2Vob2xkZXIiLCJfbGVuNyIsIl9rZXk3IiwiciIsImxhYmVsIiwiZGVjb25zdHJ1Y3RlZFN0eWxlVG9DU1MiLCJoYXNoaWZ5IiwiZGVjb25zdHJ1Y3QiLCJfbGVuOCIsIl9rZXk4IiwiaHRtbEF0dHJpYnV0ZXMiLCJfY2xlYW4iLCJfaGFzaDIiLCJfaGFzaCIsIl9zaGVldCIsIl9wbHVnaW5zIiwiY29udGVudFdyYXAiLCJmYWxsYmFja3MiLCJtZWRpYSIsImZvbnRGYWNlIiwia2V5ZnJhbWVzIiwiY2hhciIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b1JldCIsInNlbGVjdG9yVG9rZW5pemVyIiwic3BsaXRTZWxlY3RvciIsImluZGljZXMiLCJyZXMiLCJpblBhcmVuIiwidG9DU1MiLCJjcmVhdGVNYXJrdXBGb3JTdHlsZXMiLCJwbGFpbiIsInNlbGVjdHMiLCJtZWRpYXMiLCJzdXBwb3J0cyIsInJlZ2lzdGVyIiwic3BlYyIsInRvUnVsZSIsImRlY29uc3RydWN0ZWQiLCJjc3NSdWxlIiwiam9pblNlbGVjdG9ycyIsImEiLCJiIiwiYXMiLCJqb2luU3VwcG9ydHMiLCJwcmVmaXhlZFBzZXVkb1NlbGVjdG9ycyIsIjpmdWxsc2NyZWVuIiwiZGVzdCIsIl9yZWYyIiwiX3JlZjIkc2VsZWN0b3IiLCJfcmVmMiRtcSIsIm1xIiwiX3JlZjIkc3VwcCIsInN1cHAiLCJfcmVmMiRzcmMiLCJmbGF0dGVuIiwiaW5BcnIiLCJfc3JjIiwicmVnIiwiX2dldFJlZ2lzdGVyZWQiLCJjb21wb3NlcyIsInBvc3NpYmxlcyIsImZvdW5kIiwiY2giLCJpc1NlbGVjdG9yIiwiaXNNZWRpYVF1ZXJ5IiwiaXNTdXBwb3J0cyIsIl9kZXN0IiwiX2NzcyIsIm51bGxydWxlIiwiaW5wdXRDYWNoZXMiLCJXZWFrTWFwIiwid2FybmVkV2Vha01hcEVycm9yIiwiY2FjaGVkQ3NzIiwiY29pIiwiX2N0ciIsIl9jb2kiLCJfY29uc29sZSIsInJhdyIsImtmcyIsImlubmVyIiwia2YiLCJpbnNlcnRLZXlmcmFtZSIsImluc2VydEZvbnRGYWNlIiwibW9iaWxlIiwiTW9iaWxlIiwicGhhYmxldCIsIlBoYWJsZXQiLCJ0YWJsZXQiLCJUYWJsZXQiLCJkZXNrdG9wIiwiRGVza3RvcCIsImhkIiwiSGQiLCJfbGVuMyIsIl9rZXkzIiwiX2xlbjYiLCJfa2V5NiIsImljb25TdHlsZSIsIml0ZW1TdHlsZSIsImN1cnNvciIsIlBsYWNlSXRlbSIsIml0ZW1DbGFzcyIsImljb25DbGFzcyIsImdldEl0ZW0iLCJfZ2V0SXRlbSIsIm9uQ2xpY2siLCJ0aXRsZSIsIl9jb250Q2xhc3MiLCJib3R0b20iLCJsZWZ0IiwiUGxhY2VJdGVtcyIsImNvbnRhaW5lckNsYXNzIiwicGxhY2VTdHlsZSIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdMZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5MZWZ0IiwicG9zaXRpb24iLCJtZW1vIiwiaW5wdXRTdHlsZSIsImlucHV0Q2xhc3NOYW1lIiwiaXRlbUNvbnRhaW5lckNsYXNzIiwicGxhY2VDbGFzc05hbWUiLCJsaWJyYXJ5IiwiY2F0ZWdvcnkiLCJtYXJrZXJJY29uIiwibWFya2VyVHlwZSIsIm11bHRpTWFya2VyIiwic2VhcmNoVmFsdWUiLCJzZXRTZWFyY2hWYWx1ZSIsInNlYXJjaFJlc3VsdCIsInNldFNlYXJjaFJlc3VsdCIsInEiLCJjYXQiLCJzZXRQYXJhbXMiLCJzZXRVcGRhdGVNYXJrZXIiLCJwbGFjZU1hcmtlciIsInNldFBsYWNlTWFya2VyIiwiX21hcE9wdGlvbnMiLCJtYXBDZW50ZXIiLCJzZXRNYXBDZW50ZXIiLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsIl9wYXJhbXMiLCJhdCIsInBsYWNlIiwiQSIsInBsYWNlc1NlcnZpY2UiLCJnZXRQbGFjZXNTZXJ2aWNlIiwicGxhY2VzIiwiQXJvdW5kIiwiQ2F0ZWdvcmllcyIsIkV4cGxvcmUiLCJIZXJlIiwiTG9va3VwIiwiU3VnZ2VzdCIsIlNlYXJjaCIsInBsYWNlQnVpbGRlciIsInJlcXVlc3QiLCJzdWdnZXN0aW9ucyIsInJlc3VsdHMiLCJITWFwTWFya2VyIiwiY29udGFpbmVyU3R5bGUiLCJITWFwUG9seUxpbmUiLCJITWFwUG9seWdvbiIsIkhNYXBDaXJjbGUiLCJITWFwUmVjdGFuZ2xlIiwiSE1hcFJvdXRlIiwiUm91dGUiLCJITWFwTGF5ZXIiLCJMYXllciIsIkhNYXBHZW9Db2RlIiwiSE1hcFBsYWNlcyIsIlBsYWNlcyIsInBsYXRmb3JtRGF0YSIsInNldFBsYXRmb3JtRGF0YSIsInVzZUVmZmVjdCIsImxvYWRNYXAiLCJhcHBfaWQiLCJhcHBfY29kZSIsImFwaWtleSIsInNlcnZpY2UiLCJQbGF0Zm9ybSJdLCJtYXBwaW5ncyI6IndoSEFFQUEsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENB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
